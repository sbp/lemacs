dnl This is an autoconf script.
dnl To rebuild the `configure' script from this, execute the command
dnl 	autoconf
dnl in the directory containing this script.  You must have autoconf
dnl version 1.8 or later.
dnl
dnl The following text appears in the resulting `configure' script,
dnl explaining how to rebuild it.
AC_PREREQ(1.8)
[#!/bin/sh
#### Configuration script for Lucid Emacs.
#### Copyright (C) 1994 Free Software Foundation, Inc.

### Don't edit this script!
### This script was automatically generated by the `autoconf' program
### from the file `./configure.in'.
### To rebuild it, execute the command
###	autoconf
### in the this directory.  You must have autoconf version 1.8 or later.

### This file is part of Lucid Emacs.

### Lucid Emacs is free software; you can redistribute it and/or modify
### it under the terms of the GNU General Public License as published by
### the Free Software Foundation; either version 2, or (at your option)
### any later version.

### Lucid Emacs is distributed in the hope that it will be useful,
### but WITHOUT ANY WARRANTY; without even the implied warranty of
### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
### GNU General Public License for more details.

### You should have received a copy of the GNU General Public License
### along with GNU Emacs; see the file COPYING.  If not, write to
### the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.

### Since Emacs has configuration requirements that autoconf can't
### meet, this file is an unholy marriage of custom-baked
### configuration code and autoconf macros.
###
### We use the m4 quoting characters [ ] (as established by the
### autoconf system) to include large sections of raw sewage - Oops, I
### mean, shell code - in the final configuration script.
###
### Usage: configure config_name
###
### If configure succeeds, it leaves its status in config.status.
### If configure fails after disturbing the status quo,
### 	config.status is removed.

### Remove any more than one leading "." element from the path name.
### If we don't remove them, then another "./" will be prepended to
### the file name each time we use config.status, and the program name
### will get larger and larger.  This wouldn't be a problem, except
### that since progname gets recorded in all the Makefiles this script
### produces, move-if-change thinks they're different when they're
### not.
###
### It would be nice if we could put the ./ in a \( \) group and then
### apply the * operator to that, so we remove as many leading ./././'s
### as are present, but some seds (like Ultrix's sed) don't allow you to
### apply * to a \( \) group.  Bleah.
progname="`echo $0 | sed 's:^\./\./:\./:'`"


### Establish some default values.
prefix='/usr/local'
exec_prefix='${prefix}'
bindir='${exec_prefix}/bin'
datadir='${prefix}/lib'
statedir='${prefix}/lib'
libdir='${exec_prefix}/lib'
mandir='${prefix}/man/man1'
infodir='${prefix}/lib/lemacs-${version}/info'
lispdir='${datadir}/lemacs-${version}/lisp'
sitelispdir='${datadir}/lemacs/site-lisp'
etcdir='${datadir}/lemacs-${version}/etc'
lockdir='${statedir}/lemacs/lock'
archlibdir='${libdir}/lemacs-${version}/${configuration}'
with_lucid='yes'
const_is_losing='yes'
dont_have_xmu=''
rel_alloc=''
cflags=''
dynamic=''
with_x11='yes'
rel_alloc='no'
internal_makefile_list='Makefile lib-src/Makefile src/Makefile.in lwlib/Makefile.in'
energize_version='no'

# On Sun systems, people sometimes set up the variable CPP
# with a value that is a directory, not an executable at all.
# Detect that case, and ignore that value.
if [ "x$CPP" != x ] && [ -d "$CPP" ] ; then
  CPP=
fi

#### Usage messages.

short_usage="Usage: ${progname} CONFIGURATION [-OPTION[=VALUE] ...]

Set compilation and installation parameters for Lucid Emacs, and report.
CONFIGURATION specifies the machine and operating system to build for.
--x-includes=DIR 	Search for X header files in DIR.
--x-libraries=DIR	Search for X libraries in DIR.
--site-includes=DIR	Other header file directories.
--site-libraries=DIR	Other library directories.
--with-motif		Use the Motif toolkit.
--with-openlook		Use the OpenLook toolkit.
--with-lucid		Use the Lucid widgets.
--with-tooltalk		Support the ToolTalk system.
--with-sparcworks	Support the Sun Sparcworks system.
--with-energize		Support the Lucid Energize system.
--compiler		Specify compiler.  Overrides with-gcc and with-lcc.
--dynamic		Link dynamically if supported by system.
--with-gcc		Use GCC to compile Emacs.
--with-lcc		Use LCC to compile Emacs.
--with-gcc=no		Don't use GCC to compile Emacs.
--with-xpm		Compile with support for XPM files.
--with-extensions	Compile with lwlib extensions (requires Xt source).
--external-widget	Compile with external widget support.
--with-sound=native	Compile with native sound support.
--with-sound=netaudio	Compile with netaudio sound support.
--with-sound=both	Compile with native and netaudio sound support.
--with-epoch		Compile with additional Epoch compatibility.
--const-is-losing=no	Allow the use of const in the source code.
--dont-have-xmu		For those unfortunates whose vendors don't ship Xmu
--rel-alloc		Override setting given in configuration files.
--srcdir=DIR		Look for the Emacs source files in DIR.
--prefix=DIR		Install files below DIR. Defaults to \`${prefix}'.
--cflags=FLAGS		Override the default values for CFLAGS.

You may also specify any of the \`path' variables found in
Makefile.in, including --bindir, --libdir, --lispdir, --datadir, and
so on.  Note that we recommend against explicitly setting any of these
variables.  See the INSTALL file for a complete list plus the reasons
we advise not changing them.

If successful, ${progname} leaves its status in config.status.  If
unsuccessful after disturbing the status quo, it removes config.status."


#### Option processing.

### Record all the arguments, so we can save them in config.status.
arguments="$@"

### Shell Magic: Quote the quoted arguments in ARGUMENTS.  At a later date,
### in order to get the arguments back in $@, we have to do an
###  `eval set x "$quoted_arguments"; shift'.
quoted_arguments=
for i in "$@"; do
   quoted_arguments="$quoted_arguments '$i'"
done

### Don't use shift -- that destroys the argument list, which autoconf needs
### to produce config.status.  It turns out that "set - ${arguments}" doesn't
### work portably.
### However, it also turns out that many shells cannot expand ${10} at all.
### So using an index variable doesn't work either.  It is possible to use
### some shell magic to make 'set x "$arguments"; shift' work portably.
while [ $# != 0 ]; do
  arg="$1"; shift
  case "${arg}" in

    ## Anything starting with a hyphen we assume is an option.
    -* )
      ## Separate the switch name from the value it's being given.
      case "${arg}" in
        -*=*)
	  opt=`echo ${arg} | sed 's:^-*\([^=]*\)=.*$:\1:'`
	  val=`echo ${arg} | sed 's:^-*[^=]*=\(.*\)$:\1:'`
	  valomitted=no
	;;
        -*)
          ## If FOO is a boolean argument, --FOO is equivalent to
          ## --FOO=yes.  Otherwise, the value comes from the next
          ## argument - see below.
	  opt=`echo ${arg} | sed 's:^-*\(.*\)$:\1:'`
          val="yes"
          valomitted=yes
        ;;
      esac

      ## Change `-' in the option name to `_'.
      optname="${opt}"
      opt="`echo ${opt} | tr - _`"

      ## Process the option.
      case "${opt}" in

        ## Has the user specified which window systems they want to support?
#        "with_x" | "with_x11" )
#	  ## Make sure the value given was either "yes" or "no".
#	  case "${val}" in
#	    y | ye | yes )	val=yes ;;
#	    n | no )		val=no  ;;
#	    * )
#	      (echo "${progname}: the \`--${optname}' option is supposed to have a boolean value.
#Set it to either \`yes' or \`no'."
#	       echo "${short_usage}") >&2
#	      exit 1
#	    ;;
#	  esac
#          eval "${opt}=\"${val}\""
#        ;;

	## Has the user specified whether or not they want GCC or LCC?
	"with_gcc" | "with_lcc" )
	  ## Make sure the value given was either "yes" or "no".
	  case "${val}" in
	    y | ye | yes )	val=yes ;;
	    n | no )		val=no  ;;
	    * )
	      (echo "${progname}: the \`--${optname}' option is supposed to have a boolean value.
Set it to either \`yes' or \`no'."
	       echo "${short_usage}") >&2
	      exit 1
	    ;;
	  esac
          eval "${opt}=\"${val}\""
	  if [ "${with_gcc}" = "yes" ] && [ "${with_lcc}" = "yes" ] ; then
	    (echo "${progname}: only one of --with-gcc and --with-lcc may be specified."
	     echo "${short_usage}") >&2
	    exit 1
	  fi
        ;;

        ## Has the user specified a compiler to use?
	"compiler" )
	  ## If the value was omitted, get it from the next argument.
	  if [ "${valomitted}" = "yes" ]; then
	    ## Get the next argument from the argument list, if there is one.
            if [ $# = 0 ]; then
	      (echo "${progname}: You must give a value for the \`--${optname}' option, as in
    \`--${optname}=FOO'."
	       echo "${short_usage}") >&2
	      exit 1
	    fi
	    val="$1"; shift
	  fi
          compiler="${val}"
	;;

        ## Has the user specified a source directory?
	"srcdir" )
	  ## If the value was omitted, get it from the next argument.
	  if [ "${valomitted}" = "yes" ]; then
	    ## Get the next argument from the argument list, if there is one.
            if [ $# = 0 ]; then
	      (echo "${progname}: You must give a value for the \`--${optname}' option, as in
    \`--${optname}=FOO'."
	       echo "${short_usage}") >&2
	      exit 1
	    fi
	    val="$1"; shift
	  fi
          srcdir="${val}"
	;;

        ## Has the user requested sound support?
	"with_sound" )
	  ## value can be native, netaudio or both. yes is allowed 
	  ## as a backwards compatible synonym for native
	  case "${val}" in
	    y | ye | yes )			val=native ;;
	    n | no | non | none )		val=no;;
	    na | nat | nati | nativ | native )	val=native  ;;
	    ne | net | neta | netau | netaud | netaudi | netaudio )	val=netaudio  ;;
	    b | bo | bot | both )		val=both;;
	    * )
	      (echo "${progname}: the \`--${optname}' option should have one of the values \`native', \`netaudio', \`both', or \`none'."
	       echo "${short_usage}") >&2
	      exit 1
	    ;;
	  esac
          eval "${opt}=\"${val}\""
        ;;

        ## Has the user requested extra Epoch compatibility?
	"with_epoch" )
	  ## Make sure the value given was either "yes" or "no".
	  case "${val}" in
	    y | ye | yes )	val=yes ;;
	    n | no )		val=no  ;;
	    * )
	      (echo "${progname}: the \`--${optname}' option is supposed to have a boolean value.
Set it to either \`yes' or \`no'."
	       echo "${short_usage}") >&2
	      exit 1
	    ;;
	  esac
          eval "${opt}=\"${val}\""
        ;;

        ## Has the user specified a change to the default linking?
	"dynamic" )
	  ## Make sure the value given was either "yes" or "no".
	  case "${val}" in
	    y | ye | yes )	val=yes ;;
	    n | no )		val=no  ;;
	    * )
	      (echo "${progname}: the \`--${optname}' option is supposed to have a boolean value.
Set it to either \`yes' or \`no'."
	       echo "${short_usage}") >&2
	      exit 1
	    ;;
	  esac
          eval "${opt}=\"${val}\""
        ;;

        ## Has the user requested XPM support?
	"with_xpm" )
	  ## Make sure the value given was either "yes" or "no".
	  case "${val}" in
	    y | ye | yes )	val=yes ;;
	    n | no )		val=no  ;;
	    * )
	      (echo "${progname}: the \`--${optname}' option is supposed to have a boolean value.
Set it to either \`yes' or \`no'."
	       echo "${short_usage}") >&2
	      exit 1
	    ;;
	  esac
          eval "${opt}=\"${val}\""
        ;;

        ## Has the user requested lwlib extensions?  (This is necessary to
	## get dialog boxes working properly, but requires the Xt source.
	## This is not a perfect solution.)
	"with_extensions" )
	  ## Make sure the value given was either "yes" or "no".
	  case "${val}" in
	    y | ye | yes )	val=yes ;;
	    n | no )		val=no  ;;
	    * )
	      (echo "${progname}: the \`--${optname}' option is supposed to have a boolean value.
Set it to either \`yes' or \`no'."
	       echo "${short_usage}") >&2
	      exit 1
	    ;;
	  esac
          eval "${opt}=\"${val}\""
        ;;

        ## Has the user requested that assertions be used?
	"use_assertions" )
	  ## Make sure the value given was either "yes" or "no".
	  case "${val}" in
	    y | ye | yes )	val=yes ;;
	    n | no )		val=no  ;;
	    * )
	      (echo "${progname}: the \`--${optname}' option is supposed to have a boolean value.
Set it to either \`yes' or \`no'."
	       echo "${short_usage}") >&2
	      exit 1
	    ;;
	  esac
          eval "${opt}=\"${val}\""
        ;;

        ## Has the user requested external widget support?
	"external_widget" )
	  ## Make sure the value given was either "yes" or "no".
	  case "${val}" in
	    y | ye | yes )	val=yes ;;
	    n | no )		val=no  ;;
	    * )
	      (echo "${progname}: the \`--${optname}' option is supposed to have a boolean value.
Set it to either \`yes' or \`no'."
	       echo "${short_usage}") >&2
	      exit 1
	    ;;
	  esac
          eval "${opt}=\"${val}\""
        ;;

        ## Has the user requested that const be used?
	"const_is_losing" )
	  ## Make sure the value given was either "yes" or "no".
	  case "${val}" in
	    y | ye | yes )	val=yes ;;
	    n | no )		val=no  ;;
	    * )
	      (echo "${progname}: the \`--${optname}' option is supposed to have a boolean value.
Set it to either \`yes' or \`no'."
	       echo "${short_usage}") >&2
	      exit 1
	    ;;
	  esac
          eval "${opt}=\"${val}\""
        ;;

        ## Has the user mentioned that they don't have Xmu?
	"dont_have_xmu" )
	  ## Make sure the value given was either "yes" or "no".
	  case "${val}" in
	    y | ye | yes )	val=yes ;;
	    n | no )		val=no  ;;
	    * )
	      (echo "${progname}: the \`--${optname}' option is supposed to have a boolean value.
Set it to either \`yes' or \`no'."
	       echo "${short_usage}") >&2
	      exit 1
	    ;;
	  esac
          eval "${opt}=\"${val}\""
        ;;

        ## Has the user specified explicit instructions for rel_alloc?
	"rel_alloc" )
	  ## Make sure the value given was either "yes" or "no".
	  case "${val}" in
	    y | ye | yes )	val=yes ;;
	    n | no )		val=no  ;;
	    * )
	      (echo "${progname}: the \`--${optname}' option is supposed to have a boolean value.
Set it to either \`yes' or \`no'."
	       echo "${short_usage}") >&2
	      exit 1
	    ;;
	  esac
          eval "${opt}=\"${val}\""
        ;;

	## Has the user tried to tell us where the X files are?
	## I think these are dopey, but no less than three alpha
	## testers, at large sites, have said they have their X files
	## installed in odd places.
	"x_includes" )
	  ## If the value was omitted, get it from the next argument.
	  if [ "${valomitted}" = "yes" ]; then
	    ## Get the next argument from the argument list, if there is one.
            if [ $# = 0 ]; then
	      (echo "${progname}: You must give a value for the \`--${optname}' option, as in
    \`--${optname}=/usr/local/X11/include'."
	       echo "${short_usage}") >&2
	      exit 1
	    fi
            val="$1"; shift
	  fi
	  x_includes="${val}"
        ;;
	"x_libraries" )
	  ## If the value was omitted, get it from the next argument.
	  if [ "${valomitted}" = "yes" ]; then
	    ## Get the next argument from the argument list, if there is one.
            if [ $# = 0 ]; then
	      (echo "${progname}: You must give a value for the \`--${optname}' option, as in
    \`--${optname}=/usr/local/X11/lib'."
	       echo "${short_usage}") >&2
	      exit 1
	    fi
            val="$1"; shift
	  fi
	  x_libraries="${val}"
        ;;

	"site_includes" )
	  ## If the value was omitted, get it from the next argument.
	  if [ "${valomitted}" = "yes" ]; then
	    ## Get the next argument from the argument list, if there is one.
            if [ $# = 0 ]; then
	      (echo "${progname}: You must give a value for the \`--${optname}' option, as in
    \`--${optname}=/usr/local/X11/include'."
	       echo "${short_usage}") >&2
	      exit 1
	    fi
            val="$1"; shift
	  fi
	  site_includes="${val}"
        ;;
	"site_libraries" )
	  ## If the value was omitted, get it from the next argument.
	  if [ "${valomitted}" = "yes" ]; then
	    ## Get the next argument from the argument list, if there is one.
            if [ $# = 0 ]; then
	      (echo "${progname}: You must give a value for the \`--${optname}' option, as in
    \`--${optname}=/usr/local/X11/lib'."
	       echo "${short_usage}") >&2
	      exit 1
	    fi
            val="$1"; shift
	  fi
	  site_libraries="${val}"
        ;;

	## Has the user specified one of the path options?
	prefix | exec_prefix | bindir | datadir | statedir | libdir | \
	mandir | infodir | lispdir | etcdir | lockdir | archlibdir | \
	sitelispdir )
	   ## If the value was omitted, get it from the next argument.
	   if [ "${valomitted}" = "yes" ]; then
	      if [ $# = 0 ]; then
		 (echo \
"$progname: You must give a value for the \`--${optname}' option,";
		  echo \
"as in \`--${optname}=`eval echo '$'$optname`.'"
		  echo "$short_usage") >&2
		 exit 1
	      fi
	      val="$1"; shift
	   fi
	   eval "${opt}=\"${val}\""
	;;

	## Has the user specified values to override CFLAGS?
	cflags )
	   ## If the value was omitted, get it from the next argument.
	   if [ "${valomitted}" = "yes" ]; then
	      if [ $# = 0 ]; then
		 (echo \
"$progname: You must give a value for the \`--${optname}' option,";
		  echo \
"as in \`--${optname}=`eval echo '$'$optname`-g -O'"
		  echo "$short_usage") >&2
		 exit 1
	      fi
	      val="$1"; shift
	   fi
	   eval "${opt}=\"${val}\""
	;;

	## Verbose flag, tested by autoconf macros.
	"verbose" )
	  verbose=yes
	;;

	## Has the user asked for some help?
	"usage" | "help" )
	  if [ "x$PAGER" = x ]
	  then
	    echo "${short_usage}" | more
	  else
	    echo "${short_usage}" | $PAGER
	  fi
	  exit
	;;

	## Has the user specified whether they want a toolkit?
	"with_motif" | "with_openlook" | "with_lucid" )
	  ## Make sure the value given was either "yes" or "no".
	  case "${val}" in
	    y | ye | yes )	val=yes ;;
	    n | no )		val=no  ;;
	    * )
	      (echo "${progname}: the \`--${optname}' option is supposed to have a boolean value.
Set it to either \`yes' or \`no'."
	       echo "${short_usage}") >&2
	      exit 1
	    ;;
	  esac
          eval "${opt}=\"${val}\""
	  if [ "${with_motif}" = "yes" ] && [ "${with_openlook}" = "yes" ] ; then
	    (echo "${progname}: only one of --with-motif and --with-openlook may be specified."
	     echo "${short_usage}") >&2
	    exit 1
	  fi
        ;;

	## Has the user specified whether or not they want to use ToolTalk?
	"with_tooltalk" )
	  ## Make sure the value given was either "yes" or "no".
	  case "${val}" in
	    y | ye | yes )	val=yes ;;
	    n | no )		val=no  ;;
	    * )
	      (echo "${progname}: the \`--${optname}' option is supposed to have a boolean value.
Set it to either \`yes' or \`no'."
	       echo "${short_usage}") >&2
	      exit 1
	    ;;
	  esac
          eval "${opt}=\"${val}\""
        ;;

	## Has the user specified whether or not they want to use SparcWorks?
	"with_sparcworks" )
	  ## Make sure the value given was either "yes" or "no".
	  case "${val}" in
	    y | ye | yes )	val=yes ;;
	    n | no )		val=no  ;;
	    * )
	      (echo "${progname}: the \`--${optname}' option is supposed to have a boolean value.
Set it to either \`yes' or \`no'."
	       echo "${short_usage}") >&2
	      exit 1
	    ;;
	  esac
          eval "${opt}=\"${val}\""
	  if [ "${with_sparcworks}" = "yes" ]; then
            with_tooltalk='yes'
	  fi
        ;;

	## Has the user specified to create a runnable temacs?
	"runnable_temacs" )
	  ## Make sure the value given was either "yes" or "no".
	  case "${val}" in
	    y | ye | yes )	val=yes ;;
	    n | no )		val=no  ;;
	    * )
	      (echo "${progname}: the \`--${optname}' option is supposed to have a boolean value.
Set it to either \`yes' or \`no'."
	       echo "${short_usage}") >&2
	      exit 1
	    ;;
	  esac
          eval "${opt}=\"${val}\""
        ;;

	## Does the user want usage tracking?
	"usage_tracking" )
	  ## Make sure the value given was either "yes" or "no".
	  case "${val}" in
	    y | ye | yes )	val=yes ;;
	    n | no )		val=no  ;;
	    * )
	      (echo "${progname}: the \`--${optname}' option is supposed to have a boolean value.
Set it to either \`yes' or \`no'."
	       echo "${short_usage}") >&2
	      exit 1
	    ;;
	  esac
          eval "${opt}=\"${val}\""
        ;;

	## Has the user specified whether or not they want to use Energize?
	"with_energize" )
	  ## Make sure the value given was either "yes" or "no".
	  case "${val}" in
	    y | ye | yes )	val=yes ;;
	    n | no )		val=no  ;;
	    * )
	      (echo "${progname}: the \`--${optname}' option is supposed to have a boolean value.
Set it to either \`yes' or \`no'."
	       echo "${short_usage}") >&2
	      exit 1
	    ;;
	  esac
          eval "${opt}=\"${val}\""
	  if [ "${with_energize}" = "yes" ]; then
	    with_motif='yes'
	    with_lucid='yes'
	    with_extensions='yes'
	    with_tooltalk='yes'
	    internal_makefile_list="$internal_makefile_list lwlib/energize/Makefile.in"
	  fi
        ;;

        ## We ignore all other options silently.
      esac
    ;;

    ## Anything not starting with a hyphen we assume is a
    ## configuration name.
    *)
      configuration=${arg}
    ;;

  esac
done

### Get the arguments back.  See the diatribe on Shell Magic above.
eval set x "$quoted_arguments"; shift

if [ "${configuration}" = "" ]; then
  echo '- You did not tell me what kind of host system you want to configure.
- I will attempt to guess the kind of system this is.' 1>&2
  guesssys=`echo ${progname} | sed 's/configure$/config.guess/'`
  if configuration=`${guesssys}` ; then
    echo "- Looks like this is a ${configuration}" 1>&2
  else
    echo '- Failed to guess the system type.  You need to tell me.' 1>&2
    echo "${short_usage}" >&2
    exit 1
  fi
fi

#### Decide where the source is.
case "${srcdir}" in

  ## If it's not specified, see if  `.' or `..' might work.
  "" )
    confdir=`echo $0 | sed 's|//|/|' | sed 's|/[^/]*$||'`
    if [ -f $confdir/src/lisp.h -a -f $confdir/lisp/version.el ]; then
      srcdir="${confdir}"
    else
      if [ -f "./src/lisp.h" -a -f "./lisp/version.el" ]; then
        srcdir='.'
      else
        if [ -f "../src/lisp.h" -a -f "../lisp/version.el" ]; then
	  srcdir='..'
        else
	  (echo "\
${progname}: Neither the current directory nor its parent seem to
contain the Emacs sources.  If you do not want to build Emacs in its
source tree, you should run \`${progname}' in the directory in which
you wish to build Emacs, using its \`--srcdir' option to say where the
sources may be found."
	    echo "${short_usage}") >&2
	  exit 1
        fi
      fi
    fi
  ;;

  ## Otherwise, check if the directory they specified is okay.
  * )
    if [ ! -d "${srcdir}" -o ! -f "${srcdir}/src/lisp.h" -o ! -f "${srcdir}/lisp/version.el" ]; then
      (echo "\
${progname}: The directory specified with the \`--srcdir' option,
\`${srcdir}', doesn't seem to contain the Emacs sources.  You should
either run the \`${progname}' script at the top of the Emacs source
tree, or use the \`--srcdir' option to specify where the Emacs sources
are."
       echo "${short_usage}") >&2
      exit 1
    fi
  ;;
esac

#### Make srcdir absolute, if it isn't already.  It's important to
#### avoid running the path through pwd unnecessary, since pwd can
#### give you automounter prefixes, which can go away.
case "${srcdir}" in
  /* ) ;;
  . )
    ## We may be able to use the $PWD environment variable to make this
    ## absolute.  But sometimes PWD is inaccurate.
    if [ "${PWD}" != "" ] && [ "`(cd ${PWD} ; sh -c pwd)`" = "`pwd`" ] ; then
      srcdir="$PWD"
    else
      srcdir="`(cd ${srcdir}; pwd)`"
    fi
  ;;
  *  ) srcdir="`(cd ${srcdir}; pwd)`" ;;
esac

#### Check if the source directory already has a configured system in it.
if [ `pwd` != `(cd ${srcdir} && pwd)` ] \
   && [ -f "${srcdir}/src/config.h" ] ; then
  (echo "${progname}: WARNING: The directory tree \`${srcdir}' is being used"
   echo "   as a build directory right now; it has been configured in its own"
   echo "   right.  To configure in another directory as well, you MUST"
   echo "   use GNU make.  If you do not have GNU make, then you must"
   echo "   now do \`make distclean' in ${srcdir},"
   echo "   and then run ${progname} again.") >&2
  extrasub='/^VPATH[	 ]*=/c\
vpath %.c $(srcdir)\
vpath %.h $(srcdir)\
vpath %.y $(srcdir)\
vpath %.l $(srcdir)\
vpath %.s $(srcdir)\
vpath %.in $(srcdir)'
fi

### Make the necessary directories, if they don't exist.
for dir in ./src ./lib-src ./lwlib ; do
  if [ ! -d ${dir} ]; then
    mkdir ${dir}
  fi
done
if [ "${with_energize}" = "yes" ] && [ ! -d ./lwlib/energize ] ; then
  mkdir ./lwlib/energize
fi

#### Given the configuration name, set machfile and opsysfile to the
#### names of the m/*.h and s/*.h files we should use.

### Canonicalize the configuration name.
echo "Checking the configuration name."
# allow -energize prefix on configuration name
internal_configuration=`echo ${configuration} | sed 's/-energize//'`
if canonical=`${srcdir}/config.sub "${internal_configuration}"` ; then : ; else
  exit $?
fi

### If you add support for a new configuration, add code to this
### switch statement to recognize your configuration name and select
### the appropriate operating system and machine description files.

### You would hope that you could choose an m/*.h file pretty much
### based on the machine portion of the configuration name, and an s-
### file based on the operating system portion.  However, it turns out
### that each m/*.h file is pretty manufacturer-specific - for
### example, apollo.h, hp9000s300.h, mega68k, news.h, and tad68k are
### all 68000 machines; mips.h, pmax.h, and news-risc are all MIPS
### machines.  So we basically have to have a special case for each
### configuration name.
###
### As far as handling version numbers on operating systems is
### concerned, make sure things will fail in a fixable way.  If
### /etc/MACHINES doesn't say anything about version numbers, be
### prepared to handle anything reasonably.  If version numbers
### matter, be sure /etc/MACHINES says something about it.
###
### Eric Raymond says we should accept strings like "sysvr4" to mean
### "System V Release 4"; he writes, "The old convention encouraged
### confusion between `system' and `release' levels'."

machine='' opsys='' unported='false'
case "${canonical}" in

  ## Alliant machines
  ## Strictly speaking, we need the version of the alliant operating
  ## system to choose the right machine file, but currently the
  ## configuration name doesn't tell us enough to choose the right
  ## one; we need to give alliants their own operating system name to
  ## do this right.  When someone cares, they can help us.
  fx80-alliant-* )
    machine=alliant4 opsys=bsd4-2
  ;;
  i860-alliant-* )
    machine=alliant-2800 opsys=bsd4-3
  ;;

  ## Altos 3068
  m68*-altos-sysv* )
    machine=altos opsys=usg5-2
  ;;
    
  ## Amdahl UTS
  580-amdahl-sysv* )
    machine=amdahl opsys=usg5-2-2
  ;;

  ## Appallings - I mean, Apollos - running Domain
  m68*-apollo* )
    machine=apollo opsys=bsd4-2
  ;;

  ## AT&T 3b2, 3b5, 3b15, 3b20
  we32k-att-sysv* )
    machine=att3b opsys=usg5-2-2
  ;;

  ## AT&T 3b1 - The Mighty Unix PC!
  m68*-att-sysv* )
    machine=7300 opsys=usg5-2-2
  ;;

  ## Bull dpx20
  rs6000-bull-bosx* )
    machine=ibmrs6000 opsys=aix3-2
  ;;

  ## Bull dpx2
  m68*-bull-sysv3* )
    machine=dpx2 opsys=usg5-3
  ;;

  ## Bull sps7
  m68*-bull-sysv2* )
    machine=sps7 opsys=usg5-2
  ;;

  ## CCI 5/32, 6/32 -- see "Tahoe".

  ## Celerity
  ## I don't know what configuration name to use for this; config.sub
  ## doesn't seem to know anything about it.  Hey, Celerity users, get
  ## in touch with us!
  celerity-celerity-bsd* )
    machine=celerity opsys=bsd4-2
  ;;

  ## Clipper
  ## What operating systems does this chip run that Emacs has been
  ## tested on?
  clipper-* )
    machine=clipper
    ## We'll use the catch-all code at the bottom to guess the
    ## operating system.
  ;;

  ## Convex
  *-convex-bsd* )
    machine=convex opsys=bsd4-3
  ;;

  ## Cubix QBx/386
  i386-cubix-sysv* )
    machine=intel386 opsys=usg5-3
  ;;

  ## Cydra 5
  cydra*-cydrome-sysv* )
    machine=cydra5 opsys=usg5-3
  ;;

  ## Data General AViiON Machines
  m88k-dg-dgux* )
    machine=aviion opsys=dgux
  ;;

  ## DECstations
  alpha-dec-osf1.3 | alpha-dec-osf2* )
    machine=alpha opsys=decosf1-3
  ;;
  alpha-dec-osf1.2 | alpha-dec-osf1* )
    machine=alpha opsys=decosf1-2
  ;;
  mips-dec-ultrix[0-3].* | mips-dec-ultrix4.0* | mips-dec-bsd4.2* )
    machine=pmax opsys=bsd4-2
  ;;
  mips-dec-ultrix* | mips-dec-bsd* )
    machine=pmax opsys=bsd4-3
  ;;
  mips-dec-osf* )
    machine=pmax opsys=osf1
  ;;
  mips-dec-mach* )
    machine=pmax opsys=mach
  ;;

  ## Motorola Delta machines
  m68*-motorola-sysv* | m68000-motorola-sysv* )
    machine=delta opsys=usg5-3
  ;;
  m88k-motorola-sysv4* )
    machine=delta88k opsys=usg5-4
  ;;
  m88k-motorola-sysv* | m88k-motorola-m88kbcs* )
    machine=delta88k opsys=usg5-3
  ;;

  ## Dual machines
  m68*-dual-sysv* )
    machine=dual opsys=usg5-2
  ;;
  m68*-dual-uniplus* )
    machine=dual opsys=unipl5-2
  ;;

  ## Elxsi 6400
  elxsi-elxsi-sysv* )
    machine=elxsi opsys=usg5-2
  ;;

  ## Encore machines
  ns16k-encore-bsd* )
    machine=ns16000 opsys=umax
  ;;

  ## The GEC 93 - apparently, this port isn't really finished yet.

  ## Gould Power Node and NP1
  pn-gould-bsd4.2* )
    machine=gould opsys=bsd4-2
  ;;
  pn-gould-bsd4.3* )
    machine=gould opsys=bsd4-3
  ;;
  np1-gould-bsd* )
    machine=gould-np1 opsys=bsd4-3
  ;;

  ## Harris Night Hawk machines running CX/UX (a 5000 looks just like a 4000
  ## as far as Emacs is concerned).
  m88k-harris-cxux* )
    # Build needs to be different on 7.0 and later releases
    case "`uname -r`" in
       [56].[0-9] ) machine=nh4000 opsys=cxux ;;
       [7].[0-9] ) machine=nh4000 opsys=cxux7 ;;
    esac
  ;;
  ## Harris ecx or gcx running CX/UX (Series 1200, Series 3000)
  m68k-harris-cxux* )
    machine=nh3000 opsys=cxux
  ;;

  ## Honeywell XPS100
  xps*-honeywell-sysv* )
    machine=xps100 opsys=usg5-2
  ;;

  ## HP 9000 series 200 or 300
  m68*-hp-bsd* )
    machine=hp9000s300 opsys=bsd4-3
  ;;
  m68*-hp-netbsd* )
    machine=hp9000s300 opsys=netbsd
  ;;
  ## HP/UX 7, 8 and 9 are supported on these machines.
  m68*-hp-hpux* )
    NON_GNU_CPP="cc -Aa -E"
    NON_GNU_CC="cc -Aa"
    case "`uname -r`" in
      ## Someone's system reports A.B8.05 for this.
      ## I wonder what other possibilities there are.
      *.B8.* ) machine=hp9000s300 opsys=hpux8 ;;
      *.08.* ) machine=hp9000s300 opsys=hpux8 ;;
      *.09.* ) machine=hp9000s300 opsys=hpux9 ;;
      *) machine=hp9000s300 opsys=hpux ;;
    esac
  ;;

  ## HP 9000 series 700 and 800, running HP/UX
  hppa*-hp-hpux7* )
    machine=hp9000s800 opsys=hpux NON_GNU_CPP="cc -Aa -E" NON_GNU_CC="cc -Aa"
  ;;
  hppa*-hp-hpux8* )
    machine=hp9000s800 opsys=hpux8 NON_GNU_CPP="cc -Aa -E" NON_GNU_CC="cc -Aa"
  ;;
  hppa*-hp-hpux8shr )
    machine=hp9000s800 opsys=hpux8shr NON_GNU_CPP="cc -Aa -E" NON_GNU_CC="cc -Aa"
  ;;
  hppa*-hp-hpux9* )
    machine=hp9000s800 opsys=hpux9 NON_GNU_CPP="cc -Aa -E" NON_GNU_CC="cc -Aa"
  ;;
  hppa*-hp-hpux9shr )
    machine=hp9000s800 opsys=hpux9shr NON_GNU_CPP="cc -Aa -E" NON_GNU_CC="cc -Aa"
  ;;

  ## HP 9000 series 700 and 800, running HP/UX
  hppa*-hp-hpux* )
    NON_GNU_CPP="cc -Aa -E" NON_GNU_CC="cc -Aa"
    ## Cross-compilation?  Nah!
    case "`uname -r`" in
      ## Someone's system reports A.B8.05 for this.
      ## I wonder what other possibilities there are.
      *.B8.* ) machine=hp9000s800 opsys=hpux8 ;;
      *.08.* ) machine=hp9000s800 opsys=hpux8 ;;
      *.09.* ) machine=hp9000s800 opsys=hpux9 ;;
      *) machine=hp9000s800 opsys=hpux ;;
    esac
  ;;

  ## Orion machines
  orion-orion-bsd* )
    machine=orion opsys=bsd4-2
  ;;
  clipper-orion-bsd* )
    machine=orion105 opsys=bsd4-2
  ;;

  ## IBM machines
  i386-ibm-aix1.1* )
    machine=ibmps2-aix opsys=usg5-2-2
  ;;
  i386-ibm-aix1.[23]* | i386-ibm-aix* )
    machine=ibmps2-aix opsys=usg5-3
  ;;
  i370-ibm-aix*)
    machine=ibm370aix opsys=usg5-3
  ;;
  rs6000-ibm-aix3.1* )
    machine=ibmrs6000 opsys=aix3-1
  ;;
  rs6000-ibm-aix3.2* | rs6000-ibm-aix* )
    machine=ibmrs6000 opsys=aix3-2
  ;;
  romp-ibm-bsd4.3* )
    machine=ibmrt opsys=bsd4-3
  ;;	
  romp-ibm-bsd4.2* )
    machine=ibmrt opsys=bsd4-2
  ;;
  romp-ibm-aos4.3* )
    machine=ibmrt opsys=bsd4-3
  ;;	
  romp-ibm-aos4.2* )
    machine=ibmrt opsys=bsd4-2
  ;;
  romp-ibm-aos* )
    machine=ibmrt opsys=bsd4-3
  ;;
  romp-ibm-bsd* )
    machine=ibmrt opsys=bsd4-3
  ;;
  romp-ibm-aix* )
    machine=ibmrt-aix opsys=usg5-2-2
  ;;
  romp-ibm-mach* )
    machine=ibmrt opsys=mach
  ;;

  ## Integrated Solutions `Optimum V'
  m68*-isi-bsd4.2* )
    machine=isi-ov opsys=bsd4-2
  ;;
  m68*-isi-bsd4.3* )
    machine=isi-ov opsys=bsd4-3
  ;;

  ## Intel 386 machines where we do care about the manufacturer
  i[34]86-intsys-sysv* )
    machine=is386 opsys=usg5-2-2
  ;;

  ## Prime EXL
  i386-prime-sysv* )
    machine=i386 opsys=usg5-3
  ;;

  ## Sequent Symmetry
  i386-sequent-bsd* )
    machine=symmetry opsys=bsd4-3
  ;;

  ## Unspecified sysv on an ncr machine defaults to svr4.2.
  ## (Plain usg5-4 doesn't turn on POSIX signals, which we need.)
  i[34]86-ncr-sysv* )
    machine=intel386 opsys=usg5-4-2
  ;;

  ## Intel 860
  i860-*-sysv4* )
    machine=i860 opsys=usg5-4
  ;;

  ## Masscomp machines
  m68*-masscomp-rtu* )
    machine=masscomp opsys=rtu
  ;;

  ## Megatest machines
  m68*-megatest-bsd* )
    machine=mega68 opsys=bsd4-2
  ;;

  ## Workstations sold by MIPS
  ## This is not necessarily all workstations using the MIPS processor -
  ## Irises are produced by SGI, and DECstations by DEC.

  ## etc/MACHINES lists mips.h and mips4.h as possible machine files,
  ## and usg5-2-2 and bsd4-3 as possible OS files.  The only guidance
  ## it gives for choosing between the alternatives seems to be "Use
  ## -machine=mips4 for RISCOS version 4; use -opsystem=bsd4-3 with
  ## the BSD world."  I'll assume that these are instructions for
  ## handling two odd situations, and that every other situation
  ## should use mips.h and usg5-2-2, they being listed first.
  mips-mips-usg* )
    machine=mips4
    ## Fall through to the general code at the bottom to decide on the OS.
  ;;
  mips-mips-riscos4* )
    machine=mips4 opsys=bsd4-3
    NON_GNU_CC="cc -systype bsd43"
    NON_GNU_CPP="cc -systype bsd43 -E"
  ;;
  mips-mips-bsd* )
    machine=mips opsys=bsd4-3
  ;;
  mips-mips-* )
    machine=mips opsys=usg5-2-2
  ;;

  ## NeXT
  m68*-next-* )
    machine=next opsys=mach2
  ;;

  ## The complete machine from National Semiconductor
  ns32k-ns-genix* )
    machine=ns32000 opsys=usg5-2
  ;;

  ## NCR machines
  m68*-ncr-sysv2* | m68*-ncr-sysvr2* )
    machine=tower32 opsys=usg5-2-2
  ;;
  m68*-ncr-sysv3* | m68*-ncr-sysvr3* )
    machine=tower32v3 opsys=usg5-3
  ;;

  ## Nixdorf Targon 31
  m68*-nixdorf-sysv* )
    machine=targon31 opsys=usg5-2-2
  ;;

  ## Nu (TI or LMI)
  m68*-nu-sysv* )
    machine=nu opsys=usg5-2
  ;;

  ## Plexus
  m68*-plexus-sysv* )
    machine=plexus opsys=usg5-2
  ;;

  ## Pyramid machines
  ## I don't really have any idea what sort of processor the Pyramid has,
  ## so I'm assuming it is its own architecture.
  pyramid-pyramid-bsd* )
    machine=pyramid opsys=bsd4-2
  ;;

  ## Sequent Balance
  ns32k-sequent-bsd4.2* )
    machine=sequent opsys=bsd4-2
  ;;
  ns32k-sequent-bsd4.3* )
    machine=sequent opsys=bsd4-3
  ;;

  ## Siemens Nixdorf
  mips-siemens-sysv* )
    machine=mips-siemens opsys=usg5-4
    NON_GNU_CC=/usr/ccs/bin/cc
    NON_GNU_CPP=/usr/ccs/bin/cc -E
  ;;

  ## Silicon Graphics machines
  ## Iris 2500 and Iris 2500 Turbo (aka the Iris 3030)
  m68*-sgi-iris3.5* )
    machine=irist opsys=iris3-5
  ;;
  m68*-sgi-iris3.6* | m68*-sgi-iris*)
    machine=irist opsys=iris3-6
  ;;
  ## Iris 4D
  mips-sgi-irix3.* )
    machine=iris4d opsys=irix3-3
  ;;
  mips-sgi-irix5.1 | mips-sgi-irix5.1.* | mips-sgi-irix5.2* )
    machine=iris4d opsys=irix5-1
  ;;
  mips-sgi-irix5.* | mips-sgi-irix5 )
    machine=iris4d opsys=irix5-0
  ;;
  mips-sgi-irix4.* | mips-sgi-irix* )
    machine=iris4d opsys=irix4-0
  ;;

  ## SONY machines
  m68*-sony-bsd4.2* )
    machine=news opsys=bsd4-2
  ;;
  m68*-sony-bsd4.3* )
    machine=news opsys=bsd4-3
  ;;
  m68*-sony-newsos3*)
    machine=news opsys=bsd4-3
  ;;
  mips-sony-bsd* )
    machine=news-risc opsys=bsd4-3
  ;;
  mips-sony-newsos* )
    machine=mips opsys=newsos5
  ;;

  ## Stride
  m68*-stride-sysv* )
    machine=stride opsys=usg5-2
  ;;

  ## Suns
  *-sun-sunos* | *-sun-bsd* | *-sun-solaris* | *-sun-mach* )
    case "${canonical}" in
      m68*-sunos1* )	machine=sun1 ;;
      m68*-sunos2* )	machine=sun2 ;;
      m68* )		machine=sun3 ;;
      i[34]86* )	machine=sun386 ;;
      sparc* )		machine=sparc ;;
      * )		unported=true ;;
    esac
    case "${canonical}" in
      ## The Sun386 didn't get past 4.0.
      i386-*-sunos4	  ) opsys=sunos4-0 ;;
      *-sunos4.0*	  ) opsys=sunos4-0 ;;
      *-sunos4.1.2*       ) opsys=sunos4-1-2 ;;
      *-sunos4.1.3*	  ) opsys=sunos4-1-3 ;;
      *-sunos4* | *-sunos ) opsys=sunos4-1 ;;
      *-sunos4-0shr*	  ) opsys=sunos4-0shr ;;
      *-sunos4-1shr*	  ) opsys=sunos4-1shr ;;
      *-sunos4-1-2shr*	  ) opsys=sunos4-1-2shr ;;
      *-sunos4-1-3shr*	  ) opsys=sunos4-1-3shr ;;
      *-sunos5* | *-solaris* )
	opsys=sol2
	NON_GNU_CPP=/usr/ccs/lib/cpp
	;;
      *-mach*		  ) opsys=mach ;;
      *			  ) opsys=bsd4-2 ;;
    esac
  ;;

  ## Tadpole 68k
  m68*-tadpole-sysv* )
    machine=tad68k opsys=usg5-3
  ;;

  ## Tahoe machines
  tahoe-tahoe-bsd4.2* )
    machine=tahoe opsys=bsd4-2
  ;;
  tahoe-tahoe-bsd4.3* )
    machine=tahoe opsys=bsd4-3
  ;;

  ## Tandem Integrity S2
  mips-tandem-sysv* )
    machine=tandem-s2 opsys=usg5-3
  ;;

  ## Tektronix XD88
  m88k-tektronix-sysv3* )
  machine=tekxd88 opsys=usg5-3
  ;;

  ## Tektronix 16000 box (6130?)
  ns16k-tektronix-bsd* )
    machine=ns16000 opsys=bsd4-2
  ;;
  ## Tektronix 4300
  ## src/m/tek4300.h hints that this is a m68k machine.
  m68*-tektronix-bsd* )
    machine=tek4300 opsys=bsd4-3
  ;;

  ## Titan P2 or P3
  ## We seem to have lost the machine-description file titan.h!
  titan-titan-sysv* )
    machine=titan opsys=usg5-3
  ;;
  
  ## Ustation E30 (SS5E)
  m68*-unisys-uniplus* )
    machine=ustation opsystem=unipl5-2
  ;;

  ## Vaxen.
  vax-dec-* )
    machine=vax
    case "${canonical}" in
      *-bsd4.1* ) 					opsys=bsd4-1 ;;
      *-bsd4.2* | *-ultrix[0-3].* | *-ultrix4.0* )	opsys=bsd4-2 ;;
      *-bsd4.3* | *-ultrix* ) 				opsys=bsd4-3 ;;
      *-bsd386* )					opsys=bsd386 ;;
      *-sysv[01]* | *-sysvr[01]* ) 			opsys=usg5-0 ;;
      *-sysv2* | *-sysvr2* )				opsys=usg5-2 ;;
      *-vms* ) 						opsys=vms ;;
      *-mach* )						opsys=mach ;;
      * ) 						unported=true
    esac
  ;;

  ## Whitechapel MG1
  ns16k-whitechapel-* )
    machine=mg1
    ## We don't know what sort of OS runs on these; we'll let the
    ## operating system guessing code below try.
  ;;

  ## Wicat
  m68*-wicat-sysv* )
    machine=wicat opsys=usg5-2
  ;;

  ## Intel 386 machines where we don't care about the manufacturer
  i[34]86-*-* )
    machine=intel386
    case "${canonical}" in
      *-isc1.* | *-isc2.[01]* )	opsys=386-ix ;;
      *-isc2.2* )		opsys=isc2-2 ;;
      *-isc4.0* )		opsys=isc4-0 ;;
      *-isc* )			opsys=isc3-0 ;;
      *-esix5* )		opsys=esix5r4; NON_GNU_CPP=/usr/lib/cpp ;;
      *-esix* )			opsys=esix ;;
      *-mach* )			opsys=mach ;;
      *-xenix* )		opsys=xenix ;;
      *-linux* )		opsys=linux ;;
      *-sco3.2v4* )		opsys=sco4 ;;
      *-bsd386* )		opsys=bsd386 ;;
      *-386bsd* )	        opsys=386bsd ;;
      *-freebsd* )		opsys=freebsd ;;
      *-netbsd* )	        opsys=netbsd ;;
      *-nextstep* )		opsys=mach2 ;;
      ## Otherwise, we'll fall through to the generic opsys code at the bottom.
    esac
  ;;

  * )
    unported=true
  ;;
esac

### If the code above didn't choose an operating system, just choose
### an operating system based on the configuration name.  You really
### only want to use this when you have no idea what the right
### operating system is; if you know what operating systems a machine
### runs, it's cleaner to make it explicit in the case statement
### above.
if [ x"${opsys}" = x ]; then
  case "${canonical}" in
    *-bsd4.[01] )	opsys=bsd4-1 ;;
    *-bsd4.2 )		opsys=bsd4-2 ;;
    *-bsd4.3 )		opsys=bsd4-3 ;;
    *-sysv0 | *-sysvr0 )		opsys=usg5-0 ;;
    *-sysv2 | *-sysvr2 )		opsys=usg5-2 ;;
    *-sysv2.2 | *-sysvr2.2 )		opsys=usg5-2-2 ;;
    *-sysv3 | *-sysvr3 )		opsys=usg5-3 ;;
    *-sysv4 | *-sysvr4 )		opsys=usg5-4 ;;
    *-sysv4.1 | *-sysvr4.1 )
      NON_GNU_CPP=/usr/lib/cpp
      opsys=usg5-4 ;;
    *-sysv4.2 | *-sysvr4.2 )		opsys=usg5-4-2 ;;
    * )
      unported=true
    ;;
  esac
fi

if $unported ; then
  (echo "${progname}: Emacs hasn't been ported to \`${canonical}' systems."
   echo "${progname}: Check \`etc/MACHINES' for recognized configuration names."
  ) >&2
  exit 1
fi

if [ "${dynamic}" = "yes" ]; then
  if [ "${with_extensions}" = "yes" ]; then
    ] AC_WARN(--dynamic not allowed in conjunction with --with-extensions) [
    dynamic=no
  else
    case "${opsys}" in
      hpux8		) opsys=hpux8shr ;;
      hpux9		) opsys=hpux9shr ;;
      sunos4-0		) opsys=sunos4-0shr ;;
      sunos4-1		) opsys=sunos4-1shr ;;
      sunos4-1-2	) opsys=sunos4-1-2shr ;;
      sunos4-1-3	) opsys=sunos4-1-3shr ;;
    esac
  fi
elif [ "${dynamic}" = "no" ]; then
  case "${opsys}" in
    sol2	)	opsys=sol2-static ;;
  esac
fi

machfile="m/${machine}.h"
opsysfile="s/${opsys}.h"

]
AC_LANG_C
AC_PREPARE(lisp)
AC_CONFIG_HEADER(src/config.h)
[

#### Choose a compiler.
if [ "x$CC" = x ] ; then
  cc_specified=1
fi

if [ "${compiler}" != "" ] ; then
  CC="${compiler}"
elif [ "${with_gcc}" = "yes" ] ; then
  CC="gcc"
  GCC=1
elif [ "${with_lcc}" = "yes" ] ; then
  CC="lcc"
  if [ "x$NON_GNU_CPP" = x ] ; then
    NON_GNU_CPP="yes"
  fi
elif [ "${with_gcc}" = "no" ] ; then
  CC="cc"
elif [ "${with_lcc}" = "no" ] ; then
  CC="cc"
else
  case "${canonical}" in
    * )
      ] AC_PROG_CC [
      if [ "${CC}" = "gcc" ] ; then
        with_gcc="yes"
        GCC=1
      fi
    ;;
  esac
fi

#### Some systems specify a CPP to use unless we are using GCC.
#### Now that we know whether we are using GCC, we can decide whether
#### to use that one.
if [ "x$NON_GNU_CPP" = x ] || [ x$GCC = x1 ]
then true
else
  if [ "x$CPP" = x ]; then
    if [ "${with_lcc}" = "yes" ] && [ "${NON_GNU_CPP}" = "yes" ] ; then
      CPP="lcc -E -Xk"
    else
      CPP="$NON_GNU_CPP"
    fi
  fi
fi

#### Some systems specify a CC to use unless we are using GCC.
#### Now that we know whether we are using GCC, we can decide whether
#### to use that one.
if [ "x$NON_GNU_CC" = x ] || [ x$GCC = x1 ] || [ x$cc_specified = x1 ]
then true
else
  CC="$NON_GNU_CC"
fi

#### Some other nice autoconf tests.  If you add a test here which
#### should make an entry in src/config.h, don't forget to add an
#### #undef clause to src/config.h.in for autoconf to modify.
]
dnl checks for programs
AC_LN_S
AC_PROG_CPP
[
case "${canonical}" in
  *-sun-sunos* )
    if [ "${CPP}" = "acc -E" ] ; then
      CPP="acc -E -Xs"
    fi
  ;;
esac
]
AC_SET_MAKE
AC_PROG_RANLIB
AC_PROG_INSTALL
AC_PROG_YACC

dnl checks for UNIX variants that set `DEFS'

dnl checks for header files
AC_HAVE_HEADERS(mach/mach.h sys/time.h unistd.h utime.h)
AC_STDC_HEADERS
AC_TIME_WITH_SYS_TIME
AC_SYS_SIGLIST_DECLARED

dnl checks for typedefs
AC_RETSIGTYPE

dnl checks for structure members
AC_STRUCT_TM
AC_TIMEZONE

dnl check byte order
AC_WORDS_BIGENDIAN

dnl other checks for UNIX variants
[

#### Choose a window system.
echo "Checking window system."

window_system=''
case "${with_x}" in
  yes )
    window_system=${window_system}x11
  ;;
  no )
    window_system=${window_system}none
esac
case "${with_x11}" in
  yes )
    window_system=${window_system}x11
  ;;
esac

case "${window_system}" in
  "none" | "x11" ) ;;
  "" )
    # --x-includes or --x-libraries implies --with-x11.
    if [ -n "${x_includes}" ] || [ -n "${x_libraries}" ]; then
      window_system=x11
    else
      echo "  No window system specified.  Looking for X11."
      # If the user didn't specify a window system and we found X11, use it.
      if [ -r /usr/lib/libX11.a \
	 -o -d /usr/include/X11 \
         -o -d /usr/X386/include \
	 -o -d ${x_includes}/X11 ]; then
        window_system=x11
      fi
    fi
  ;;
  * )
    echo "Don't specify a window system more than once." >&2
    exit 1
  ;;
esac

case "${window_system}" in
  "" | "x11" )
    ### If the user hasn't specified where we should find X, try
    ### letting autoconf figure that out.
    if [ -z "${x_includes}" ] && [ -z "${x_libraries}" ]; then
      ]
      AC_FIND_X
      [
    fi
    if [ -n "${x_includes}" ] || [ -n "${x_libraries}" ]; then
      window_system=x11
    fi
  ;;
esac

[ -z "${window_system}" ] && window_system=none

if [ "${window_system}" = "none" ]; then
  echo "This version of emacs only runs under X at the moment." >&2
  exit 1
fi

[ -n "${x_libraries}" ] && LD_SWITCH_X_SITE="-L${x_libraries}"
[ -n "${x_includes}" ] && C_SWITCH_X_SITE="-I${x_includes}"

if [ -n "${site_libraries}" ]; then
  for arg in ${site_libraries}
  do
    LD_SWITCH_SITE="${LD_SWITCH_SITE} -L${arg}"
    case "${canonical}" in
      *-sun-solaris* | *-sun-sunos5* )
        LD_SWITCH_SITE="${LD_SWITCH_SITE} -R${arg}"
      esac
  done
fi
if [ -n "${site_includes}" ]; then
  for arg in ${site_includes}
  do
    C_SWITCH_SITE="${C_SWITCH_SITE} -I${arg}"
  done
fi

# Avoid forcing the search of /usr/include before fixed include files.
if [ "$C_SWITCH_X_SITE" = "-I/usr/include" ]; then
   C_SWITCH_X_SITE=" "
fi

case "${window_system}" in
  x11 )
    HAVE_X_WINDOWS=yes
    echo "  Using X11."
  ;;
  none )
    HAVE_X_WINDOWS=no
    echo "  Using no window system."
  ;;
esac

#### Extract some information from the operating system and machine files.

echo "Examining the machine- and system-dependent files to find out"
echo " - which libraries the lib-src programs will want, and"
echo " - whether the GNU malloc routines are usable."

### It's not important that this name contain the PID; you can't run
### two configures in the same directory and have anything work
### anyway.
tempcname="conftest.c"

echo '
#define THIS_IS_YMAKEFILE
#include "'${srcdir}'/src/'${opsysfile}'"
#include "'${srcdir}'/src/'${machfile}'"
#ifndef LIBS_MACHINE
#define LIBS_MACHINE
#endif
#ifndef LIBS_SYSTEM
#define LIBS_SYSTEM
#endif
#ifndef C_SWITCH_SYSTEM
#define C_SWITCH_SYSTEM
#endif
#ifndef C_SWITCH_X_SYSTEM
#define C_SWITCH_X_SYSTEM
#endif
#ifndef C_SWITCH_MACHINE
#define C_SWITCH_MACHINE
#endif
#ifndef LD_SWITCH_X_SYSTEM
#define LD_SWITCH_X_SYSTEM
#endif
configure___ libsrc_libs=LIBS_MACHINE LIBS_SYSTEM
configure___ c_switch_system=C_SWITCH_SYSTEM
configure___ c_switch_x_system=C_SWITCH_X_SYSTEM
configure___ ld_switch_x_system=LD_SWITCH_X_SYSTEM
configure___ c_switch_machine=C_SWITCH_MACHINE

#ifndef LIB_X11_LIB
#define LIB_X11_LIB -lX11
#endif

#ifndef LIBX11_MACHINE
#define LIBX11_MACHINE
#endif

#ifndef LIBX11_SYSTEM
#define LIBX11_SYSTEM
#endif
configure___ LIBX=LIB_X11_LIB LIBX11_MACHINE LIBX11_SYSTEM

#ifdef UNEXEC
configure___ unexec=UNEXEC
#else
configure___ unexec=unexec.o
#endif

#ifdef SYSTEM_MALLOC
configure___ system_malloc=yes
#else
configure___ system_malloc=no
#endif

#ifndef C_DEBUG_SWITCH
#define C_DEBUG_SWITCH -g
#endif

#ifndef C_OPTIMIZE_SWITCH
#define C_OPTIMIZE_SWITCH -O
#endif

#ifdef __GNUC__
configure___ CFLAGS=C_DEBUG_SWITCH C_OPTIMIZE_SWITCH
#else
configure___ CFLAGS=C_DEBUG_SWITCH
#endif
' > ${tempcname}
# The value of CPP is a quoted variable reference, so we need to do this
# to get its actual value...
CPP=`eval "echo $CPP"`
eval `${CPP} -Isrc ${tempcname} \
       | grep 'configure___' \
       | sed -e 's/^configure___ \([^=]*=\)\(.*\)$/\1"\2"/'`
rm ${tempcname}

# override CFLAGS if user wishes
if [ x"${cflags}" != x ]; then
  CFLAGS=${cflags}
fi

### Compute the unexec source name from the object name.
UNEXEC_SRC="`echo ${unexec} | sed 's/\.o/.c/'`"

# Do the opsystem or machine files prohibit the use of the GNU malloc?
# Assume not, until told otherwise.
GNU_MALLOC=yes
if [ "${system_malloc}" = "yes" ]; then
  GNU_MALLOC=no
  GNU_MALLOC_reason="
  (The GNU allocators don't work with this system configuration.)"
fi

if [ "${rel_alloc}" = "yes" ]; then
  # REL_ALLOC requires GNU malloc
  if [ "${GNU_MALLOC}" = "yes" ]; then
    REL_ALLOC=yes
  fi
elif [ "${rel_alloc}" = "no" ]; then
  REL_ALLOC=no
fi

if [ x"${REL_ALLOC}" = x ]; then
  if [ x"${NO_REL_ALLOC}" = x ]; then
    REL_ALLOC=${GNU_MALLOC}
  fi
fi

LISP_FLOAT_TYPE=yes


#### Add the libraries to LIBS and check for some functions.

]
DEFS="${C_SWITCH_SITE} $c_switch_system $c_switch_machine $c_switch_x_system $DEFS"
LIBS="${LD_SWITCH_SITE} $ld_switch_x_system $libsrc_libs"

dnl If found, this defines HAVE_LIBDNET, which m/pmax.h checks,
dnl and also adds -ldnet to LIBS, which Autoconf uses for checks.
AC_HAVE_LIBRARY(-ldnet)

if test "${HAVE_X_WINDOWS}" = "yes"; then
  DEFS="$C_SWITCH_X_SITE $DEFS"
  LIBS="$LD_SWITCH_X_SITE $LIBS $LIBX"
fi

#
# make sure we can find libX11.*
#
internal_xlibs_found='no'
AC_HAVE_LIBRARY(-lX11, internal_xlibs_found='yes')
if test "${internal_xlibs_found}" = "no" ; then
  echo "Unable to find X11 libraries." >&2
  exit 1
fi

#
# make sure we can find Intrinsic.h
#
internal_xincludes_found='no'
for arg in ${DEFS} /usr/include
do
  if test -f `echo "${arg}/X11/Intrinsic.h" | sed 's/^\-I//'` ; then
    internal_xincludes_found='yes'
  fi
done
if test "${internal_xincludes_found}" = "no" ; then
  echo "Unable to find X11 header files." >&2
  exit 1
fi

#
# if Energize specified, make sure we can find its need libraries/headers
#
if test "${with_energize}" = "yes" ; then
  AC_HAVE_LIBRARY(-lenergize, energize_version='3.X')
  if test "${energize_version}" = "no" ; then
    AC_HAVE_LIBRARY(-lconn, energize_version='2.X')
    if test "${energize_version}" = "no" ; then
      echo "Unable to find Energize library." >&2
      exit 1
    fi
  fi

  internal_eincludes_found='no'
  for arg in ${DEFS} /usr/include
  do
    if test -f `echo "${arg}/editorconn.h" | sed 's/^\-I//'` ; then
      internal_eincludes_found='yes'
    fi
  done
  if test "${internal_eincludes_found}" = "no" ; then
    echo "Unable to find Energize editorconn.h header file." >&2
    exit 1
  fi
fi

# logb and frexp are found in -lm on most systems.
AC_HAVE_LIBRARY(-lm)

# see if XPM is hanging around somewhere
if test "${with_xpm}" != "no" ; then
  if test "${with_xpm}" != "yes" ; then
    AC_HAVE_LIBRARY(-lXpm, with_xpm="yes")
    if test "${with_xpm}" = "yes" ; then
      AC_VERBOSE(defining HAVE_XPM)
    fi
  fi
fi

# if --with-extensions has been specified, make sure we can find IntrinsicI.h
# can't use ac_header_check cause its braindead
if test "${with_extensions}" = "yes" ; then
  intrinsici_found='no'
    for arg in ${DEFS} /usr/include
    do
      if test -f `echo "${arg}/IntrinsicI.h" | sed 's/^\-I//'` ; then
        intrinsici_found='yes'
      fi
    done
  if test "${intrinsici_found}" = "no" ; then
    (echo \
  "$progname: --with-extensions specified but unable to find IntrinsicI.h";
     echo \
  "Specify its location with the --site-includes flag") >&2
    exit 1
  fi
fi

# see if Motif is hanging around somewhere
if test "${with_motif}" != "no" ; then
  if test "${with_motif}" != "yes" ; then
    AC_HAVE_LIBRARY(-lXm, with_motif="yes")
    if test "${with_motif}" = "yes" ; then
      AC_VERBOSE(defining LWLIB_USES_MOTIF)
    fi
  fi
fi

AC_HAVE_FUNCS(cbrt closedir dup2 frexp gethostname getpagesize gettimeofday getwd acosh asinh atanh logb matherr mkdir mmap perror random realpath rename res_init rint rmdir setsid strerror)

ok_so_far=true
AC_FUNC_CHECK(socket, , ok_so_far=)
if test -n "$ok_so_far"; then
  AC_HEADER_CHECK(netinet/in.h, , ok_so_far=)
fi
if test -n "$ok_so_far"; then
  AC_HEADER_CHECK(arpa/inet.h, , ok_so_far=)
fi
if test -n "$ok_so_far"; then
  AC_DEFINE(HAVE_INET_SOCKETS)
fi
[
#### Find out which version of Emacs this is.
version=`grep 'defconst[	 ]*emacs-version' ${srcdir}/lisp/version.el \
	 | sed -ne 's/^(defconst emacs-version "\([0-9][0-9]\.[0-9]*\).*/\1/p'`
beta=`grep 'concat emacs-version ' ${srcdir}/lisp/version.el \
      | sed -ne 's/^.*(concat emacs-version " Lucid (beta\([^)]*\)).*/\1/p'`
if [ "X$beta" != "X" ]; then
  version=${version}-b${beta}
fi
if [ x"${version}" = x ]; then
  echo "${progname}: can't find current emacs version in
	\`${srcdir}/lisp/version.el'." >&2
  exit 1
fi

if [ -f /usr/lpp/X11/bin/smt.exp ]; then
  ]
  AC_DEFINE(AIX_SMT_EXP, /usr/lpp/X11/bin/smt.exp)
  [
elif [ -f /usr/bin/X11/smt.exp ]; then
  ]
  AC_DEFINE(AIX_SMT_EXP, /usr/bin/X11/smt.exp)
  [
fi

if [ "${with_sound}" != "native" ] && [ "${with_sound}" != "netaudio" ] && [ "${with_sound}" != "both" ]; then
  case "${canonical}" in
    *-sun-sunos* | *-sun-bsd* )
      if [ -d /usr/demo/SOUND/multimedia ]; then
        with_sound="native"
      fi
    ;;
    *-sun-solaris* | *-sun-sunos5* )
      if [ -d /usr/demo/SOUND/include/multimedia ]; then
        with_sound="native"
      fi
    ;;
    *-sgi-* )
      ] AC_HAVE_LIBRARY(-laudio, with_sound="native") [
    ;;
    hppa*-hp-hpux* )
      ] AC_HAVE_LIBRARY(-lAlib, with_sound="native") [
    ;;
  esac
fi

if [ "${with_tooltalk}" = "yes" ]; then
  for arg in ${DEFS} "-I/usr/include" "-I/usr/openwin/include"
  do
    if [ -f `echo "${arg}/desktop/tt_c.h" | sed 's/^\-I//'` ]; then
      C_SWITCH_X_SITE="${C_SWITCH_X_SITE} ${arg}/desktop"
    fi
  done

  for arg in ${LIBS} "-L/usr/lib" "-L/usr/openwin/lib"
  do
    if [ -f `echo "${arg}/libtt.a" | sed 's/^\-L//'` ]; then
      LD_SWITCH_X_SITE="${LD_SWITCH_X_SITE} ${arg}"
    fi
  done
fi

#### Specify what sort of things we'll be editing into Makefile and config.h.
### Use configuration here uncanonicalized to avoid exceeding size limits.
]
AC_SUBST(configuration)
AC_SUBST(version)
AC_SUBST(srcdir)
AC_SUBST(prefix)
AC_SUBST(exec_prefix)
AC_SUBST(bindir)
AC_SUBST(datadir)
AC_SUBST(statedir)
AC_SUBST(libdir)
AC_SUBST(mandir)
AC_SUBST(infodir)
AC_SUBST(lispdir)
AC_SUBST(sitelispdir)
AC_SUBST(etcdir)
AC_SUBST(lockdir)
AC_SUBST(archlibdir)
AC_SUBST(c_switch_system)
AC_SUBST(c_switch_machine)
AC_SUBST(libsrc_libs)
AC_SUBST(LD_SWITCH_X_SITE)
AC_SUBST(C_SWITCH_X_SITE)
AC_SUBST(LD_SWITCH_SITE)
AC_SUBST(C_SWITCH_SITE)
AC_SUBST(CFLAGS)

AC_DEFINE_UNQUOTED(config_machfile,  "\"${machfile}\"")
AC_DEFINE_UNQUOTED(config_opsysfile, "\"${opsysfile}\"")
AC_DEFINE_UNQUOTED(LD_SWITCH_X_SITE, ${LD_SWITCH_X_SITE})
AC_DEFINE_UNQUOTED(C_SWITCH_X_SITE,  ${C_SWITCH_X_SITE})
AC_DEFINE_UNQUOTED(LD_SWITCH_SITE,   ${LD_SWITCH_SITE})
AC_DEFINE_UNQUOTED(C_SWITCH_SITE,    ${C_SWITCH_SITE})
AC_DEFINE_UNQUOTED(UNEXEC_SRC,       ${UNEXEC_SRC})
AC_DEFINE_UNQUOTED(CONFIGURATION,    "\"${configuration}\"")

[
if [ "${HAVE_X_WINDOWS}" = "yes" ] ; then
  ] AC_DEFINE(HAVE_X_WINDOWS) [
fi
if [ "${HAVE_XFREE386}" = "yes" ] ; then
  ] AC_DEFINE(HAVE_XFREE386) [
fi
if [ "${GNU_MALLOC}" = "yes" ] ; then
  ] AC_DEFINE(GNU_MALLOC) [
fi
if [ "${REL_ALLOC}" = "yes" ] ; then
  ] AC_DEFINE(REL_ALLOC) [
fi
if [ "${LISP_FLOAT_TYPE}" = "yes" ] ; then
  ] AC_DEFINE(LISP_FLOAT_TYPE) [
fi
if [ "${with_motif}" = "yes" ] ; then
  ] AC_DEFINE(LWLIB_USES_MOTIF) [
fi
if [ "${with_openlook}" = "yes" ] ; then
  ] AC_DEFINE(LWLIB_USES_OLIT) [
fi
if [ "${with_lucid}" = "yes" ] ; then
  ] AC_DEFINE(LWLIB_USES_LUCID) [
fi
if [ "${with_tooltalk}" = "yes" ] ; then
  ] AC_DEFINE(TOOLTALK) [
fi
if [ "${with_sparcworks}" = "yes" ] ; then
  ] AC_DEFINE(SUNPRO) [
fi
if [ "${runnable_temacs}" = "yes" ] ; then
  ] AC_DEFINE(RUNNABLE_TEMACS) [
fi
if [ "${usage_tracking}" = "yes" ] ; then
  ] AC_DEFINE(USAGE_TRACKING) [
fi
if [ "${with_energize}" = "yes" ] ; then
  ] AC_DEFINE(ENERGIZE) [
  if [ "${energize_version}" = "2.X" ] ; then
    ] AC_DEFINE(ENERGIZE_2) [
  elif [ "${energize_version}" = "3.X" ] ; then
    ] AC_DEFINE(ENERGIZE_3) [
  fi
fi
if [ "${with_gcc}" = "yes" ] ; then
  ] AC_DEFINE(USE_GCC) [
fi
if [ "${with_lcc}" = "yes" ] ; then
  ] AC_DEFINE(USE_LCC) [
fi
if [ "${with_xpm}" = "yes" ]; then
  ] AC_DEFINE(HAVE_XPM) [
fi
if [ "${with_epoch}" = "yes" ]; then
  ] AC_DEFINE(EPOCH) [
fi
if [ "${with_extensions}" = "yes" ]; then
  ] AC_DEFINE(USE_EXTENSIONS) [
fi
if [ "${dont_have_xmu}" != "yes" ]; then
  ] AC_DEFINE(HAVE_XMU) [
fi
if [ "${with_sound}" = "native" -o  "${with_sound}" = "both" ]; then
  ] AC_DEFINE(HAVE_NATIVE_SOUND) [
fi
if [ "${with_sound}" = "netaudio" -o  "${with_sound}" = "both" ]; then
  ] AC_DEFINE(HAVE_NETAUDIO_SOUND) [
fi
if [ "${external_widget}" = "yes" ]; then
  ] AC_DEFINE(EXTERNAL_WIDGET) [
fi
if [ "${const_is_losing}" = "yes" ]; then
  ] AC_DEFINE(CONST_IS_LOSING) [
fi
if [ "${use_assertions}" = "yes" ]; then
  ] AC_DEFINE(USE_ASSERTIONS) [
fi


#### Report on what we decided to do.
echo "

Configured for \`${canonical}'.

  Where should the build process find the source code?    ${srcdir}
  What installation prefix should install use?		  ${prefix}
  What operating system and machine description files should Emacs use?
        \`${opsysfile}' and \`${machfile}'
  What compiler should emacs be built with?               ${CC} ${CFLAGS}
  Should Emacs use the GNU version of malloc?             ${GNU_MALLOC}${GNU_MALLOC_reason}
  Should Emacs use the relocating allocator for buffers?  ${REL_ALLOC}
  What window system should Emacs use?                    ${window_system}${x_includes+
  Where do we find X Windows header files?                }${x_includes}${x_libraries+
  Where do we find X Windows libraries?                   }${x_libraries}"

if [ -n "$site_includes" ]; then
  echo "  Additional header files:                                ${site_includes}"
fi

if [ -n "$site_libraries" ]; then
  echo "  Additional libraries:                                   ${site_libraries}"
fi

if [ "$with_xpm" = "yes" ]; then
  echo "  Compiling in support for XPM."
fi
if [ "$with_epoch" = "yes" ]; then
  echo "  Compiling in extra Epoch compatibility."
fi
if [ "$with_extensions" = "yes" ]; then
  echo "  Compiling in support for lwlib extensions."
fi
if [ "$with_sound" = "netaudio" ]; then
  echo "  Compiling in netaudio support."
fi
if [ "$with_sound" = "native" ]; then
  echo "  Compiling in native sound support."
fi
if [ "$with_sound" = "both" ]; then
  echo "  Compiling in both netaudio and native sound support."
fi
if [ "$with_tooltalk" = "yes" ]; then
  echo "  Compiling in support for ToolTalk."
fi
if [ "$with_sparcworks" = "yes" ]; then
  echo "  Compiling in support for SparcWorks."
fi
if [ "$with_energize" = "yes" ]; then
  echo "  Compiling in support for Lucid Energize."
fi
if [ "$with_motif" = "yes" ]; then
  echo "  Using the Motif toolkit."
fi
if [ "$with_openlook" = "yes" ]; then
  echo "  Using the OpenLook toolkit."
fi
if [ "$runnable_temacs" = "yes" ]; then
  echo "  Creating a runnable temacs."
fi
if [ "$usage_tracking" = "yes" ]; then
  echo "  Compiling with usage tracking active."
fi
echo "
"

# This has to be called in order for this variable to get into config.status
] AC_SUBST(internal_makefile_list) [
# Remove any trailing slashes in these variables.
test -n "${prefix}" &&
  prefix=`echo "${prefix}" | sed 's,\([^/]\)/*$,\1,'`
test -n "${exec_prefix}" &&
  exec_prefix=`echo "${exec_prefix}" | sed 's,\([^/]\)/*$,\1,'`
]
AC_OUTPUT($internal_makefile_list) [
# Build src/Makefile from ${srcdir}/src/Makefile.in and lwlib/Makefile
# from ${srcdir}/lwlib/Makefile.in.  This must be done after src/config.h
# is built, since we rely on that file.  Only do the build if
# "config.status" is present, since it's non-presence indicates
# an error occured.
status=$?
if [ ! -f ./config.status ]; then
   exit $status
fi
topsrcdir=${srcdir}
  # We discard all lines in Makefile.in that start with `# Generated' or /**/#
  # because some cpps get confused by them.
  # Really we should preserve them somehow into Makefile,
  # but that is beyond my level of shell programming.
makefile_command='echo "creating src/Makefile";
  topsrcdir='"${topsrcdir}"';
( cd ./src;
  rm -f junk.c;
  sed -e '\''s/^# Generated.*//'\'' -e '\''s%/\*\*/#.*%%'\'' < Makefile.in > junk.c;
  eval `echo ${CPP} -I. -I${topsrcdir}/src ${CPPFLAGS} junk.c \>junk.cpp`;
  < junk.cpp							'\
'    sed -e '\''s/^#.*//'\''					'\
'	-e '\''s/^[ \f\t][ \f\t]*$//'\''			'\
'	-e '\''s/^ /	/'\'' 					'\
'	| sed -n -e '\''/^..*$/p'\''				'\
'	> Makefile.new;
    chmod 444 Makefile.new;
    mv -f Makefile.new Makefile;
    rm -f junk.c junk.cpp;
)'
eval `echo $makefile_command`
lwlib_makefile_command='echo "creating lwlib/Makefile";
  topsrcdir='"${topsrcdir}"';
( cd ./lwlib;
  rm -f junk.c;
  sed -e '\''s/^# Generated.*//'\'' -e '\''s%/\*\*/#.*%%'\'' < Makefile.in > junk.c;
  eval `echo ${CPP} -I. -I${topsrcdir}/src ${CPPFLAGS} junk.c \>junk.cpp`;
  < junk.cpp							'\
'    sed -e '\''s/^#.*//'\''					'\
'	-e '\''s/^[ \f\t][ \f\t]*$//'\''			'\
'	-e '\''s/^ /	/'\'' 					'\
'	| sed -n -e '\''/^..*$/p'\''				'\
'	> Makefile.new;
    chmod 444 Makefile.new;
    mv -f Makefile.new Makefile;
    rm -f junk.c junk.cpp;
)'
eval `echo $lwlib_makefile_command`
if [ "${with_energize}" = "yes" ]; then
energize_makefile_command='echo "creating lwlib/energize/Makefile";
  topsrcdir='"${topsrcdir}"';
( cd ./lwlib/energize;
  rm -f junk.c;
  sed -e '\''s/^# Generated.*//'\'' -e '\''s%/\*\*/#.*%%'\'' < Makefile.in > junk.c;
  eval `echo ${CPP} -I. -I${topsrcdir}/src ${CPPFLAGS} junk.c \>junk.cpp`;
  < junk.cpp							'\
'    sed -e '\''s/^#.*//'\''					'\
'	-e '\''s/^[ \f\t][ \f\t]*$//'\''			'\
'	-e '\''s/^ /	/'\'' 					'\
'	| sed -n -e '\''/^..*$/p'\''				'\
'	> Makefile.new;
    chmod 444 Makefile.new;
    mv -f Makefile.new Makefile;
    rm -f junk.c junk.cpp;
)'
eval `echo $energize_makefile_command`
fi
# AC-OUTPUT has created `config.status' already.  We need to add the
# above commands to re-create `src/Makefile' and `lwlib/Makefile' and
# possibly `lwlib/energize/Makefile', and we need to insert them
# before the final "exit 0" which appears at the end of
# `config.status'.
<config.status sed -e 's/^exit 0$//' >config.new
echo $makefile_command >>config.new
echo $lwlib_makefile_command >>config.new
if [ "${with_energize}" = "yes" ]; then
  echo $energize_makefile_command >>config.new
fi
echo exit 0 >>config.new
mv -f config.new config.status
chmod +x config.status
# Don't let the fact that we just rewrote config.status make Makefile think
# that it is now newer.  We have just rewritten all of the Makefiles as well.
MFS="Makefile src/Makefile src/Makefile.in lib-src/Makefile"
for file in $MFS; do
   chmod a+w $file; touch $file; chmod 444 $file
done
exit 0
]
