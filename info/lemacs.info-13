This is Info file ../../info/lemacs.info, produced by Makeinfo-1.56
from the input file lemacs.texinfo.

   This file documents the GNU Emacs editor.

   Copyright (C) 1985, 1986, 1988 Richard M. Stallman.  Copyright (C)
1991, 1992, 1993, 1994 Lucid, Inc.

   Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

   Permission is granted to copy and distribute modified versions of
this manual under the conditions for verbatim copying, provided also
that the sections entitled "The GNU Manifesto", "Distribution" and "GNU
General Public License" are included exactly as in the original, and
provided that the entire resulting derived work is distributed under the
terms of a permission notice identical to this one.

   Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions, except that the sections entitled "The GNU Manifesto",
"Distribution" and "GNU General Public License" may be included in a
translation approved by the author instead of in the original English.


File: lemacs.info,  Node: Special Diary Entries,  Prev: Format of Diary File,  Up: Diary

Special Diary Entries
---------------------

   In addition to entries based on calendar dates, your diary file can
contain entries for regularly occurring events such as anniversaries.
These entries are based on expressions (sexps) that Emacs evaluates as
it scans the diary file.  Such an entry is indicated by `%%' at the
beginning (preceded by `&' for a nonmarking entry), followed by a sexp
in parentheses.  Calendar mode offers commands to make it easier to put
some of these special entries in your diary.

`i a'
     Add an anniversary diary entry for the selected date
     (`insert-anniversary-diary-entry').

`i b'
     Add a block diary entry for the current region
     (`insert-block-diary-entry').

`i c'
     Add a cyclic diary entry starting at the date
     (`insert-cyclic-diary-entry').

   If you want to make a diary entry that applies to the anniversary of
a specific date, move point to that date and use the `i a' command.
This displays the end of your diary file in another window and inserts
the anniversary description; you can then type the rest of the diary
entry.

   The effect of `i a' is to add a `diary-anniversary' sexp to your
diary file.  You can also add one manually, for instance:

     %%(diary-anniversary 10 31 1948) Arthur's birthday

This entry applies to October 31 in any year after 1948; `10 31 1948'
specifies the date.  (If you are using the European calendar style, the
month and day are interchanged.)  The reason this sexp requires a
beginning year is that advanced diary functions can use it to calculate
the number of elapsed years (*note Sexp Diary Entries::.).

   You can make a diary entry entry for a block of dates by setting the
mark at the date at one end of the block, moving point to the date at
the other end of the block, and using the `i b' command.  This command
causes the end of your diary file to be displayed in another window and
the block description to be inserted; you can then type the diary entry.

   Here is such a diary entry that applies to all dates from June 24,
1990 through July 10, 1990:

     %%(diary-block 6 24 1990 7 10 1990) Vacation

The `6 24 1990' indicates the starting date and the `7 10 1990'
indicates the stopping date.  (Again, if you are using the European
calendar style, the month and day are interchanged.)

   You can specify cyclic diary entries that repeat after a fixed
interval of days.  Move point to the starting date and use the `i c'
command.  After you specify the length of interval, this command
displays the end of your diary file in another window and inserts the
cyclic event description; you can then type the rest of the diary entry.

   The sexp corresponding to the `i c' command looks like:

     %%(diary-cyclic 50 3 1 1990) Renew medication

which applies to March 1, 1990 and every 50th day following; `3 1 1990'
specifies the starting date.  (If you are using the European calendar
style, the month and day are interchanged.)

   All three of the these commands make marking diary entries.  If you
want the diary entry to be nonmarking, give a numeric argument to the
command.  For example, `C-u i a' makes a nonmarking anniversary diary
entry.

   Marking sexp diary entries in the calendar is *extremely*
time-consuming, since every date visible in the calendar window must be
individually checked.  So it's a good idea to make sexp diary entries
nonmarking with `&'.

   One sophisticated kind of sexp, a floating diary entry, has no
corresponding command.  The floating diary entry specifies a
regularly-occurring event by offsets specified in days, weeks, and
months.  It is comparable to a crontab entry interpreted by the `cron'
utility on Unix systems.

   Here is a nonmarking, floating diary entry that applies to the last
Thursday in November:

     &%%(diary-float 11 4 -1) American Thanksgiving

The 11 specifies November (the eleventh month), the 4 specifies Thursday
(the fourth day of the week, where Sunday is numbered zero), and the -1
specifies "last" (1 would mean "first", 2 would mean "second", -2 would
mean "second-to-last", and so on).  The month can be a single month or
a list of months.  Thus you could change the 11 above to `'(1 2 3)' and
have the entry apply to the last Thursday of January, February, and
March.  If the month is `t', the entry applies to all months of the
year.

   The sexp feature of the diary allows you to specify diary entries
based on any Emacs Lisp expression.  You can use the library of built-in
functions or you can write your own functions.  The built-in functions
include the ones shown in this section, plus a few others (*note Sexp
Diary Entries::.).

   The generality of sexps lets you specify any diary entry that you can
describe algorithmically.  Suppose you get paid on the 21st of the month
if it is a weekday, and to the Friday before if the 21st is on a
weekend.  The diary entry

     &%%(let ((dayname (calendar-day-of-week date))
              (day (car (cdr date))))
           (or (and (= day 21) (memq dayname '(1 2 3 4 5)))
               (and (memq day '(19 20)) (= dayname 5)))
              ) Pay check deposited

to just those dates.  This example illustrates how the sexp can depend
on the variable `date'; this variable is a list (MONTH DAY YEAR) that
gives the Gregorian date for which the diary entries are being found.
If the value of the sexp is `t', the entry applies to that date.  If
the sexp evaluates to `nil', the entry does *not* apply to that date.


File: lemacs.info,  Node: Calendar Customization,  Prev: Diary,  Up: Calendar/Diary

Customizing the Calendar and Diary
----------------------------------

   There are many customizations that you can use to make the calendar
and diary suit your personal tastes.

* Menu:

* Calendar Customizing::   Defaults you can set.
* Holiday Customizing::    Defining your own holidays.
* Date Display Format::    Changing the format.
* Time Display Format::    Changing the format.
* Daylight Savings::       Changing the default.
* Diary Customizing::      Defaults you can set.
* Hebrew/Islamic Entries:: How to obtain them.
* Fancy Diary Display::    Enhancing the diary display, sorting entries.
* Included Diary Files::   Sharing a common diary file.
* Sexp Diary Entries::     Fancy things you can do.
* Appt Customizing::	   Customizing appointment reminders.


File: lemacs.info,  Node: Calendar Customizing,  Next: Holiday Customizing,  Up: Calendar Customization

Customizing the Calendar
........................

   If you set the variable `view-diary-entries-initially' to `t',
calling up the calendar automatically displays the diary entries for
the current date as well.  The diary dates appear only if the current
date is visible.  If you add both of the following lines to your
`.emacs' file:

     (setq view-diary-entries-initially t)
     (calendar)

they display both the calendar and diary windows whenever you start
Emacs.

   Similarly, if you set the variable
`view-calendar-holidays-initially' to `t', entering the calendar
automatically displays a list of holidays for the current three month
period.  The holiday list appears in a separate window.

   You can set the variable `mark-diary-entries-in-calendar' to `t' in
order to place a plus sign (`+') beside any dates with diary entries.
Whenever the calendar window is displayed or redisplayed, the diary
entries are automatically marked for holidays.

   Similarly, setting the variable `mark-holidays-in-calendar' to `t'
places an asterisk (`*') after all holiday dates visible in the
calendar window.

   There are many customizations that you can make with the hooks
provided.  For example, the variable `calendar-load-hook', whose
default value is `nil', is a normal hook run when the calendar package
is first loaded (before actually starting to display the calendar).

   The variable `initial-calendar-window-hook', whose default value is
`nil', is a normal hook run the first time the calendar window is
displayed.  The function is invoked only when you first enter Calendar
mode, not when you redisplay an existing Calendar window.  But if you
leave the calendar with the `q' command and reenter it, the hook runs
again.

   The variable `today-visible-calendar-hook', whose default value is
`nil', is a normal hook run after the calendar buffer has been prepared
with the calendar when the current date is visible in the window.  One
use of this hook is to replace today's date with asterisks; a function
`calendar-star-date' is included for this purpose.  In your `.emacs'
file, put:

     (setq today-visible-calendar-hook 'calendar-star-date)

Another standard hook function adds asterisks around the current date.
Here's how to use it:

     (setq today-visible-calendar-hook 'calendar-mark-today)

A corresponding variable, `today-invisible-calendar-hook', whose
default value is `nil', is a normal hook run after the calendar buffer
text has been prepared, if the current date is *not* visible in the
window.


File: lemacs.info,  Node: Holiday Customizing,  Next: Date Display Format,  Prev: Calendar Customizing,  Up: Calendar Customization

Customizing the Holidays
........................

   Emacs knows about holidays defined by entries on one of several
lists.  You can customize theses lists of holidays to your own needs,
adding holidays or deleting lists of holidays.  The lists of holidays
that Emacs uses are for general holidays (`general-holidays'), local
holidays (`local-holidays'), Christian holidays (`christian-holidays'),
Hebrew (Jewish) holidays (`hebrew-holidays'), Islamic (Moslem) holidays
(`islamic-holidays'), and other holidays (`other-holidays').

   The general holidays are, by default, holidays common throughout the
United States.  To eliminate these holidays, set `general-holidays' to
`nil'.

   There are no default local holidays (but sites may supply some).  You
can set the variable `local-holidays' to any list of holidays, as
described below.

   By default, Emacs does not consider all the holidays of these
religions, only those commonly found in secular calendars.  For a more
extensive collection of religious holidays, you can set any (or all) of
the variables `all-christian-calendar-holidays',
`all-hebrew-calendar-holidays', or `all-islamic-calendar-holidays' to
`t'.  If you want to eliminate the religious holidays, set any or all
of the corresponding variables `christian-holidays', `hebrew-holidays',
and `islamic-holidays' to `nil'.

   You can set the variable `other-holidays' to any list of holidays.
This list, normally empty, is intended for your use.

   Each of the lists (`general-holidays', `local-holidays',
`christian-holidays', `hebrew-holidays', `islamic-holidays', and
`other-holidays') is a list of "holiday forms", each holiday form
describing a holiday (or sometimes a list of holidays).  Holiday forms
may have the following formats:

`(holiday-fixed MONTH DAY STRING)'
     A fixed date on the Gregorian calendar.  MONTH and DAY are
     numbers, STRING is the name of the holiday.

`(holiday-float MONTH DAYNAME K STRING)'
     The Kth DAYNAME in MONTH on the Gregorian calendar (DAYNAME=0 for
     Sunday, and so on); negative K means count back from the end of
     the month.  STRING is the name of the holiday.

`(holiday-hebrew MONTH DAY STRING)'
     A fixed date on the Hebrew calendar.  MONTH and DAY are numbers,
     STRING is the name of the holiday.

`(holiday-islamic MONTH DAY STRING)'
     A fixed date on the Islamic calendar.  MONTH and DAY are numbers,
     STRING is the name of the holiday.

`(holiday-julian MONTH DAY STRING)'
     A fixed date on the Julian calendar.  MONTH and DAY are numbers,
     STRING is the name of the holiday.

`(holiday-sexp SEXP STRING)'
     SEXP is a Lisp expression that should use the variable `year' to
     compute the date of a holiday, or `nil' if the holiday doesn't
     happen this year.  The value represents the date as a list of the
     form `(MONTH DAY YEAR)'.  STRING is the name of the holiday.

`(if BOOLEAN HOLIDAY-FORM &optional HOLIDAY-FORM)'
     A choice between two holidays based on the value of BOOLEAN.

`(FUNCTION &optional ARGS)'
     Dates requiring special computation; ARGS, if any, are passed in a
     list to the function `calendar-holiday-function-FUNCTION'.

   For example, suppose you want to add Bastille Day, celebrated in
France on July 14.  You can do this by adding the following line to
your `.emacs' file:

     (setq other-holidays '((holiday-fixed 7 14 "Bastille Day")))

The holiday form `(holiday-fixed 7 14 "Bastille Day")' specifies the
fourteenth day of the seventh month (July).

   Many holidays occur on a specific day of the week, at a specific time
of month.  Here is a holiday form describing Hurricane Supplication Day,
celebrated in the Virgin Islands on the fourth Monday in August:

     (holiday-float 8 1 4 "Hurricane Supplication Day")

Here the 8 specifies August, the 1 specifies Monday (Sunday is 0,
Tuesday is 2, and so on), and the 4 specifies the fourth occurrence in
the month (1 specifies the first occurrence, 2 the second occurrence,
-1 the last occurrence, -2 the second-to-last occurrence, and so on).

   You can specify holidays that occur on fixed days of the Hebrew,
Islamic, and Julian calendars too.  For example,

     (setq other-holidays
           '((holiday-hebrew 10 2 "Last day of Hanukkah")
             (holiday-islamic 3 12 "Mohammed's Birthday")
             (holiday-julian 4 2 "Jefferson's Birthday")))

adds the last day of Hanukkah (since the Hebrew months are numbered with
1 starting from Nisan), the Islamic feast celebrating Mohammed's
birthday (since the Islamic months are numbered from 1 starting with
Muharram), and Thomas Jefferson's birthday, which is 2 April 1743 on the
Julian calendar.

   To include a holiday conditionally, use either the `if' or the
`sexp' form.  For example, American presidential elections occur on the
first Tuesday after the first Monday in November of years divisible by
4:

     (holiday-sexp (if (= 0 (% year 4))
                        (calendar-gregorian-from-absolute
                      (1+ (calendar-dayname-on-or-before
                            1 (+ 6 (calendar-absolute-from-gregorian
                                     (list 11 1 year))))))
                   "US Presidential Election"))

or

     (if (= 0 (% displayed-year 4))
         (fixed 11
                (extract-calendar-day
                  (calendar-gregorian-from-absolute
                    (1+ (calendar-dayname-on-or-before
                          1 (+ 6 (calendar-absolute-from-gregorian
                                   (list 11 1 displayed-year)))))))
                "US Presidential Election"))

   Some holidays just don't fit into any of these forms because special
calculations are involved in their determination.  In such cases you
must write a Lisp function to do the calculation.  To include eclipses
of the sun, for example, add `(eclipses)' to `other-holidays' and write
an Emacs Lisp function `eclipses' that returns a (possibly empty) list
of the relevant Gregorian dates among the range visible in the calendar
window, with descriptive strings, like this:

     (((6 27 1991) "Lunar Eclipse") ((7 11 1991) "Solar Eclipse") ... )


File: lemacs.info,  Node: Date Display Format,  Next: Time Display Format,  Prev: Holiday Customizing,  Up: Calendar Customization

Date Display Format
...................

   You can customize the manner of displaying dates in the diary, in
mode lines, and in messages by setting `calendar-date-display-form'.
This variable is a list of expressions that can involve the variables
`month', `day', and `year', all numbers in string form, and `monthname'
and `dayname', both alphabetic strings.  In the American style, the
default value of this list is as follows:

     ((if dayname (concat dayname ", ")) monthname " " day ", " year)

while in the European style this value is the default:

     ((if dayname (concat dayname ", ")) day " " monthname " " year)

   The ISO standard date representation is this:

     (year "-" month "-" day)

This specifies a typical American format:

     (month "/" day "/" (substring year -2))


File: lemacs.info,  Node: Time Display Format,  Next: Daylight Savings,  Prev: Date Display Format,  Up: Calendar Customization

Time Display Format
...................

   In the calendar, diary, and related buffers, Emacs displays times of
day in the conventional American style with the hours from 1 through 12,
minutes, and either `am' or `pm'.  If you prefer the "military"
(European) style of writing times--in which the hours go from 00 to
23--you can alter the variable `calendar-time-display-form'.  This
variable is a list of expressions that can involve the variables
`12-hours', `24-hours', and `minutes', all numbers in string form, and
`am-pm' and `time-zone', both alphabetic strings.  The default
definition of `calendar-time-display-form' is as follows:

     (12-hours ":" minutes am-pm
               (if time-zone " (") time-zone (if time-zone ")"))

   Setting `calendar-time-display-form' to

     (24-hours ":" minutes
               (if time-zone " (") time-zone (if time-zone ")"))

gives military-style times like `21:07 (UT)' if time zone names are
defined, and times like `21:07' if they are not.


File: lemacs.info,  Node: Daylight Savings,  Next: Diary Customizing,  Prev: Time Display Format,  Up: Calendar Customization

Daylight Savings Time
.....................

   Emacs understands the difference between standard time and daylight
savings time--the times given for sunrise, sunset, solstices,
equinoxes, and the phases of the moon take that into account.  The rules
for daylight savings time vary from place to place and have also varied
historically from year to year.  To do the job properly, Emacs needs to
know which rules to use.

   Some operating systems keep track of the rules that apply to the
place where you are; on these systems, Emacs gets the information it
needs from the system automatically.  If some or all of this
information is missing, Emacs fills in the gaps with the rules
currently used in Cambridge, Massachusetts.  If the default choice of
rules is not appropriate for your location, you can tell Emacs the
rules to use by setting certain variables.

   These variables are `calendar-daylight-savings-starts' and
`calendar-daylight-savings-ends'.  Their values should be Lisp
expressions that refer to the variable `year', and evaluate to the
Gregorian date on which daylight savings time starts or (respectively)
ends, in the form of a list `(MONTH DAY YEAR)'.  The values should be
`nil' if your area does not use daylight savings time.

   Emacs uses these expressions to determine the starting date of
daylight savings time for the holiday list and for correcting times of
day in the solar and lunar calculations.

   The values for Cambridge, Massachusetts are as follows:

     (calendar-nth-named-day 1 0 4 year)
     (calendar-nth-named-day -1 0 10 year)

i.e. the first 0th day (Sunday) of the fourth month (April) in the year
specified by `year', and the last Sunday of the tenth month (October)
of that year.  If daylight savings time were changed to start on
October 1, you would set `calendar-daylight-savings-starts' to this:

     (list 10 1 year)

   For a more complex example, suppose daylight savings time begins on
the first of Nisan on the Hebrew calendar.  You would set
`calendar-daylight-savings-starts' as follows:

     (calendar-gregorian-from-absolute
       (calendar-absolute-from-hebrew
         (list 1 1 (+ year 3760))))

because Nisan is the first month in the Hebrew calendar and the Hebrew
year differs from the Gregorian year by 3760 at Nisan.

   If there is no daylight savings time at your location, or if you want
all times in standard time, set `calendar-daylight-savings-starts' and
`calendar-daylight-savings-ends' to `nil'.

   This variable specifies the difference between daylight savings time
and standard time, measured in minutes.  The value for Cambridge is 60.

   These variables specify is the number of minutes after midnight
local time when the transition to and from daylight savings time should
occur.  For Cambridge, both variables' values are 120.


File: lemacs.info,  Node: Diary Customizing,  Next: Hebrew/Islamic Entries,  Prev: Daylight Savings,  Up: Calendar Customization

Customizing the Diary
.....................

   Ordinarily, the mode line of the diary buffer window indicates any
holidays that fall on the date of the diary entries.  The process of
checking for holidays can take several seconds, so including holiday
information delays the display of the diary buffer noticeably.  If you'd
prefer to have a faster display of the diary buffer but without the
holiday information, set the variable `holidays-in-diary-buffer' to
`nil'.

   The variable `number-of-diary-entries' controls the number of days
of diary entries to be displayed at one time.  It affects the initial
display when `view-diary-entries-initially' is `t', as well as the
command `M-x diary'.  For example, the default value is 1, which says
to display only the current day's diary entries.  If the value is 2,
both the current day's and the next day's entries are displayed.  The
value can also be a vector of seven elements: if the value is `[0 2 2 2
2 4 1]' then no diary entries appear on Sunday, the current date's and
the next day's diary entries appear Monday through Thursday, Friday
through Monday's entries appear on Friday, while on Saturday only that
day's entries appear.

   The variable `print-diary-entries-hook' is a normal hook run after
preparation of a temporary buffer containing just the diary entries
currently visible in the diary buffer.  (The other, irrelevant diary
entries are really absent from the temporary buffer; in the diary
buffer, they are merely hidden.)  The default value of this hook does
the printing with the command `lpr-buffer'.  If you want to use a
different command to do the printing, just change the value of this
hook.  Other uses might include, for example, rearranging the lines into
order by day and time.

   You can customize the form of dates in your diary file, if neither
the standard American nor European styles suits your needs, by setting
the variable `diary-date-forms'.  This variable is a list of forms of
dates recognized in the diary file.  Each form is a list of regular
expressions (*note Regexps::.) and the variables `month', `day',
`year', `monthname', and `dayname'.  The variable `monthname' matches
the name of the month, capitalized or not, or its three-letter
abbreviation, followed by a period or not; it matches `*'.  Similarly,
`dayname' matches the name of the day, capitalized or not, or its
three-letter abbreviation, followed by a period or not.  The variables
`month', `day', and `year' match those numerical values, preceded by
arbitrarily many zeros; they also match `*'.  The default value of
`diary-date-forms' in the American style is

     ((month "/" day "[^/0-9]")
      (month "/" day "/" year "[^0-9]")
      (monthname " *" day "[^,0-9]")
      (monthname " *" day ", *" year "[^0-9]")
      (dayname "\\W"))

Emacs matches of the diary entries with the date forms is done with the
standard syntax table from Fundamental mode (*note Syntax Tables:
(lispref)Syntax Tables.), but with the `*' changed so that it is a word
constituent.

   The forms on the list must be *mutually exclusive* and must not
match any portion of the diary entry itself, just the date.  If, to be
mutually exclusive, the pattern must match a portion of the diary entry
itself, the first element of the form *must* be `backup'.  This causes
the date recognizer to back up to the beginning of the current word of
the diary entry.  Even if you use `backup', the form must absolutely
not match more than a portion of the first word of the diary entry.
The default value of `diary-date-forms' in the European style is this
list:

     ((day "/" month "[^/0-9]")
      (day "/" month "/" year "[^0-9]")
      (backup day " *" monthname "\\W+\\<[^*0-9]")
      (day " *" monthname " *" year "[^0-9]")
      (dayname "\\W"))

Notice the use of `backup' in the middle form because part of the diary
entry must be matched to distinguish this form from the following one.


File: lemacs.info,  Node: Hebrew/Islamic Entries,  Next: Fancy Diary Display,  Prev: Diary Customizing,  Up: Calendar Customization

Hebrew- and Islamic-Date Diary Entries
......................................

   Your diary file can have entries based on Hebrew or Islamic dates, as
well as entries based on our usual Gregorian calendar.  However, because
the processing of such entries is time-consuming and most people don't
need them, you must customize the processing of your diary file to
specify that you want such entries recognized.  If you want Hebrew-date
diary entries, for example, you must include these lines in your
`.emacs' file:

     (setq nongregorian-diary-listing-hook 'list-hebrew-diary-entries)
     (setq nongregorian-diary-marking-hook 'mark-hebrew-diary-entries)

If you want Islamic-date entries, include these lines in your `.emacs'
file:

     (setq nongregorian-diary-listing-hook 'list-islamic-diary-entries)
     (setq nongregorian-diary-marking-hook 'mark-islamic-diary-entries)

If you want both Hebrew- and Islamic-date entries, include these lines:

     (setq nongregorian-diary-listing-hook
           '(list-hebrew-diary-entries list-islamic-diary-entries))
     (setq nongregorian-diary-marking-hook
           '(mark-hebrew-diary-entries mark-islamic-diary-entries))

   Hebrew- and Islamic-date diary entries have the same formats as
Gregorian-date diary entries, except that the date must be preceded with
an `H' for Hebrew dates and an `I' for Islamic dates.  Moreover,
because the Hebrew and Islamic month names are not uniquely specified
by the first three letters, you may not abbreviate them.  For example,
a diary entry for the Hebrew date Heshvan 25 could look like

     HHeshvan 25 Happy Hebrew birthday!

and would appear in the diary for any date that corresponds to Heshvan
25 on the Hebrew calendar.  Similarly, an Islamic-date diary entry
might be

     IDhu al-Qada 25 Happy Islamic birthday!

and would appear in the diary for any date that corresponds to Dhu
al-Qada 25 on the Islamic calendar.

   As with Gregorian-date diary entries, Hebrew- and Islamic-date
entries are nonmarking if they are preceded with an ampersand (`&').

   There are commands to help you in making Hebrew- and Islamic-date
entries to your diary:

`i h d'
     Add a diary entry for the Hebrew date corresponding to the
     selected date (`insert-hebrew-diary-entry').

`i h m'
     Add a diary entry for the day of the Hebrew month corresponding to
     the selected date (`insert-monthly-hebrew-diary-entry').

`i h y'
     Add a diary entry for the day of the Hebrew year corresponding to
     the selected date (`insert-yearly-hebrew-diary-entry').

`i i d'
     Add a diary entry for the Islamic date corresponding to the
     selected date (`insert-islamic-diary-entry').

`i i m'
     Add a diary entry for the day of the Islamic month corresponding
     to the selected date (`insert-monthly-islamic-diary-entry').

`i i y'
     Add a diary entry for the day of the Islamic year corresponding to
     the selected date (`insert-yearly-islamic-diary-entry').

   These commands work exactly like the corresponding commands for
ordinary diary entries: Move point to a date in the calendar window and
the above commands insert the Hebrew or Islamic date (corresponding to
the date indicated by point) at the end of your diary file and you can
then type the diary entry.  If you want the diary entry to be
nonmarking, give a numeric argument to the command.


File: lemacs.info,  Node: Fancy Diary Display,  Next: Included Diary Files,  Prev: Hebrew/Islamic Entries,  Up: Calendar Customization

Fancy Diary Display
...................

   Diary display works by preparing the diary buffer and then running
the hook `diary-display-hook'.  The default value of this hook hides
the irrelevant diary entries and then displays the buffer
(`simple-diary-display').  However, if you specify the hook as follows,

     (add-hook 'diary-display-hook 'fancy-diary-display)

then fancy mode displays diary entries and holidays by copying them into
a special buffer that exists only for display.  Copying provides an
opportunity to change the displayed text to make it prettier--for
example, to sort the entries by the dates they apply to.

   As with simple diary display, you can print a hard copy of the buffer
with `print-diary-entries'.  To print a hard copy of a day-by-day diary
for a week by positioning point on Sunday of that week, type `7 d' and
then do `M-x print-diary-entries'.  As usual, the inclusion of the
holidays slows down the display slightly; you can speed things up by
setting the variable `holidays-in-diary-buffer' to `nil'.

   Ordinarily, the fancy diary buffer does not show days for which
there are no diary entries, even if that day is a holiday.  If you want
such days to be shown in the fancy diary buffer, set the variable
`diary-list-include-blanks' to `t'.

   If you use the fancy diary display, you can use the normal hook
`list-diary-entries-hook' to sort each day's diary entries by their
time of day.  Add this line to your `.emacs' file:

     (add-hook 'list-diary-entries-hook 'sort-diary-entries)

For each day, this sorts diary entries that begin with a recognizable
time of day according to their times.  Diary entries without times come
first within each day.


File: lemacs.info,  Node: Included Diary Files,  Next: Sexp Diary Entries,  Prev: Fancy Diary Display,  Up: Calendar Customization

Included Diary Files
....................

   If you use the fancy diary display, you can have diary entries from
other files included with your own by an "include" mechanism.  This
facility makes possible the sharing of common diary files among groups
of users.  Lines in the diary file of this form:

     #include "FILENAME"

includes the diary entries from the file FILENAME in the fancy diary
buffer (because the ordinary diary buffer is just the buffer associated
with your diary file, you cannot use the include mechanism unless you
use the fancy diary buffer).  The include mechanism is recursive, by
the way, so that included files can include other files, and so on; you
must be careful not to have a cycle of inclusions, of course.  To
enable the include facility, add lines as follows to your `.emacs' file:

     (add-hook 'list-diary-entries-hook 'include-other-diary-files)
     (add-hook 'mark-diary-entries-hook 'mark-included-diary-files)


File: lemacs.info,  Node: Sexp Diary Entries,  Next: Appt Customizing,  Prev: Included Diary Files,  Up: Calendar Customization

Sexp Entries and the Fancy Diary Display
........................................

   Sexp diary entries allow you to do more than just have complicated
conditions under which a diary entry applies.  If you use the fancy
diary display, sexp entries can generate the text of the entry depending
on the date itself.  For example, an anniversary diary entry can insert
the number of years since the anniversary date into the text of the
diary entry.  Thus the `%d' in this dairy entry:

     %%(diary-anniversary 10 31 1948) Arthur's birthday (%d years old)

gets replaced by the age, so on October 31, 1990 the entry appears in
the fancy diary buffer like this:

     Arthur's birthday (42 years old)

If the diary file instead contains this entry:

     %%(diary-anniversary 10 31 1948) Arthur's %d%s birthday

the entry in the fancy diary buffer for October 31, 1990 appears like
this:

     Arthur's 42nd birthday

   Similarly, cyclic diary entries can interpolate the number of
repetitions that have occurred:

     %%(diary-cyclic 50 1 1 1990) Renew medication (%d%s time)

looks like this:

     Renew medication (5th time)

in the fancy diary display on September 8, 1990.

   The generality of sexp diary entries lets you specify any diary entry
that you can describe algorithmically.  Suppose you get paid on the 21st
of the month if it is a weekday, and to the Friday before if the 21st is
on a weekend.  The diary entry

     &%%(let ((dayname (calendar-day-of-week date))
              (day (car (cdr date))))
           (or (and (= day 21) (memq dayname '(1 2 3 4 5)))
               (and (memq day '(19 20)) (= dayname 5)))
              ) Pay check deposited

applies to just those dates.  This example illustrates how the sexp can
depend on the variable `date'; this variable is a list (MONTH DAY YEAR)
that gives the Gregorian date for which the diary entries are being
found.  If the value of the expression is `t', the entry applies to
that date.  If the expression evaluates to `nil', the entry does *not*
apply to that date.

   The following sexp diary entries take advantage of the ability (in
the fancy diary display) to concoct diary entries based on the date:

`%%(diary-sunrise-sunset)'
     Make a diary entry for the local times of today's sunrise and
     sunset.

`%%(diary-phases-of-moon)'
     Make a diary entry for the phases (quarters) of the moon.

`%%(diary-day-of-year)'
     Make a diary entry with today's day number in the current year and
     the number of days remaining in the current year.

`%%(diary-iso-date)'
     Make a diary entry with today's equivalent ISO commercial date.

`%%(diary-julian-date)'
     Make a diary entry with today's equivalent date on the Julian
     calendar.

`%%(diary-astro-day-number)'
     Make a diary entry with today's equivalent astronomical (Julian)
     day number.

`%%(diary-hebrew-date)'
     Make a diary entry with today's equivalent date on the Hebrew
     calendar.

`%%(diary-islamic-date)'
     Make a diary entry with today's equivalent date on the Islamic
     calendar.

`%%(diary-french-date)'
     Make a diary entry with today's equivalent date on the French
     Revolutionary calendar.

`%%(diary-mayan-date)'
     Make a diary entry with today's equivalent date on the Mayan
     calendar.

Thus including the diary entry

     &%%(diary-hebrew-date)

causes every day's diary display to contain the equivalent date on the
Hebrew calendar, if you are using the fancy diary display.  (With simple
diary display, the line `&%%(diary-hebrew-date)' appears in the diary
for any date, but does nothing particularly useful.)

   There are a number of other available sexp diary entries that are
important to those who follow the Hebrew calendar:

`%%(diary-rosh-hodesh)'
     Make a diary entry that tells the occurrence and ritual
     announcement of each new Hebrew month.

`%%(diary-parasha)'
     Make a Saturday diary entry that tells the weekly synagogue
     scripture reading.

`%%(diary-sabbath-candles)'
     Make a Friday diary entry that tells the *local time* of Sabbath
     candle lighting.

`%%(diary-omer)'
     Make a diary entry that gives the omer count, when appropriate.

`%%(diary-yahrzeit MONTH DAY YEAR) NAME'
     Make a diary entry marking the anniversary of a date of death.
     The date is the *Gregorian* (civil) date of death.  The diary
     entry appears on the proper Hebrew calendar anniversary and on the
     day before.  (In the European style, the order of the parameters
     is changed to DAY, MONTH, YEAR.)


File: lemacs.info,  Node: Appt Customizing,  Prev: Sexp Diary Entries,  Up: Calendar Customization

Customizing Appointment Reminders
.................................

   You can specify exactly how Emacs reminds you of an appointment and
how far in advance it begins doing so.  Here are the variables that you
can set:

`appt-message-warning-time'
     The time in minutes before an appointment that the reminder
     begins.  The default is 10 minutes.

`appt-audible'
     If this is `t' (the default), Emacs rings the terminal bell for
     appointment reminders.

`appt-visible'
     If this is `t' (the default), Emacs displays the appointment
     message in echo area.

`appt-display-mode-line'
     If this is `t' (the default), Emacs displays the number of minutes
     to the appointment on the mode line.

`appt-msg-window'
     If this is `t' (the default), Emacs displays the appointment
     message in another window.

`appt-display-duration'
     The number of seconds an appointment message is displayed.  The
     default is 5 seconds.


File: lemacs.info,  Node: Sorting,  Next: Shell,  Prev: Calendar/Diary,  Up: Top

Sorting Text
============

   Emacs provides several commands for sorting text in a buffer.  All
operate on the contents of the region (the text between point and the
mark).  They divide the text of the region into many "sort records",
identify a "sort key" for each record, and then reorder the records
using the order determined by the sort keys.  The records are ordered so
that their keys are in alphabetical order, or, for numerical sorting, in
numerical order.  In alphabetical sorting, all upper-case letters `A'
through `Z' come before lower-case `a', in accordance with the ASCII
character sequence.

   The sort commands differ in how they divide the text into sort
records and in which part of each record they use as the sort key.
Most of the commands make each line a separate sort record, but some
commands use paragraphs or pages as sort records.  Most of the sort
commands use each entire sort record as its own sort key, but some use
only a portion of the record as the sort key.

`M-x sort-lines'
     Divide the region into lines and sort by comparing the entire text
     of a line.  A prefix argument means sort in descending order.

`M-x sort-paragraphs'
     Divide the region into paragraphs and sort by comparing the entire
     text of a paragraph (except for leading blank lines).  A prefix
     argument means sort in descending order.

`M-x sort-pages'
     Divide the region into pages and sort by comparing the entire text
     of a page (except for leading blank lines).  A prefix argument
     means sort in descending order.

`M-x sort-fields'
     Divide the region into lines and sort by comparing the contents of
     one field in each line.  Fields are defined as separated by
     whitespace, so the first run of consecutive non-whitespace
     characters in a line constitutes field 1, the second such run
     constitutes field 2, etc.

     You specify which field to sort by with a numeric argument: 1 to
     sort by field 1, etc.  A negative argument means sort in descending
     order.  Thus, minus 2 means sort by field 2 in reverse-alphabetical
     order.

`M-x sort-numeric-fields'
     Like `M-x sort-fields', except the specified field is converted to
     a number for each line and the numbers are compared.  `10' comes
     before `2' when considered as text, but after it when considered
     as a number.

`M-x sort-columns'
     Like `M-x sort-fields', except that the text within each line used
     for comparison comes from a fixed range of columns.  An explanation
     is given below.

   For example, if the buffer contains:

     On systems where clash detection (locking of files being edited) is
     implemented, Emacs also checks the first time you modify a buffer
     whether the file has changed on disk since it was last visited or
     saved.  If it has, you are asked to confirm that you want to change
     the buffer.

then if you apply `M-x sort-lines' to the entire buffer you get:

     On systems where clash detection (locking of files being edited) is
     implemented, Emacs also checks the first time you modify a buffer
     saved.  If it has, you are asked to confirm that you want to change
     the buffer.
     whether the file has changed on disk since it was last visited or

where the upper case `O' comes before all lower case letters.  If you
apply instead `C-u 2 M-x sort-fields' you get:

     implemented, Emacs also checks the first time you modify a buffer
     saved.  If it has, you are asked to confirm that you want to change
     the buffer.
     On systems where clash detection (locking of files being edited) is
     whether the file has changed on disk since it was last visited or

where the sort keys were `Emacs', `If', `buffer', `systems', and `the'.

   `M-x sort-columns' requires more explanation.  You specify the
columns by putting point at one of the columns and the mark at the other
column.  Because this means you cannot put point or the mark at the
beginning of the first line to sort, this command uses an unusual
definition of `region': all of the line point is in is considered part
of the region, and so is all of the line the mark is in.

   For example, to sort a table by information found in columns 10 to
15, you could put the mark on column 10 in the first line of the table,
and point on column 15 in the last line of the table, and then use this
command.  Or you could put the mark on column 15 in the first line and
point on column 10 in the last line.

   This can be thought of as sorting the rectangle specified by point
and the mark, except that the text on each line to the left or right of
the rectangle moves along with the text inside the rectangle.  *Note
Rectangles::.


File: lemacs.info,  Node: Shell,  Next: Narrowing,  Prev: Sorting,  Up: Top

Running Shell Commands from Emacs
=================================

   Emacs has commands for passing single command lines to inferior shell
processes; it can also run a shell interactively with input and output
to an Emacs buffer `*shell*'.

`M-!'
     Run a specified shell command line and display the output
     (`shell-command').

`M-|'
     Run a specified shell command line with region contents as input;
     optionally replace the region with the output
     (`shell-command-on-region').

`M-x shell'
     Run a subshell with input and output through an Emacs buffer.  You
     can then give commands interactively.

* Menu:

* Single Shell::         How to run one shell command and return.
* Interactive Shell::    Permanent shell taking input via Emacs.
* Shell Mode::           Special Emacs commands used with permanent shell.


File: lemacs.info,  Node: Single Shell,  Next: Interactive Shell,  Prev: Shell,  Up: Shell

Single Shell Commands
---------------------

   `M-!' (`shell-command') reads a line of text using the minibuffer
and creates an inferior shell to execute the line as a command.
Standard input from the command comes from the null device.  If the
shell command produces any output, the output goes to an Emacs buffer
named `*Shell Command Output*', which is displayed in another window
but not selected.  A numeric argument, as in `M-1 M-!', directs this
command to insert any output into the current buffer.  In that case,
point is left before the output and the mark is set after the output.

   `M-|' (`shell-command-on-region') is like `M-!' but passes the
contents of the region as input to the shell command, instead of no
input.  If a numeric argument is used to direct  output to the current
buffer, then the old region is deleted first and the output replaces it
as the contents of the region.

   Both `M-!' and `M-|' use `shell-file-name' to specify the shell to
use.  This variable is initialized based on your `SHELL' environment
variable when you start Emacs.  If the file name does not specify a
directory, the directories in the list `exec-path' are searched; this
list is initialized based on the `PATH' environment variable when you
start Emacs.  You can override either or both of these default
initializations in your `.emacs' file.

   When you use `M-!' and `M-|', Emacs has to wait until the shell
command completes.  You can quit with `C-g'; that terminates the shell
command.


File: lemacs.info,  Node: Interactive Shell,  Next: Shell Mode,  Prev: Single Shell,  Up: Shell

Interactive Inferior Shell
--------------------------

   To run a subshell interactively with its typescript in an Emacs
buffer, use `M-x shell'.  This creates (or reuses) a buffer named
`*shell*' and runs a subshell with input coming from and output going
to that buffer.  That is to say, any "terminal output" from the subshell
will go into the buffer, advancing point, and any "terminal input" for
the subshell comes from text in the buffer.  To give input to the
subshell, go to the end of the buffer and type the input, terminated by
RET.

   Emacs does not wait for the subshell to do anything.  You can switch
windows or buffers and edit them while the shell is waiting, or while
it is running a command.  Output from the subshell waits until Emacs
has time to process it; this happens whenever Emacs is waiting for
keyboard input or for time to elapse.

   To get multiple subshells, change the name of buffer `*shell*' to
something different by using `M-x rename-buffer'.  The next use of `M-x
shell' creates a new buffer `*shell*' with its own subshell.  By
renaming this buffer as well you can create a third one, and so on.
All the subshells run independently and in parallel.

   The file name used to load the subshell is the value of the variable
`explicit-shell-file-name', if that is non-`nil'.  Otherwise, the
environment variable `ESHELL' is used, or the environment variable
`SHELL' if there is no `ESHELL'.  If the file name specified is
relative, the directories in the list `exec-path' are searched (*note
Single Shell Commands: Single Shell.).

   As soon as the subshell is started, it is sent as input the contents
of the file `~/.emacs_SHELLNAME', if that file exists, where SHELLNAME
is the name of the file that the shell was loaded from.  For example,
if you use `csh', the file sent to it is `~/.emacs_csh'.

   `cd', `pushd', and `popd' commands given to the inferior shell are
watched by Emacs so it can keep the `*shell*' buffer's default
directory the same as the shell's working directory.  These commands
are recognized syntactically by examining lines of input that are sent.
If you use aliases for these commands, you can tell Emacs to recognize
them also.  For example, if the value of the variable
`shell-pushd-regexp' matches the beginning of a shell command line,
that line is regarded as a `pushd' command.  Change this variable when
you add aliases for `pushd'.  Likewise, `shell-popd-regexp' and
`shell-cd-regexp' are used to recognize commands with the meaning of
`popd' and `cd'.

   `M-x shell-resync-dirs' queries the shell and resynchronizes Emacs'
idea of what the current directory stack is.  `M-x
shell-dirtrack-toggle' turns directory tracking on and off.

   Emacs keeps a history of the most recent commands you have typed in
the `*shell*' buffer.  If you are at the beginning of a shell command
line and type M-p, the previous shell input is inserted into the buffer
before point.  Immediately typing M-p again deletes that input and
inserts the one before it.  By repeating M-p you can move backward
through your commands until you find one you want to repeat.  You may
then edit the command before typing RET if you wish. M-n moves forward
through the command history, in case you moved backward past the one
you wanted while using M-p.  If you type the first few characters of a
previous command and then type M-p, the most recent shell input
starting with those characters is inserted.  This can be very
convenient when you are repeating a sequence of shell commands.  The
variable `input-ring-size' controls how many commands are saved in your
input history.  The default is 30.

