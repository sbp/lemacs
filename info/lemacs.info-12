This is Info file ../../info/lemacs.info, produced by Makeinfo-1.56
from the input file lemacs.texinfo.

   This file documents the GNU Emacs editor.

   Copyright (C) 1985, 1986, 1988 Richard M. Stallman.  Copyright (C)
1991, 1992, 1993, 1994 Lucid, Inc.

   Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

   Permission is granted to copy and distribute modified versions of
this manual under the conditions for verbatim copying, provided also
that the sections entitled "The GNU Manifesto", "Distribution" and "GNU
General Public License" are included exactly as in the original, and
provided that the entire resulting derived work is distributed under the
terms of a permission notice identical to this one.

   Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions, except that the sections entitled "The GNU Manifesto",
"Distribution" and "GNU General Public License" may be included in a
translation approved by the author instead of in the original English.


File: lemacs.info,  Node: Rmail Make Summary,  Next: Rmail Summary Edit,  Prev: Rmail Summary,  Up: Rmail Summary

Making Summaries
----------------

   Here are the commands to create a summary for the current Rmail file.
Summaries do not update automatically; to make an updated summary, you
must use one of the commands again.

`h'
`C-M-h'
     Summarize all messages (`rmail-summary').

`l LABELS RET'
`C-M-l LABELS RET'
     Summarize message that have one or more of the specified labels
     (`rmail-summary-by-labels').

`C-M-r RCPTS RET'
     Summarize messages that have one or more of the specified
     recipients (`rmail-summary-by-recipients').

   The `h' or `C-M-h' (`rmail-summary') command fills the summary
buffer for the current Rmail file with a summary of all the messages in
the file.  It then displays and selects the summary buffer in another
window.

   The `l' or `C-M-l LABELS RET' (`rmail-summary-by-labels') makes a
partial summary mentioning only the messages that have one or more of
the labels LABELS.  LABELS should contain label names separated by
commas.

   `C-M-r RCPTS RET' (`rmail-summary-by-recipients') makes a partial
summary mentioning only the messages that have one or more of the
recipients RCPTS.  RCPTS should contain mailing addresses separated by
commas.

   Note that there is only one summary buffer for any Rmail file;
making one kind of summary discards any previously made summary.


File: lemacs.info,  Node: Rmail Summary Edit,  Prev: Rmail Make Summary,  Up: Rmail Summary

Editing in Summaries
--------------------

   Summary buffers are given the major mode Rmail Summary mode, which
provides the following special commands:

`j'
     Select the message described by the line that point is on
     (`rmail-summary-goto-msg').

`C-n'
     Move to next line and select its message in Rmail
     (`rmail-summary-next-all').

`C-p'
     Move to previous line and select its message (`rmail-summary-
     previous-all').

`n'
     Move to next line, skipping lines saying `deleted', and select its
     message (`rmail-summary-next-msg').

`p'
     Move to previous line, skipping lines saying `deleted', and select
     its message (`rmail-summary-previous-msg').

`d'
     Delete the current line's message, then do like `n'
     (`rmail-summary-delete-forward').

`u'
     Undelete and select this message or the previous deleted message in
     the summary (`rmail-summary-undelete').

`SPC'
     Scroll the other window (presumably Rmail) forward
     (`rmail-summary-scroll-msg-up').

`DEL'
     Scroll the other window backward (`rmail-summary-scroll-msg-down').

`x'
     Kill the summary window (`rmail-summary-exit').

`q'
     Exit Rmail (`rmail-summary-quit').

   The keys `C-n'(`rmail-summary-next-all') and `C-p'
(`rmail-summary-previous-all') are modified in Rmail Summary mode.  In
addition to moving point in the summary buffer, they also cause the
line's message to become current in the associated Rmail buffer.  That
buffer is also made visible in another window if it is not currently
visible.

   `n' and `p' are similar to `C-n' and `C-p', but skip lines that say
`message deleted'.  They are like the `n' and `p' keys of Rmail itself.
Note, however, that in a partial summary these commands move only
among the message listed in the summary.

   The other Emacs cursor motion commands are not changed in Rmail
Summary mode, so it is easy to get the point on a line whose message is
not selected in Rmail.  This can also happen if you switch to the Rmail
window and switch messages there.  To get the Rmail buffer back in sync
with the summary, use the `j' (`rmail-summary-goto-msg') command, which
selects the message of the current summary line in Rmail.

   Deletion and undeletion can also be done from the summary buffer.
They always work based on where point is located in the summary buffer,
ignoring which message is selected in Rmail.  `d'
(`rmail-summary-delete-forward') deletes the current line's message,
then moves to the next line whose message is not deleted and selects
that message.  The inverse is `u' (`rmail-summary-undelete'), which
moves back (if necessary) to a line whose message is deleted, undeletes
that message, and selects it in Rmail.

   When moving through messages with the summary buffer, it is
convenient to be able to scroll the message while remaining in the
summary window.  The commands SPC (`rmail-summary-scroll-msg-up') and
DEL (`rmail-summary-scroll-msg-down') do this.  They scroll the message
just as they do when the Rmail buffer is selected.

   When you are finished using the summary, type `x'
(`rmail-summary-exit') to kill the summary buffer's window.

   You can also exit Rmail while in the summary.  `q'
(`rmail-summary-quit') kills the summary window, then saves the Rmail
file and switches to another buffer.


File: lemacs.info,  Node: Rmail Reply,  Next: Rmail Editing,  Prev: Rmail Summary,  Up: Rmail

Sending Replies
===============

   Rmail has several commands that use Mail mode to send mail.  *Note
Sending Mail::, for information on using Mail mode.  Only the special
commands of Rmail for entering Mail mode are documented here.  Note
that the usual keys for sending mail, `C-x m' and `C-x 4 m', are
available in Rmail mode and work just as they usually do.

`m'
     Send a message (`rmail-mail').

`c'
     Continue editing already started outgoing message
     (`rmail-continue').

`r'
     Send a reply to the current Rmail message (`rmail-reply').

`f'
     Forward current message to other users (`rmail-forward').

   To reply to a the message you are reading in Rmail, type `r'
(`rmail-reply').  This displays the `*mail*' buffer in another window,
much like `C-x 4 m', but pre-initializes the `Subject', `To', `CC', and
`In-reply-to' header fields based on the message you reply to.  The
`To' field is given the sender of that message, and the `CC' gets all
the recipients of that message.  Recipients that match elements of the
list `rmail-dont-reply-to' are omitted; by default, this list contains
your own mailing address.

   Once you have initialized the `*mail*' buffer this way, sending the
mail goes as usual (*note Sending Mail::.).  You can edit the
presupplied header fields if they are not what you want.

   One additional Mail mode command is available when you invoke mail
from Rmail: `C-c C-y' (`mail-yank-original') inserts into the outgoing
message a copy of the current Rmail message.  Normally this is the
message you are replying to, but you can also switch to the Rmail
buffer, select a different message, switch back, and yank the new
current message.  Normally the yanked message is indented four spaces
and has most header fields deleted from it; an argument to `C-c C-y'
specifies the amount to indent.  `C-u C-c C-y' neither indents the
message nor deletes any header fields.

   Another frequent reason to send mail in Rmail is to forward the
current message to other users.  `f' (`rmail-forward') makes this easy
by preinitializing the `*mail*' buffer with the current message as the
text and a subject designating a forwarded message.  All you have to do
is fill in the recipients and send.

   You can use the `m' (`rmail-mail') command to start editing an
outgoing message that is not a reply.  It leaves the header fields
empty.  Its only difference from `C-x 4 m' is that it makes the Rmail
buffer accessible for `C-c y', just as `r' does.  Thus `m' can be used
to reply to or forward a message; it can do anything `r' or `f' can do.

   The `c' (`rmail-continue') command resumes editing the `*mail*'
buffer, to finish editing an outgoing message you were already
composing, or to alter a message you have sent.


File: lemacs.info,  Node: Rmail Editing,  Next: Rmail Digest,  Prev: Rmail Reply,  Up: Rmail

Editing Within a Message
========================

   Rmail mode provides a few special commands for moving within and
editing the current message.  In addition, the usual Emacs commands are
available (except for a few, such as `C-M-n' and `C-M-h', that are
redefined by Rmail for other purposes).  However, the Rmail buffer is
normally read-only, and to alter it you must use the Rmail command `w'
described below.

`t'
     Toggle display of original headers (`rmail-toggle-headers').

`w'
     Edit current message (`rmail-edit-current-message').

   Rmail reformats the header of each message before displaying it.
Normally this involves deleting most header fields, on the grounds that
they are not interesting.  The variable `rmail-ignored-headers' should
contain a regexp that matches the header fields to discard in this way.
The original headers are saved permanently; to see what they look
like, use the `t' (`rmail-toggle-headers') command.  This discards the
reformatted headers of the current message and displays it with the
original headers.  Repeating `t' reformats the message again.
Selecting the message again also reformats.

   The Rmail buffer is normally read-only, and most of the characters
you would type to modify it (including most letters) are redefined as
Rmail commands.  This is usually not a problem since people rarely want
to change the text of a message.  When you do want to do this, type `w'
(`rmail-edit-current-message'), which changes from Rmail mode to Rmail
Edit mode, another major mode which is nearly the same as Text mode.
The mode line indicates this change.

   In Rmail Edit mode, letters insert themselves as usual and the Rmail
commands are not available.  When you are finished editing the message
and are ready to go back to Rmail, type `C-c C-c', which switches back
to Rmail mode.  To return to Rmail mode but cancel all the editing you
have done, type `C-c C-]'.

   Entering Rmail Edit mode calls the value of the variable
`text-mode-hook' with no arguments, if that value exists and is not
`nil'.  It then does the same with the variable `rmail-edit-mode-hook'
and finally adds the attribute `edited' to the message.


File: lemacs.info,  Node: Rmail Digest,  Prev: Rmail Editing,  Up: Rmail

Digest Messages
===============

   A "digest message" is a message which exists to contain and carry
several other messages.  Digests are used on moderated mailing lists.
All messages that arrive for the list during a period of time, such as
one day, are put inside a single digest which is then sent to the
subscribers.  Transmitting the single digest uses much less computer
time than transmitting the individual messages even though the total
size is the same, because the per-message overhead in network mail
transmission is considerable.

   When you receive a digest message, the most convenient way to read
it is to "undigestify" it: to turn it back into many individual
messages.  You can then read and delete the individual messages as it
suits you.

   To undigestify a message, select it and then type `M-x
undigestify-rmail-message'.  This copies each submessage as a separate
Rmail message and inserts them all following the digest.  The digest
message itself is flagged as deleted.


File: lemacs.info,  Node: Calendar/Diary,  Next: Sorting,  Prev: Rmail,  Up: Top

Calendar Mode and the Diary
===========================

   Emacs provides the functions of a desk calendar, with a diary of past
or planned events.  Display the calendar by typing `M-x calendar'.
This command creates a window containing a three-month calendar centered
on the current month, with point on the current date.  Or, provide a
prefix argument by typing `C-u M-x calendar'; then you are prompted for
the month and year to be the center of the three-month calendar.  In
either case, you are now in Calendar mode.

   Calendar mode makes it easy to look at the holidays or diary entries
associated with various dates, and to change the diary entries.  You
can move freely between the Calendar window and other windows.  To exit
the calendar, type `q'.

* Menu:

* Calendar Motion::        Moving through the calendar; selecting a date.
* Scroll Calendar::        Bringing earlier or later months onto the screen.
* Mark and Region::        Remembering dates, the mark ring.
* General Calendar::       Conveniences for moving about.
* Holidays::               Displaying dates of holidays.
* Sunrise/Sunset::         Displaying local times of sunrise and sunset.
* Lunar Phases::           Displaying phases of the moon.
* Other Calendars::        Converting dates to other calendar systems.
* Diary::                  Displaying events from your diary.
* Calendar Customization:: Altering the behavior of the features above.


File: lemacs.info,  Node: Calendar Motion,  Next: Scroll Calendar,  Prev: Calendar/Diary,  Up: Calendar/Diary

Movement in the Calendar
------------------------

   Calendar mode lets you move in logical units of time such as days,
weeks, months, and years.  Sometimes you need to move to a specific date
in order to enter commands affecting its display or the associated diary
entries.  If you move outside the three months originally displayed, the
calendar display scrolls automatically through time.

* Menu:

* Calendar Unit Motion::       Moving by days, weeks, months, and years.
* Move to Beginning or End::   Moving to start/end of weeks, months, and years.
* Specified Dates::            Moving to the current date or another specific date.


File: lemacs.info,  Node: Calendar Unit Motion,  Next: Move to Beginning or End,  Prev: Calendar Motion,  Up: Calendar Motion

Motion by Integral Days, Weeks, Months, Years
.............................................

   The commands for movement in the calendar buffer parallel the
commands for movement in text.  You can move forward and backward by
days, weeks, months, and years.

`C-f'
     Move point one day forward (`calendar-forward-day').

`C-b'
     Move point one day backward (`calendar-backward-day').

`C-n'
     Move point one week forward (`calendar-forward-week').

`C-p'
     Move point one week backward (`calendar-backward-week').

`M-}'
     Move point one month forward (`calendar-forward-month').

`M-{'
     Move point one month backward (`calendar-backward-month').

`C-x ]'
     Move point one year forward (`calendar-forward-year').

`C-x ['
     Move point one year backward (`calendar-forward-year').

   The day and week commands are natural analogues of the usual Emacs
commands for moving by characters and by lines.  Just as `C-n' usually
moves to the same column in the following line, in Calendar mode it
moves to the same day in the following week.  And `C-p' moves to the
same day in the previous week.

   The commands for motion by months and years work like those for
weeks, but move a larger distance.  The month commands `M-}' and `M-{'
move forward or backward by an entire month's time.  The year commands
`C-x ]' and `C-x [' move forward or backward a whole year.

   The easiest way to remember these commands is to consider months and
years analogous to paragraphs and pages of text, respectively.  But the
commands themselves are not quite analogous.  The ordinary Emacs
paragraph commands move to the beginning or end of a paragraph, whereas
these month and year commands move by an entire month or an entire
year, which usually involves skipping across the end of a month or year.

   Each of these commands accepts a numeric argument as a repeat count.
For convenience, the digit keys and the minus sign are bound in
Calendar mode so that it is unnecessary to type the `M-' prefix.  For
example, `100 C-f' moves point 100 days forward from its present
location.


File: lemacs.info,  Node: Move to Beginning or End,  Next: Specified Dates,  Prev: Calendar Unit Motion,  Up: Calendar Motion

Beginning or End of Week, Month or Year
.......................................

   A week (or month, or year) is not just a quantity of days; we think
of new weeks (months, years) as starting on particular days.  So
Calendar mode provides commands to move to the beginning or end of the
week, month or year:

`C-a'
     Move point to beginning of week (`calendar-beginning-of-week').

`C-e'
     Move point to end of week (`calendar-end-of-week').

`M-a'
     Move point to beginning of month (`calendar-beginning-of-month').

`M-e'
     Move point to end of month (`calendar-end-of-month').

`M-<'
     Move point to beginning of year (`calendar-beginning-of-year').

`M->'
     Move point to end of year (`calendar-end-of-year').

   These commands also take numeric arguments as repeat counts, with the
repeat count indicating how many weeks, months, or years to move
backward or forward.


File: lemacs.info,  Node: Specified Dates,  Prev: Move to Beginning or End,  Up: Calendar Motion

Particular Dates
................

   Calendar mode provides some commands for getting to a particular date
quickly.

`g d'
     Move point to specified date (`calendar-goto-date').

`o'
     Center calendar around specified month (`calendar-other-month').

`.'
     Move point to today's date (`calendar-current-month').

   `g d' (`calendar-goto-date') prompts for a year, a month, and a day
of the month, and then goes to that date.  Because the calendar
includes all dates from the beginning of the current era, you must type
the year in its entirety; that is, type `1990', not `90'.

   `o' (`calendar-other-month') prompts for a month and year, then
centers the three-month calendar around that month.

   You can return to the current date with `.'
(`calendar-current-month').


File: lemacs.info,  Node: Scroll Calendar,  Next: Mark and Region,  Prev: Calendar Motion,  Up: Calendar/Diary

Scrolling the Calendar through Time
-----------------------------------

   The calendar display scrolls automatically through time when you
move out of the visible portion.  You can also scroll it manually.
Imagine that the calendar window contains a long strip of paper with
the months on it.  Scrolling it means moving the strip so that new
months become visible in the window.

`C-x <'
     Scroll calendar one month forward (`scroll-calendar-left').

`C-x >'
     Scroll calendar one month backward (`scroll-calendar-right').

`C-v'
     Scroll calendar three months forward
     (`scroll-calendar-left-three-months').

`M-v'
     Scroll calendar three months backward
     (`scroll-calendar-right-three-months').

   The most basic calendar scroll commands scroll by one month at a
time.  This means that there are two months of overlap between the
display before the command and the display after.  `C-x <' scrolls the
calendar contents one month to the left; that is, it moves the display
forward in time.  `C-x >' scrolls the contents to the right, which
moves backwards in time.

   The commands `C-v' and `M-v' scroll the calendar by an entire
"screenful"--three months--in analogy with the usual meaning of these
commands.  `C-v' makes later dates visible and `M-v' makes earlier
dates visible.  These commands also take a numeric argument as a repeat
count; in particular, since `C-u' (`universal-argument') multiplies the
next command by four, typing `C-u C-v' scrolls the calendar forward by
a year and typing `C-u M-v' scrolls the calendar backward by a year.

   Any of the special Calendar mode commands scrolls the calendar
automatically as necessary to ensure that the date you have moved to is
visible.


File: lemacs.info,  Node: Mark and Region,  Next: General Calendar,  Prev: Scroll Calendar,  Up: Calendar/Diary

The Mark and the Region
-----------------------

   The concept of the mark applies to the calendar just as to any other
buffer, but it marks a *date*, not a *position* in the buffer.  The
region consists of the days between the mark and point (including the
starting and stopping dates).

`C-SPC'
     Set the mark to today's date (`calendar-set-mark').

`C-@'
     The same.

`C-x C-x'
     Interchange mark and point (`calendar-exchange-point-and-mark').

`M-='
     Display the number of days in the current region
     (`calendar-count-days-region').

   You set the mark in the calendar, as in any other buffer, by using
`C-@' or `C-SPC' (`calendar-set-mark').  You return to the marked date
with the command `C-x C-x' (`calendar-exchange-point-and-mark') which
puts the mark where point was and point where mark was.  The calendar
is scrolled as necessary, if the marked date was not visible on the
screen.  This does not change the extent of the region.

   To determine the number of days in the region, type `M-='
(`calendar-count-days-region').  The numbers of days printed is
*inclusive*, that is, includes the days specified by mark and point.

   The main use of the mark in the calendar is to remember dates that
you may want to go back to.  To make this feature more useful, the mark
ring (*note Mark Ring::.) operates exactly as in other buffers:  Emacs
remembers 16 previous locations of the mark.  To return to a marked
date, type `C-u C-SPC' (or `C-u C-@'); this is the command
`calendar-set-mark' given a numeric argument.  It moves point to where
the mark was, restores the mark from the ring of former marks, and
stores the previous point at the end of the mark ring.  So, repeated
use of this command moves point through all the old marks on the ring,
one by one.


File: lemacs.info,  Node: General Calendar,  Next: Holidays,  Prev: Mark and Region,  Up: Calendar/Diary

Miscellaneous Calendar Commands
-------------------------------

`p d'
     Display day-in-year (`calendar-print-day-of-year').

`?'
     Briefly describe calendar commands (`describe-calendar-mode').

`SPC'
     Scroll the next window (`scroll-other-window').

`C-c C-l'
     Regenerate the calendar window (`redraw-calendar').

`q'
     Exit from calendar (`exit-calendar').

   If you want to know how many days have elapsed since the start of
the year, or the number of days remaining in the year, type the `p d'
command (`calendar-print-day-of-year').  This displays both of those
numbers in the echo area.

   To display a brief description of the calendar commands, type `?'
(`describe-calendar-mode').  For a fuller description, type `C-h m'.

   You can use `SPC' (`scroll-other-window') to scroll the other
window.  This is handy when you display a list of holidays or diary
entries in another window.

   If the calendar window gets corrupted, type `C-c C-l'
(`redraw-calendar') to redraw it.

   To exit from the calendar, type `q' (`exit-calendar').  This buries
all buffers related to the calendar and returns the window display to
what it was when you entered the calendar.


File: lemacs.info,  Node: Holidays,  Next: Sunrise/Sunset,  Prev: General Calendar,  Up: Calendar/Diary

Holidays
--------

   The Emacs calendar knows about all major and many minor holidays.

`h'
     Display holidays for the date indicated by point
     (`calendar-cursor-holidays').

`x'
     Mark holidays in the calendar window (`mark-calendar-holidays').

`u'
     Unmark calendar window (`calendar-unmark').

`a'
     List all holidays for the displayed three months in another window
     (`list-calendar-holidays').

`M-x holidays'
     List all holidays for three months around today's date in another
     window.

   To see if any holidays fall on a given date, position point on that
date in the calendar window and use the `h' command.  The holidays are
usually listed in the echo area, but if there are too many to fit in
one line, then they are displayed in a separate window.

   To find the distribution of holidays for a wider period, you can use
the `x' command.  This places a `*' next to every date on which a
holiday falls.  The command applies both to the currently visible dates
and to new dates that become visible by scrolling.  To turn marking off
and erase the current marks, type `u', which also erases any diary
marks (*note Diary::.).

   To get even more detailed information, use the `a' command, which
displays a separate buffer containing a list of all holidays in the
current three-month range.

   You can display the list of holidays for the current month and the
preceding and succeeding months even if you don't have a calendar
window.  Use the command `M-x holidays'.  If you want the list of
holidays centered around a different month, use `C-u M-x holidays' and
type the month and year.

   The holidays known to Emacs include American holidays and the major
Christian, Jewish, and Islamic holidays; when floating point is
available, Emacs also knows about solstices and equinoxes.  The dates
used by Emacs for holidays are based on *current practice*, not
historical fact.  Historically, for instance, the start of daylight
savings time and even its existence have varied from year to year.
However present American law mandates that daylight savings time begins
on the first Sunday in April; this is the definition that Emacs uses,
even though it is wrong for some prior years.


File: lemacs.info,  Node: Sunrise/Sunset,  Next: Lunar Phases,  Prev: Holidays,  Up: Calendar/Diary

Times of Sunrise and Sunset
---------------------------

   Emacs can tell you, to within a minute or two, the times of sunrise
and sunset for any date, if floating point is available.

`S'
     Display times of sunrise and sunset for the date indicated by point
     (`calendar-sunrise-sunset').

`M-x sunrise-sunset'
     Display times of sunrise and sunset for today's date.

   Move point to the date you want, and type `S', to display the *local
times* of sunrise and sunset in the echo area.

   You can display the times of sunrise and sunset for the current date
even if you don't have a calendar window.  Use the command `M-x
sunrise-sunset'.  If you want the times of sunrise and sunset for a
different date, use `C-u M-x sunrise-sunset' and type the year, month,
and day.

   Because the times of sunrise and sunset depend on the location on
earth, you need to tell Emacs your latitude, longitude, and location
name.  Here is an example of what to set:

     (setq calendar-latitude 40.1)
     (setq calendar-longitude -88.2)
     (setq calendar-location-name "Urbana, IL")

Use one decimal place in the values of `calendar-latitude' and
`calendar-longitude'.

   Your time zone also affects the local time of sunrise and sunset.
Emacs usually gets this information from the operating system, but if
these values are not what you want (or if the operating system does not
supply them), you'll need to set them yourself, like this:

     (setq calendar-time-zone -360)
     (setq calendar-standard-time-zone-name "CST")
     (setq calendar-daylight-time-zone-name "CDT")

The value of `calendar-time-zone' is the number of minutes difference
between your local standard time and Universal Time (Greenwich time).
The values of `calendar-standard-time-zone-name' and
`calendar-daylight-time-zone-name' are the abbreviations used in your
time zone.

   Emacs displays the times of sunrise and sunset *corrected for
daylight savings time* (this convenience is unusual; most tables of
sunrise and sunset use standard time).  The default rule for the
starting and stopping dates of daylight savings time is the American
rule.  *Note Daylight Savings::

   You can display the times of sunrise and sunset for any location and
any date with `C-u C-u M-x sunrise-sunset'.  Emacs asks you for a
longitude, latitude, number of minutes difference from Universal time,
and date, and then tells you the times of sunrise and sunset for that
location on that date.  The times are usually given in the echo area,
but if the message is too long fit in one line, they are displayed in a
separate window.


File: lemacs.info,  Node: Lunar Phases,  Next: Other Calendars,  Prev: Sunrise/Sunset,  Up: Calendar/Diary

Phases of the Moon
------------------

   Emacs can tell you the dates and times of the phases of the moon (new
moon, first quarter, full moon, last quarter), if floating point is
available.

`M'
     List, in another window, the dates and times for all the quarters
     of the moon for the three-month period shown in the calendar window
     (`calendar-phases-of-moon').

`M-x phases-of-moon'
     List dates and times of the quarters of the moon for three months
     around today's date in another window.

   Use the `M' command to display a separate buffer of the phases of
the moon for the current three-month range.  The dates and times listed
are accurate to within a few minutes.

   You can display the list of the phases of the moon for the current
month and the preceding and succeeding months even if you don't have a
calendar window.  Use the command `M-x phases-of-moon'.  If you want
the phases of the moon centered around a different month, use `C-u M-x
phases-of-moon' and type the month and year.

   The dates and times given for the phases of the moon are given in
local time (corrected for daylight savings, when appropriate); but if
the variable `calendar-time-zone' is void, Universal Time (the
Greenwich time zone) is used.  *Note Daylight Savings::


File: lemacs.info,  Node: Other Calendars,  Next: Diary,  Prev: Lunar Phases,  Up: Calendar/Diary

Our Calendar and Other Calendars
--------------------------------

   The Emacs calendar displayed is *always* the Gregorian calendar,
sometimes called the "new style" calendar, which is used in most of the
world today.  However, this calendar did not exist before the sixteenth
century and was not widely used before the eighteenth century; it did
not fully displace the Julian calendar and gain universal acceptance
until the early twentieth century.  This poses a problem for the Emacs
calendar: you can ask for the calendar of any month starting with
January, year 1 of the current era, but the calendar displayed is the
Gregorian, even for a date at which the Gregorian calendar did not
exist!

   Emacs knows about several different calendars, though, not just the
Gregorian calendar.  The following commands describe the date indicated
by point in various calendar notations:

`p c'
     Display ISO commercial calendar equivalent for selected day
     (`calendar-print-iso-date').

`p j'
     Display Julian date for selected day
     (`calendar-print-julian-date').

`p a'
     Display astronomical (Julian) day number for selected day
     (`calendar-print-astro-day-number').

`p h'
     Display Hebrew date for selected day
     (`calendar-print-hebrew-date').

`p i'
     Display Islamic date for selected day
     (`calendar-print-islamic-date').

`p f'
     Display French Revolutionary date for selected day
     (`calendar-print-french-date').

`p m'
     Display Mayan date for selected day (`calendar-print-mayan-date').

   If you are interested in these calendars, you can convert dates one
at a time.  Put point on the desired date of the Gregorian calendar and
press the appropriate keys.  The `p' is a mnemonic for "print" since
Emacs "prints' the equivalent date in the echo area.

   The ISO commercial calendar is used largely in Europe.

   The Julian calendar, named after Julius Caesar, was the one used in
Europe throughout medieval times, and in many countries up until the
nineteenth century.

   Astronomers use a simple counting of days elapsed since noon, Monday,
January 1, 4713 B.C. on the Julian calendar.  The number of days elapsed
is called the *Julian day number* or the *Astronomical day number*.

   The Hebrew calendar is the one used to determine the dates of Jewish
holidays.  Hebrew calendar dates begin and end at sunset.

   The Islamic (Moslem) calendar is the one used to determine the dates
of Moslem holidays.  There is no universal agreement in the Islamic
world about the calendar; Emacs uses a widely accepted version, but the
precise dates of Islamic holidays often depend on proclamation by
religious authorities, not on calculations.  As a consequence, the
actual dates of occurrence can vary slightly from the dates computed by
Emacs.  Islamic calendar dates begin and end at sunset.

   The French Revolutionary calendar was created by the Jacobins after
the 1789 revolution, to represent a more secular and nature-based view
of the annual cycle, and to install a 10-day week in a rationalization
measure similar to the metric system.  The French government officially
abandoned this calendar at the end of 1805.

   The Maya of Central America used three separate, overlapping calendar
systems, the *long count*, the *tzolkin*, and the *haab*.  Emacs knows
about all three of these calendars.  Experts dispute the exact
correlation between the Mayan calendar and our calendar; Emacs uses the
Goodman-Martinez-Thompson correlation in its calculations.

   You can move to dates that you specify on the Commercial, Julian,
astronomical, Hebrew, Islamic, or French calendars:

`g c'
     Move point to a date specified by the ISO commercial calendar
     (`calendar-goto-iso-date').

`g j'
     Move point to a date specified by the Julian calendar
     (`calendar-goto-julian-date').

`g a'
     Move point to a date specified by astronomical (Julian) day number
     (`calendar-goto-astro-day-number').

`g h'
     Move point to a date specified by the Hebrew calendar
     (`calendar-goto-hebrew-date').

`g i'
     Move point to a date specified by the Islamic calendar
     (`calendar-goto-islamic-date').

`g f'
     Move point to a date specified by the French Revolutionary calendar
     (`calendar-goto-french-date').

   These commands ask you for a date on the other calendar, move point
to the Gregorian calendar date equivalent to that date, and display the
other calendar's date in the echo area.  Emacs uses strict completion
(*note Completion::.) whenever it asks you to type a month name, so you
don't have to worry about the spelling of Hebrew, Islamic, or French
names.

   One common question concerning the Hebrew calendar is the computation
of the anniversary of a date of death, called a "yahrzeit."  The Emacs
calendar includes a facility for such calculations.  If you are in the
calendar, the command `M-x list-yahrzeit-dates' asks you for a range of
years and then displays a list of the yahrzeit dates for those years
for the date given by point.  If you are not in the calendar, this
command first asks you for the date of death and the range of years,
and then displays the list of yahrzeit dates.

   Emacs also has many commands for movement on the Mayan calendars.

`g m l'
     Move point to a date specified by the Mayan long count calendar
     (`calendar-goto-mayan-long-count-date').

`g m p t'
     Move point to the previous occurrence of a date specified by the
     Mayan tzolkin calendar (`calendar-previous-tzolkin-date').

`g m n t'
     Move point to the next occurrence of a date specified by the Mayan
     tzolkin calendar (`calendar-next-tzolkin-date').

`g m p h'
     Move point to the previous occurrence of a date specified by the
     Mayan haab calendar (`calendar-previous-haab-date').

`g m n h'
     Move point to the next occurrence of a date specified by the Mayan
     haab calendar (`calendar-next-haab-date').

`g m p c'
     Move point to the previous occurrence of a date specified by the
     Mayan calendar round (`calendar-previous-calendar-round-date').

`g m n c'
     Move point to the next occurrence of a date specified by the Mayan
     calendar round (`calendar-next-calendar-round-date').

   To understand these commands, you need to understand the Mayan
calendars.  The long count is a counting of days with units

1 kin
     = 1  day

1 uinal
     = 20 kin

1 tun
     = 18 uinal

1 katun
     = 20 tun

1 baktun
     = 20 katun

Thus, the long count date 12.16.11.16.6 means 12 baktun, 16 katun, 11
tun, 16 uinal, and 6 kin.  The Emacs calendar can handle Mayan long
count dates as early as 7.17.18.13.1, but no earlier.  When you use the
`g m l' command, type the Mayan long count date with the baktun, katun,
tun, uinal, and kin separated by periods.

   The Mayan tzolkin calendar is a cycle of 260 days formed by a pair of
independent cycles of 13 and 20 days.  Like the haab cycle, this cycle
repeats endlessly, and you can go backward and forward to the previous
or next (respectively) point in the cycle.  When you type `g m p t',
Emacs asks you for a tzolkin date and moves point to the previous
occurrence of that date; type `g m n t' to go to the next occurrence.

   The Mayan haab calendar is a cycle of 365 days arranged as 18 months
of 20 days each, followed a 5-day monthless period.  Since this cycle
repeats endlessly, Emacs lets you go backward and forward to the
previous or next (respectively) point in the cycle.  Type `g m p h' to
go to the previous haab date; Emacs asks you for a haab date and moves
point to the previous occurrence of that date.  Similarly, type `g m n
h' to go to the next haab date.

   The Maya also used the combination of the tzolkin date and the haab
date.  This combination is a cycle of about 52 years called a *calendar
round*.  If you type `g m p c', Emacs asks you for both a haab and a
tzolkin date and then moves point to the previous occurrence of that
combination.  Use `g m p c' to move point to the next occurrence.
Emacs signals an error if the haab/tzolkin date you have typed cannot
occur.

   Emacs uses strict completion (*note Completion::.) whenever it asks
you to type a Mayan name, so you don't have to worry about spelling.


File: lemacs.info,  Node: Diary,  Next: Calendar Customization,  Prev: Other Calendars,  Up: Calendar/Diary

The Diary
---------

   Associated with the Emacs calendar is a diary that keeps track of
appointments or other events on a daily basis.  To use the diary
feature, you must first create a "diary file" containing a list of
events and their dates.  Then Emacs can automatically pick out and
display the events for today, for the immediate future, or for any
specified date.

   By default, Emacs expects your diary file to be named `~/diary'.  It
uses the same format as the `calendar' utility.  A sample `~/diary'
file is:

     12/22/1988 Twentieth wedding anniversary!!
     &1/1. Happy New Year!
     10/22 Ruth's birthday.
     * 21, *: Payday
     Tuesday--weekly meeting with grad students at 10am
              Supowit, Shen, Bitner, and Kapoor to attend.
     1/13/89 Friday the thirteenth!!
     &thu 4pm squash game with Lloyd.
     mar 16 Dad's birthday
     April 15, 1989 Income tax due.
     &* 15 time cards due.

   Although you probably will start by creating a diary manually, Emacs
provides a number of commands to let you view, add, and change diary
entries.  You can also share diary entries with other users (*note
Included Diary Files::.).

* Menu:

* Diary Commands::         Viewing diary entries and associated calendar dates.
* Format of Diary File::   Entering events in your diary.
* Special Diary Entries::  Anniversaries, blocks of dates, cyclic entries, etc.


File: lemacs.info,  Node: Diary Commands,  Next: Format of Diary File,  Prev: Diary,  Up: Diary

Commands Displaying Diary Entries
---------------------------------

   Once you have created a `~/diary' file, you can view it within
Calendar mode.  You can also view today's events independently of
Calendar mode.

`d'
     Display any diary entries for the selected date
     (`view-diary-entries').

`s'
     Display entire diary file (`show-all-diary-entries').

`m'
     Mark all visible dates that have diary entries
     (`mark-diary-entries').

`u'
     Unmark calendar window (`calendar-unmark').

`M-x print-diary-entries'
     Print a hard copy of the diary display as it appears.

`M-x diary'
     Display any diary entries for today's date.

   Displaying the diary entries with `d' shows in a separate window the
diary entries for the date indicated by point in the calendar window.
The mode line of the new window shows the date of the diary entries and
any holidays that fall on that date.

   If you specify a numeric argument with `d', then all the diary
entries for that many successive days are shown.  Thus, `2 d' displays
all the entries for the selected date and for the following day.

   To get a broader overview of which days are mentioned in the diary,
use the `m' command to mark those days in the calendar window.  The
marks appear next to the dates to which they apply.  The `m' command
affects the dates currently visible and, if you scroll the calendar,
newly visible dates as well.  The `u' command deletes all diary marks
(and all holiday marks too; *note Holidays::.), not only in the dates
currently visible, but dates that become visible when you scroll the
calendar.

   For more detailed information, use the `s' command, which displays
the entire diary file.

   Display of selected diary entries uses the selective display feature,
the same feature that Outline mode uses to show part of an outline
(*note Outline Mode::.).  This involves hiding the diary entries that
are not relevant, by changing the preceding newline into an ASCII
control-m (code 015).  The hidden lines are part of the buffer's text,
but they are invisible; they don't appear on the screen.  When you save
the diary file, the control-m characters are saved as newlines; thus,
the invisible lines become ordinary lines in the file.

   Because the diary buffer as you see it is an illusion, simply
printing the contents does not print what you see on your screen.  So
there is a special command to print a hard copy of the buffer *as it
appears*; this command is `M-x print-diary-entries'.  It sends the data
directly to the printer.  You can customize it like `lpr-region' (*note
Hardcopy::.).

   The command `M-x diary' displays the diary entries for the current
date, independently of the calendar display, and optionally for the next
few days as well; the variable `number-of-diary-entries' specifies how
many days to include (*note Customization::.).

   If you put in your `.emacs' file:

     (diary)

it automatically displays a window with the day's diary entries, when
you enter Emacs.  The mode line of the displayed window shows the date
and any holidays that fall on that date.


File: lemacs.info,  Node: Format of Diary File,  Next: Special Diary Entries,  Prev: Diary Commands,  Up: Diary

The Diary File
--------------

   Your "diary file" is a file that records events associated with
particular dates.  The name of the diary file is specified by the
variable `diary-file'; `~/diary' is the default.  You can use the same
file for the `calendar' utility program, since its formats are a subset
of the ones allowed by the Emacs Calendar.

   Each entry in the file describes one event and consists of one or
more lines.  It always begins with a date specification at the left
margin.  The rest of the entry is simply text to describe the event.
If the entry has more than one line, then the lines after the first
must begin with whitespace to indicate they continue a previous entry.

   Here are some sample diary entries, illustrating different ways of
formatting a date.  The examples all show dates in American order
(month, day, year), but Calendar mode offers (day, month, year)
ordering too.

     4/20/93  Switch-over to new tabulation system
     apr. 25  Start tabulating annual results
     4/30  Results for April are due
     */25  Monthly cycle finishes
     Friday  Don't leave without backing up files

   The first entry appears only once, on April 20, 1993.  The second and
third appear every year on the specified dates, and the fourth uses a
wildcard (asterisk) for the month, so it appears on the 25th of every
month.  The final entry appears every week on Friday.

   You can also use just numbers to express a date, as in `MONTH/DAY' or
`MONTH/DAY/YEAR'.  This must be followed by a nondigit.  In the date
itself, MONTH and DAY are numbers of one or two digits.  YEAR is a
number and may be abbreviated to the last two digits; that is, you can
use `11/12/1989' or `11/12/89'.

   A date may be "generic", or partially unspecified.  Then the entry
applies to all dates that match the specification.  If the date does
not contain a year, it is generic and applies to any year.
Alternatively, MONTH, DAY, or YEAR can be a `*'; this matches any
month, day, or year, respectively.  Thus, a diary entry `3/*/*' matches
any day in March of any year.

   Dates can also have the form `MONTHNAME DAY' or `MONTHNAME DAY,
YEAR', where the month's name can be spelled in full or abbreviated to
three characters (with or without a period).  Case is not significant.
If the date does not contain a year, it is generic and applies to any
year.  Also, MONTHNAME, DAY, or YEAR can be a `*' which matches any
month, day, or year, respectively.

   If you prefer the European style of writing dates--in which the day
comes before the month--type `M-x european-calendar' while in the
calendar, or set the variable `european-calendar-style' to `t' in your
`.emacs' file *before* the calendar or diary command.  This mode
interprets all dates in the diary in the European manner, and also uses
European style for displaying diary dates.  (Note that there is no
comma after the MONTHNAME in the European style.)

   To revert to the (default) American style of writing dates, type `M-x
american-calendar'.

   You can use the name of a day of the week as a generic date which
applies to any date falling on that day of the week.  You can abbreviate
the day of the week to three letters (with or without a period) or spell
it in full; it need not be capitalized.

   You can inhibit the marking of certain diary entries in the calendar
window; to do this, insert an ampersand (`&') at the beginning of the
entry, before the date.  This has no effect on display of the entry in
the diary window; it affects only marks on dates in the calendar
window.  Nonmarking entries are especially useful for generic entries
that would otherwise mark many different dates.

   Lines that do not begin with valid dates and do not continue a
preceding entry are ignored.

   If the first line of a diary entry consists only of the date or day
name with no following blanks or punctuation, then the diary window
display doesn't include that line; only the continuation lines appear.
For example:

     02/11/1989
           Bill B. visits Princeton today
           2pm Cognitive Studies Committee meeting
           2:30-5:30 Liz at Lawrenceville
           4:00pm Dentist appt
           7:30pm Dinner at George's
           8:00-10:00pm concert

appears in the diary window without the date line at the beginning.
This style of entry looks neater when you display just a single day's
entries, but can cause confusion if you ask for more than one day's
entries.

   You can edit the diary entries as they appear in the window, but it
is important to remember that the buffer displayed contains the *entire*
diary file, with portions of it concealed from view.  This means, for
instance, that the `C-f' (`forward-char') command can put point at what
appears to be the end of the line, but what is in reality the middle of
some concealed line.  *Be careful when editing the diary entries!*
Inserting additional lines or adding/deleting characters in the middle
of a visible line cannot cause problems.  Watch out for `C-e'
(`end-of-line'), however; it may put you at the end of a concealed line
far from where point appears to be!  Before editing the diary, it is
best to display the entire file with `s' (`show-all-diary-entries').

   While in the calendar, there are several commands to help you in
making entries to your diary.

`i d'
     Add a diary entry for the selected date (`insert-diary-entry').

`i w'
     Add a diary entry for the selected day of the week
     (`insert-weekly-diary-entry').

`i m'
     Add a diary entry for the selected day of the month
     (`insert-monthly-diary-entry').

`i y'
     Add a diary entry for the selected day of the year
     (`insert-yearly-diary-entry').

   You can make a diary entry for a specific date by moving point to
that date in the calendar window and using the `i d' command.  This
command displays the end of your diary file in another window and
inserts the date; you can then type the rest of the diary entry.

   If you want to make a diary entry that applies to a specific day of
the week, move point to that day of the week (any occurrence will do)
and use the `i w' command.  This displays the end of your diary file in
another window and inserts the day-of-week as a generic date; you can
then type the rest of the diary entry.

   You make a monthly diary entry in the same fashion.  Move point to
the day of the month, use the `i m' command, and type the diary entry.
Similarly, you make a yearly diary entry with the `i y' command.

   All of the above commands make marking diary entries.  If you want
the diary entry to be nonmarking, give a prefix argument to the
command.  For example, `C-u i w' makes a nonmarking, weekly diary entry.

   If you modify the diary, be sure to write the file before exiting
from the calendar.

