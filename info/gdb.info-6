This is Info file ./gdb.info, produced by Makeinfo-1.55 from the input
file gdb-all.texi.

START-INFO-DIR-ENTRY
* Gdb: (gdb).                   The GNU debugger.
END-INFO-DIR-ENTRY
   This file documents the GNU debugger GDB.

   This is Edition 4.06, October 1992, of `Debugging with GDB: the GNU
Source-Level Debugger' for GDB Version 4.7.

   Copyright (C) 1988, 1989, 1990, 1991, 1992 Free Software Foundation,
Inc.

   Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

   Permission is granted to copy and distribute modified versions of
this manual under the conditions for verbatim copying, provided also
that the section entitled "GNU General Public License" is included
exactly as in the original, and provided that the entire resulting
derived work is distributed under the terms of a permission notice
identical to this one.

   Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions, except that the section entitled "GNU General Public License"
may be included in a translation approved by the Free Software
Foundation instead of in the original English.


File: gdb.info,  Node: Hitachi H8/300 Remote,  Prev: ST2000 Remote,  Up: Remote

GDB and the Hitachi H8/300
--------------------------

   GDB needs to know these things to talk to your H8/300:

  1. that you want to use `target hms', the remote debugging interface
     for the H8/300 (this is the default when GDB is configured
     specifically for the H8/300);

  2. what serial device connects your host to your H8/300 (the first
     serial device available on your host is the default);


   GDB depends on an auxiliary terminate-and-stay-resident program
called `asynctsr' to communicate with the H8/300 development board
through a PC serial port.  You must also use the DOS `mode' command to
set up the serial port on the DOS side.

   The following sample session illustrates the steps needed to start a
program under GDB control on your H8/300.  The example uses a sample
H8/300 program called `t.x'.

   First hook up your H8/300 development board.  In this example, we
use a board attached to serial port `COM2'; if you use a different
serial port, substitute its name in the argument of the `mode' command.
When you call `asynctsr', the auxiliary comms program used by the
degugger, you give it just the numeric part of the serial port's name;
for example, `asyncstr 2' below runs `asyncstr' on `COM2'.

     (eg-C:\H8300\TEST) mode com2:9600,n,8,1,p
     
     Resident portion of MODE loaded
     
     COM2: 9600, n, 8, 1, p
     
     (eg-C:\H8300\TEST) asynctsr 2

     *Warning:* We have noticed a bug in PC-NFS that conflicts with
     `asynctsr'.  If you also run PC-NFS on your DOS host, you may need
     to disable it, or even boot without it, to use `asynctsr' to
     control your H8/300 board.

   Now that serial communications are set up, and the H8/300 is
connected, you can start up GDB.  Call `gdb' with the name of your
program as the argument.  `gdb' prompts you, as usual, with the prompt
`(gdb)'.  Use two special commands to begin your debugging session:
`target hms' to specify cross-debugging to the Hitachi board, and the
`load' command to download your program to the board.  `load' displays
the names of the program's sections, and a `*' for each 2K of data
downloaded.  (If you want to refresh GDB data on symbols or on the
executable file without downloading, use the GDB commands `file' or
`symbol-file'.  These commands, and `load' itself, are described in
*Note Commands to Specify Files: Files.)

     (eg-C:\H8300\TEST) gdb t.x
     GDB is free software and you are welcome to distribute copies
      of it under certain conditions; type "show copying" to see
      the conditions.
     There is absolutely no warranty for GDB; type "show warranty"
     for details.
     GDB 4.7, Copyright 1992 Free Software Foundation, Inc...
     (gdb) target hms
     Connected to remote H8/300 HMS system.
     (gdb) load t.x
     .text   : 0x8000 .. 0xabde ***********
     .data   : 0xabde .. 0xad30 *
     .stack  : 0xf000 .. 0xf014 *

   At this point, you're ready to run or debug your program.  From here
on, you can use all the usual GDB commands.  The `break' command sets
breakpoints; the `run' command starts your program; `print' or `x'
display data; the `continue' command resumes execution after stopping
at a breakpoint.  You can use the `help' command at any time to find
out more about GDB commands.

   Remember, however, that *operating system* facilities aren't
available on your H8/300; for example, if your program hangs, you can't
send an interrupt--but you can press the RESET switch!

   Use the RESET button on the H8/300 board
   * to interrupt your program (don't use `ctl-C' on the DOS host--it
     has no way to pass an interrupt signal to the H8/300); and

   * to return to the GDB command prompt after your program finishes
     normally.  The communications protocol provides no other way for
     GDB to detect program completion.

   In either case, GDB will see the effect of a RESET on the H8/300
board as a "normal exit" of your program.


File: gdb.info,  Node: Controlling GDB,  Next: Sequences,  Prev: Targets,  Up: Top

Controlling GDB
***************

   You can alter many aspects of GDB's interaction with you by using
the `set' command.  For commands controlling how GDB displays data,
*note Print Settings: Print Settings.; other settings are described
here.

* Menu:

* Prompt::                      Prompt
* Editing::                     Command Editing
* History::                     Command History
* Screen Size::                 Screen Size
* Numbers::                     Numbers
* Messages/Warnings::           Optional Warnings and Messages


File: gdb.info,  Node: Prompt,  Next: Editing,  Up: Controlling GDB

Prompt
======

   GDB indicates its readiness to read a command by printing a string
called the "prompt".  This string is normally `(gdb)'.  You can change
the prompt string with the `set prompt' command.  For instance, when
debugging GDB with GDB, it is useful to change the prompt in one of the
GDBs so that you can always tell which one you are talking to.

`set prompt NEWPROMPT'
     Directs GDB to use NEWPROMPT as its prompt string henceforth.

`show prompt'
     Prints a line of the form: `Gdb's prompt is: YOUR-PROMPT'


File: gdb.info,  Node: Editing,  Next: History,  Prev: Prompt,  Up: Controlling GDB

Command Editing
===============

   GDB reads its input commands via the "readline" interface.  This GNU
library provides consistent behavior for programs which provide a
command line interface to the user.  Advantages are `emacs'-style or
`vi'-style inline editing of commands, `csh'-like history substitution,
and a storage and recall of command history across debugging sessions.

   You may control the behavior of command line editing in GDB with the
command `set'.

`set editing'
`set editing on'
     Enable command line editing (enabled by default).

`set editing off'
     Disable command line editing.

`show editing'
     Show whether command line editing is enabled.


File: gdb.info,  Node: History,  Next: Screen Size,  Prev: Editing,  Up: Controlling GDB

Command History
===============

`set history filename FNAME'
     Set the name of the GDB command history file to FNAME.  This is
     the file from which GDB will read an initial command history list
     or to which it will write this list when it exits.  This list is
     accessed through history expansion or through the history command
     editing characters listed below.  This file defaults to the value
     of the environment variable `GDBHISTFILE', or to `./.gdb_history'
     if this variable is not set.

`set history save'
`set history save on'
     Record command history in a file, whose name may be specified with
     the `set history filename' command.  By default, this option is
     disabled.

`set history save off'
     Stop recording command history in a file.

`set history size SIZE'
     Set the number of commands which GDB will keep in its history list.
     This defaults to the value of the environment variable `HISTSIZE',
     or to 256 if this variable is not set.

   History expansion assigns special meaning to the character `!'.
Since `!' is also the logical not operator in C, history expansion is
off by default. If you decide to enable history expansion with the `set
history expansion on' command, you may sometimes need to follow `!'
(when it is used as logical not, in an expression) with a space or a
tab to prevent it from being expanded.  The readline history facilities
will not attempt substitution on the strings `!=' and `!(', even when
history expansion is enabled.

   The commands to control history expansion are:

`set history expansion on'
`set history expansion'
     Enable history expansion.  History expansion is off by default.

`set history expansion off'
     Disable history expansion.

     The readline code comes with more complete documentation of
     editing and history expansion features.  Users unfamiliar with
     `emacs' or `vi' may wish to read it.

`show history'
`show history filename'
`show history save'
`show history size'
`show history expansion'
     These commands display the state of the GDB history parameters.
     `show history' by itself displays all four states.

`show commands'
     Display the last ten commands in the command history.

`show commands N'
     Print ten commands centered on command number N.

`show commands +'
     Print ten commands just after the commands last printed.


File: gdb.info,  Node: Screen Size,  Next: Numbers,  Prev: History,  Up: Controlling GDB

Screen Size
===========

   Certain commands to GDB may produce large amounts of information
output to the screen.  To help you read all of it, GDB pauses and asks
you for input at the end of each page of output.  Type RET when you
want to continue the output.  GDB also uses the screen width setting to
determine when to wrap lines of output.  Depending on what is being
printed, it tries to break the line at a readable place, rather than
simply letting it overflow onto the following line.

   Normally GDB knows the size of the screen from the termcap data base
together with the value of the `TERM' environment variable and the
`stty rows' and `stty cols' settings. If this is not correct, you can
override it with the `set height' and `set width' commands:

`set height LPP'
`show height'
`set width CPL'
`show width'
     These `set' commands specify a screen height of LPP lines and a
     screen width of CPL characters.  The associated `show' commands
     display the current settings.

     If you specify a height of zero lines, GDB will not pause during
     output no matter how long the output is.  This is useful if output
     is to a file or to an editor buffer.


File: gdb.info,  Node: Numbers,  Next: Messages/Warnings,  Prev: Screen Size,  Up: Controlling GDB

Numbers
=======

   You can always enter numbers in octal, decimal, or hexadecimal in
GDB by the usual conventions: octal numbers begin with `0', decimal
numbers end with `.', and hexadecimal numbers begin with `0x'.  Numbers
that begin with none of these are, by default, entered in base 10;
likewise, the default display for numbers--when no particular format is
specified--is base 10.  You can change the default base for both input
and output with the `set radix' command.

`set radix BASE'
     Set the default base for numeric input and display.  Supported
     choices for BASE are decimal 2, 8, 10, 16.  BASE must itself be
     specified either unambiguously or using the current default radix;
     for example, any of

          set radix 1010
          set radix 012
          set radix 10.
          set radix 0xa

     will set the base to decimal.  On the other hand, `set radix 10'
     will leave the radix unchanged no matter what it was.

`show radix'
     Display the current default base for numeric input and display.


File: gdb.info,  Node: Messages/Warnings,  Prev: Numbers,  Up: Controlling GDB

Optional Warnings and Messages
==============================

   By default, GDB is silent about its inner workings.  If you are
running on a slow machine, you may want to use the `set verbose'
command.  It will make GDB tell you when it does a lengthy internal
operation, so you will not think it has crashed.

   Currently, the messages controlled by `set verbose' are those which
announce that the symbol table for a source file is being read; see
`symbol-file' in *Note Commands to Specify Files: Files.

`set verbose on'
     Enables GDB's output of certain informational messages.

`set verbose off'
     Disables GDB's output of certain informational messages.

`show verbose'
     Displays whether `set verbose' is on or off.

   By default, if GDB encounters bugs in the symbol table of an object
file, it is silent; but if you are debugging a compiler, you may find
this information useful (*note Errors Reading Symbol Files: Symbol
Errors.).

`set complaints LIMIT'
     Permits GDB to output LIMIT complaints about each type of unusual
     symbols before becoming silent about the problem.  Set LIMIT to
     zero to suppress all complaints; set it to a large number to
     prevent complaints from being suppressed.

`show complaints'
     Displays how many symbol complaints GDB is permitted to produce.

   By default, GDB is cautious, and asks what sometimes seems to be a
lot of stupid questions to confirm certain commands.  For example, if
you try to run a program which is already running:

     (gdb) run
     The program being debugged has been started already.
     Start it from the beginning? (y or n)

   If you are willing to unflinchingly face the consequences of your own
commands, you can disable this "feature":

`set confirm off'
     Disables confirmation requests.

`set confirm on'
     Enables confirmation requests (the default).

`show confirm'
     Displays state of confirmation requests.

   Some systems allow individual object files that make up your program
to be replaced without stopping and restarting your program.  For
example, in VxWorks you can simply recompile a defective object file
and keep on running.  If you are running on one of these systems, you
can allow GDB to reload the symbols for automatically relinked modules:

`set symbol-reloading on'
     Replace symbol definitions for the corresponding source file when
     an object file with a particular name is seen again.

`set symbol-reloading off'
     Do not replace symbol definitions when re-encountering object
     files of the same name.  This is the default state; if you are not
     running on a system that permits automatically relinking modules,
     you should leave `symbol-reloading' off, since otherwise GDB may
     discard symbols when linking large programs, that may contain
     several modules (from different directories or libraries) with the
     same name.

`show symbol-reloading'
     Show the current `on' or `off' setting.


File: gdb.info,  Node: Sequences,  Next: Emacs,  Prev: Controlling GDB,  Up: Top

Canned Sequences of Commands
****************************

   Aside from breakpoint commands (*note Breakpoint Command Lists:
Break Commands.), GDB provides two ways to store sequences of commands
for execution as a unit: user-defined commands and command files.

* Menu:

* Define::                      User-Defined Commands
* Hooks::			User-Defined Command Hooks
* Command Files::               Command Files
* Output::                      Commands for Controlled Output


File: gdb.info,  Node: Define,  Next: Hooks,  Up: Sequences

User-Defined Commands
=====================

   A "user-defined command" is a sequence of GDB commands to which you
assign a new name as a command.  This is done with the `define' command.

`define COMMANDNAME'
     Define a command named COMMANDNAME.  If there is already a command
     by that name, you are asked to confirm that you want to redefine
     it.

     The definition of the command is made up of other GDB command
     lines, which are given following the `define' command.  The end of
     these commands is marked by a line containing `end'.

`document COMMANDNAME'
     Give documentation to the user-defined command COMMANDNAME.  The
     command COMMANDNAME must already be defined.  This command reads
     lines of documentation just as `define' reads the lines of the
     command definition, ending with `end'.  After the `document'
     command is finished, `help' on command COMMANDNAME will print the
     documentation you have specified.

     You may use the `document' command again to change the
     documentation of a command.  Redefining the command with `define'
     does not change the documentation.

`help user-defined'
     List all user-defined commands, with the first line of the
     documentation (if any) for each.

`show user'
`show user COMMANDNAME'
     Display the GDB commands used to define COMMANDNAME (but not its
     documentation).  If no COMMANDNAME is given, display the
     definitions for all user-defined commands.

   User-defined commands do not take arguments.  When they are
executed, the commands of the definition are not printed.  An error in
any command stops execution of the user-defined command.

   Commands that would ask for confirmation if used interactively
proceed without asking when used inside a user-defined command.  Many
GDB commands that normally print messages to say what they are doing
omit the messages when used in a user-defined command.


File: gdb.info,  Node: Hooks,  Next: Command Files,  Prev: Define,  Up: Sequences

User-Defined Command Hooks
==========================

   You may define *hooks*, which are a special kind of user-defined
command.  Whenever you run the command `foo', if the user-defined
command `hook-foo' exists, it is executed (with no arguments) before
that command.

   In addition, a pseudo-command, `stop' exists.  Hooking this command
will cause your hook to be executed every time execution stops in the
inferior program, before breakpoint commands are run, displays are
printed, or the stack frame is printed.

   For example, to cause `SIGALRM' signals to be ignored while
single-stepping, but cause them to be resumed during normal execution,
you could do:

     define hook-stop
     handle SIGALRM nopass
     end
     
     define hook-run
     handle SIGALRM pass
     end
     
     define hook-continue
     handle SIGLARM pass
     end

   Any single-word command in GDB can be hooked.  Aliases for other
commands cannot be hooked (you should hook the basic command name, e.g.
`backtrace' rather than `bt').  If an error occurs during the execution
of your hook, execution of GDB commands stops and you are returned to
the GDB prompt (before the command that you actually typed had a chance
to run).

   If you try to define a hook which doesn't match any known command,
you will get a warning from the `define' command.


File: gdb.info,  Node: Command Files,  Next: Output,  Prev: Hooks,  Up: Sequences

Command Files
=============

   A command file for GDB is a file of lines that are GDB commands.
Comments (lines starting with `#') may also be included.  An empty line
in a command file does nothing; it does not mean to repeat the last
command, as it would from the terminal.

   When you start GDB, it automatically executes commands from its
"init files".  These are files named `.gdbinit'.  GDB reads the init
file (if any) in your home directory and then the init file (if any) in
the current working directory.  (The init files are not executed if you
use the `-nx' option; *note Choosing Modes: Mode Options..)  You can
also request the execution of a command file with the `source' command:

`source FILENAME'
     Execute the command file FILENAME.

   The lines in a command file are executed sequentially.  They are not
printed as they are executed.  An error in any command terminates
execution of the command file.

   Commands that would ask for confirmation if used interactively
proceed without asking when used in a command file.  Many GDB commands
that normally print messages to say what they are doing omit the
messages when called from command files.


File: gdb.info,  Node: Output,  Prev: Command Files,  Up: Sequences

Commands for Controlled Output
==============================

   During the execution of a command file or a user-defined command,
normal GDB output is suppressed; the only output that appears is what is
explicitly printed by the commands in the definition.  This section
describes three commands useful for generating exactly the output you
want.

`echo TEXT'
     Print TEXT.  Nonprinting characters can be included in TEXT using
     C escape sequences, such as `\n' to print a newline.  *No newline
     will be printed unless you specify one.* In addition to the
     standard C escape sequences, a backslash followed by a space
     stands for a space.  This is useful for outputting a string with
     spaces at the beginning or the end, since leading and trailing
     spaces are otherwise trimmed from all arguments.  To print ` and
     foo = ', use the command `echo \ and foo = \ '.

     A backslash at the end of TEXT can be used, as in C, to continue
     the command onto subsequent lines.  For example,

          echo This is some text\n\
          which is continued\n\
          onto several lines.\n

     produces the same output as

          echo This is some text\n
          echo which is continued\n
          echo onto several lines.\n

`output EXPRESSION'
     Print the value of EXPRESSION and nothing but that value: no
     newlines, no `$NN = '.  The value is not entered in the value
     history either.  *Note Expressions: Expressions, for more
     information on expressions.

`output/FMT EXPRESSION'
     Print the value of EXPRESSION in format FMT.  You can use the same
     formats as for `print'; *note Output formats::., for more
     information.

`printf STRING, EXPRESSIONS...'
     Print the values of the EXPRESSIONS under the control of STRING.
     The EXPRESSIONS are separated by commas and may be either numbers
     or pointers.  Their values are printed as specified by STRING,
     exactly as if your program were to execute

          printf (STRING, EXPRESSIONS...);

     For example, you can print two values in hex like this:

          printf "foo, bar-foo = 0x%x, 0x%x\n", foo, bar-foo

     The only backslash-escape sequences that you can use in the format
     string are the simple ones that consist of backslash followed by a
     letter.


File: gdb.info,  Node: Emacs,  Next: Energize,  Prev: Sequences,  Up: Top

Using GDB under GNU Emacs
*************************

   A special interface allows you to use GNU Emacs to view (and edit)
the source files for the program you are debugging with GDB.

   To use this interface, use the command `M-x gdb' in Emacs.  Give the
executable file you want to debug as an argument.  This command starts
GDB as a subprocess of Emacs, with input and output through a newly
created Emacs buffer.

   Using GDB under Emacs is just like using GDB normally except for two
things:

   * All "terminal" input and output goes through the Emacs buffer.

   This applies both to GDB commands and their output, and to the input
and output done by the program you are debugging.

   This is useful because it means that you can copy the text of
previous commands and input them again; you can even use parts of the
output in this way.

   All the facilities of Emacs' Shell mode are available for interacting
with your program.  In particular, you can send signals the usual
way--for example, `C-c C-c' for an interrupt, `C-c C-z' for a stop.

   * GDB displays source code through Emacs.

   Each time GDB displays a stack frame, Emacs automatically finds the
source file for that frame and puts an arrow (`=>') at the left margin
of the current line.  Emacs uses a separate buffer for source display,
and splits the window to show both your GDB session and the source.

   Explicit GDB `list' or search commands still produce output as
usual, but you probably will have no reason to use them.

     *Warning:* If the directory where your program resides is not your
     current directory, it can be easy to confuse Emacs about the
     location of the source files, in which case the auxiliary display
     buffer will not appear to show your source.  GDB can find programs
     by searching your environment's `PATH' variable, so the GDB input
     and output session will proceed normally; but Emacs does not get
     enough information back from GDB to locate the source files in
     this situation.  To avoid this problem, either start GDB mode from
     the directory where your program resides, or specify a full path
     name when prompted for the `M-x gdb' argument.

     A similar confusion can result if you use the GDB `file' command to
     switch to debugging a program in some other location, from an
     existing GDB buffer in Emacs.

   By default, `M-x gdb' calls the program called `gdb'.  If you need
to call GDB by a different name (for example, if you keep several
configurations around, with different names) you can set the Emacs
variable `gdb-command-name'; for example,

     (setq gdb-command-name "mygdb")

(preceded by `ESC ESC', or typed in the `*scratch*' buffer, or in your
`.emacs' file) will make Emacs call the program named "`mygdb'" instead.

   In the GDB I/O buffer, you can use these special Emacs commands in
addition to the standard Shell mode commands:

`C-h m'
     Describe the features of Emacs' GDB Mode.

`M-s'
     Execute to another source line, like the GDB `step' command; also
     update the display window to show the current file and location.

`M-n'
     Execute to next source line in this function, skipping all function
     calls, like the GDB `next' command.  Then update the display window
     to show the current file and location.

`M-i'
     Execute one instruction, like the GDB `stepi' command; update
     display window accordingly.

`M-x gdb-nexti'
     Execute to next instruction, using the GDB `nexti' command; update
     display window accordingly.

`C-c C-f'
     Execute until exit from the selected stack frame, like the GDB
     `finish' command.

`M-c'
     Continue execution of your program, like the GDB `continue'
     command.

     *Warning:* In Emacs v19, this command is `C-c C-p'.

`M-u'
     Go up the number of frames indicated by the numeric argument
     (*note Numeric Arguments: (emacs)Arguments.), like the GDB `up'
     command.

     *Warning:* In Emacs v19, this command is `C-c C-u'.

`M-d'
     Go down the number of frames indicated by the numeric argument,
     like the GDB `down' command.

     *Warning:* In Emacs v19, this command is `C-c C-d'.

`C-x &'
     Read the number where the cursor is positioned, and insert it at
     the end of the GDB I/O buffer.  For example, if you wish to
     disassemble code around an address that was displayed earlier,
     type `disassemble'; then move the cursor to the address display,
     and pick up the argument for `disassemble' by typing `C-x &'.

     You can customize this further on the fly by defining elements of
     the list `gdb-print-command'; once it is defined, you can format or
     otherwise process numbers picked up by `C-x &' before they are
     inserted.  A numeric argument to `C-x &' will both indicate that
     you wish special formatting, and act as an index to pick an
     element of the list.  If the list element is a string, the number
     to be inserted is formatted using the Emacs function `format';
     otherwise the number is passed as an argument to the corresponding
     list element.

   In any source file, the Emacs command `C-x SPC' (`gdb-break') tells
GDB to set a breakpoint on the source line point is on.

   If you accidentally delete the source-display buffer, an easy way to
get it back is to type the command `f' in the GDB buffer, to request a
frame display; when you run under Emacs, this will recreate the source
buffer if necessary to show you the context of the current frame.

   The source files displayed in Emacs are in ordinary Emacs buffers
which are visiting the source files in the usual way.  You can edit the
files with these buffers if you wish; but keep in mind that GDB
communicates with Emacs in terms of line numbers.  If you add or delete
lines from the text, the line numbers that GDB knows will cease to
correspond properly to the code.


File: gdb.info,  Node: Energize,  Next: Extensions,  Prev: Emacs,  Up: Top

Using GDB with Energize
***********************

   The Energize Programming System is an integrated development
environment that includes a point-and-click interface to many
programming tools.  When you use GDB in this environment, you can use
the standard Energize graphical interface to drive GDB; you can also,
if you choose, type GDB commands as usual in a debugging window.  Even
if you use the graphical interface, the debugging window (which uses
Emacs, and resembles the standard Emacs interface to GDB) displays the
equivalent commands, so that the history of your debugging session is
properly reflected.

   When Energize starts up a GDB session, it uses one of the
command-line options `-energize' or `-cadillac' ("cadillac" is the name
of the communications protocol used by the Energize system).  This
option makes GDB run as one of the tools in the Energize Tool Set: it
sends all output to the Energize kernel, and accept input from it as
well.

   See the user manual for the Energize Programming System for
information on how to use the Energize graphical interface and the other
development tools that Energize integrates with GDB.


File: gdb.info,  Node: Extensions,  Next: GDB Bugs,  Prev: Energize,  Up: Top

C++ Extensions from Lucid
*************************

   Lucid has added special extensions to GDB for debugging C++ code,
including support for:

   * Qualified names

   * Identifier demangling

   * Overloaded and member functions

   * Data member access inside a function member

   Lucid has also improved symbol table dynamics.

   To effectively use these extensions, debug programs compiled with the
Lucid compiler option `-g'. Consult "Debugging, Profiling, and Linking
Options" in Chapter 2 of the Lucid C++ Compiler Guide for a description
of `-g'.

* Menu:

* Special Conditions::  Special conditions while debugging C++ code.
* Qualified Names::     Using qualified identifiers with a class name.
* Constructors::        Defining constructor and destructor functions.
* Overloading::         How GDB handles overloaded functions.
* Demangling::          How GDB demangles output.
* Dynamic Type::	How to learn the dynamic type of a C++ instance.


File: gdb.info,  Node: Special Conditions,  Next: Qualified Names,  Up: Extensions

Special Conditions
==================

   This section describes special conditions you might encounter
debugging C++ code.

   * GDB evaluates expressions in debugging commands as C expressions,
     using C type rules and coercions. For example, print `a + b'
     evaluates the expression `a + b' as a C addition expression. For
     the C++ expression `a + b', if `a' is an inappropriate operand for
     the primitive operator `+', GDB generates an error, even if `a' is
     an instance of a C++ class that defines a member function
     `operator +()'.

   * You must explicitly pass the `this' argument when evaluating
     member functions. For example, assume the following class and
     instance are defined:

          class C {
                int i;
              public:
                int get_i (){
                 return i;
                }
             };
          C c;

     To evaluate `get_i' in GDB, use this command to explicitly pass
     the address of a C instance:

          (gdb) print C::get_i (&c)

   * To call a member function of a class, you must refer to it
     directly by qualified name. Prefix the function's name with the
     name of the class that defines the member function, followed by a
     double colon (::).  For example, assume `class D' is derived from
     `class C' and refines the member function `f':

          class C { virtual int f (); };
          class D : public C { virtual int f (); };

     To call `C::f' on the instance `c' of class C and `D::f' on the
     instance `d' of `class D', enter these commands:

          (gdb) print C::f(&c)
          (gdb) print D::f(&d)

   * GDB cannot handle coercions between a derived class and its
     non-left-most base classes. Using the preceding example, you can
     only call `C::f' with an instance of `class D' as an argument
     because class C is a left-most base class of `D':

          (gdb) print C::f(&d)

     Assume class D also has a non-left-most base `class B':

          class B { public: virtual int g (); };
          class C { public: virtual int f (); };
          class D : public C, public B {
          public:
          virtual int f ();
          virtual int g ();
          };

     In this case, you can still call `C::f' with an instance of `class
     D'. However, you must supply address arithmetic to call `B::g'
     with an instance of `D'.

   * Some GDB error messages remain C rather than C++ oriented, and may
     be misleading. When using C++ symbols or expressions, if you get an
     error message that seems inappropriate, consider what its meaning
     might be in C and then translate into the appropriate C++
     terminology.

   * Some C++ symbols will not be parsed correctly by the command line
     interpreter. In many such cases, enclosing the symbol in single
     quotes will allow GDB to recognize the C++ symbol. For example,
     breakpoints on constructors and destructors of class template
     instances are allowed without adding single quotes. In other words,

          (gdb) b vectorint::vectorint

     works, but

          (gdb) p vectorint::vectorint

     does not. However, by using single quotes as shown below, you can
     work around this restriction:

          (gdb) p 'vectorint::vectorint'

     In general, the areas most likely to cause problems for the GDB
     command line parser are template instances and nested types.


File: gdb.info,  Node: Qualified Names,  Next: Constructors,  Prev: Special Conditions,  Up: Extensions

Qualified Names
===============

   You can qualify identifiers with a class name in a GDB command.  This
method is particularly useful when you refer to static class members.
For example, assume the following class and instance are defined:

     class C1 {
        public:
           static int i;
           void set_i (int x) { C1::i = x; }
        };
     C1 c1;

   You can use the following GDB commands to first set `i' to `10' and
then verify the value of `i':

     (gdb) print C1::set_i(&c1, 10)
     (gdb) print C1::i
     $25=10


File: gdb.info,  Node: Constructors,  Next: Overloading,  Prev: Qualified Names,  Up: Extensions

Constructors, Destructors, and Operators
========================================

   In C++, a class can define constructor and destructor functions:

   * Use a constructor to allocate or initialize a class's instances.

   * Use a destructor to destroy or delete a class's instance.

   You can also overload operators as global or member functions by
referring to them in the expression part of a GDB command. You refer to
constructors, destructors, and member operators as they are defined:

   * class_name::class_name for a constructor.

   * class_name::~class_name for a destructor.

   * `::operator' op, `::operator'op, or ::op, for a global operator,
     where op is any operator decribed in section 13.4 of The Annotated
     C++ Reference Manual.

     Note that `operator' is not a reserved name in C++. You must
     include a double colon prefix (::) to force the C++
     interpretation. It is legal, particularly in standard C, to name
     functions, types, and variables `operator'.

   * `class_name::operator' op,`class_name::operator'op, class_name::op
     for C++ member function operators.

   * `class_name::operator' type for user-type conversion operators.

   As standard with any member function, you must explicitly supply the
`this' argument when you call a constructor, destructor, or member
operator.

   Consult the UNIX System V, AT&T C++ Language System, Release 2.1
Product Reference Manual: Select Code 307-160, AT&T 1989 for more
information on constructors, destructors, and operators.


File: gdb.info,  Node: Overloading,  Next: Demangling,  Prev: Constructors,  Up: Extensions

Overloaded Functions
====================

   C++ allows functions to be overloaded. Overloading allows more than
one function to share the same name as long these functions are
distinct in their argument types. GDB lets you to select a desired
function from the overloaded set. For example, assume the following
functions are defined:

     int add (int i1, int i2);
     int add (float f1, float f2);

   To set a break point on `int add (int i1, int i2);', simply enter
the command:

     (gdb) break add(int,int)

   You could also use the command:

     (gdb) break add

   GDB presents the set of overloads for `add':

     [0] cancel
     [1] add (int, int)
     [2] add (float, float)
     >

   You select the desired function by entering the corresponding index
following the > prompt:

     [0] cancel
     [1] add (int, int)
     [2] add (float, float)
     > 1
     breakpoint set 0x3456; add (int, int)

   To call the previous function `int add(int i1, int i2);' in order to
add `31' and `42' and see the result, enter the command:

     (gdb) print add(int,int) (31,42)
     73

   Note that the parameter list should be included to enable GDB to
resolve the overloading.

   GDB similarly handles overloaded member functions, except that it
qualifies each function name with its containing class's name.  For
example, assume the `add' functions in the previous example are member
functions of `class A'. In this case, the following GDB sequence
appears:

     (gdb) break A::add
     [0] cancel
     [1] A::add (int, int)
     [2] A::add (float, float)
     > 1
     breakpoint set 0x3456; A::add (int, int)

   Using the qualifier in the command `break A::add' restricts the set
of possible overloaded functions to the member functions of `class A'.

   GDB should only display the set of overloads, if any, associated with
the given function name.  Note, however, that GDB cannot distinguish
between valid overloads and other functions with the same name.


File: gdb.info,  Node: Demangling,  Next: Dynamic Type,  Prev: Overloading,  Up: Extensions

Output Demangling
=================

   The GDB extensions attempt to demangle all output; that is, it
changes most of the names the compiler mangles into their original
source form. In the following cases, GDB does not perform demangling
and instead uses the mangled form as output:

   * If the name is an enumerated constant defined in a class.

   * If the name is a member of a non-left-most base class. In this
     case, GDB prefixes the name with the path of the C struct
     generated around such members.  Note that a reference to any
     non-left-most member must include the name of the generated C
     struct.

   * If a `type-safe-link' name is longer than 1024 characters


File: gdb.info,  Node: Dynamic Type,  Prev: Demangling,  Up: Extensions

Finding Dynamic Type
====================

   You can learn the dynamic type of a C++ instance in GDB by performing
the following steps:

     Bpt 3, Interactor::Read(Event&) ()
     (gdb) x/a this->virtual
     0x41618 __vtbl__5DFace:  0x0
     N

   The name `__vtbl__5DFace' tells you that `this' is really type
`DFace'.


File: gdb.info,  Node: GDB Bugs,  Next: Renamed Commands,  Prev: Extensions,  Up: Top

Reporting Bugs in GDB
*********************

   Your bug reports play an essential role in making GDB reliable.

   Reporting a bug may help you by bringing a solution to your problem,
or it may not.  But in any case the principal function of a bug report
is to help the entire community by making the next version of GDB work
better.  Bug reports are your contribution to the maintenance of GDB.

   In order for a bug report to serve its purpose, you must include the
information that enables us to fix the bug.

* Menu:

* Bug Criteria::                Have You Found a Bug?
* Bug Reporting::               How to Report Bugs


File: gdb.info,  Node: Bug Criteria,  Next: Bug Reporting,  Up: GDB Bugs

Have You Found a Bug?
=====================

   If you are not sure whether you have found a bug, here are some
guidelines:

   * If the debugger gets a fatal signal, for any input whatever, that
     is a GDB bug.  Reliable debuggers never crash.

   * If GDB produces an error message for valid input, that is a bug.

   * If GDB does not produce an error message for invalid input, that
     is a bug.  However, you should note that your idea of "invalid
     input" might be our idea of "an extension" or "support for
     traditional practice".

   * If you are an experienced user of debugging tools, your suggestions
     for improvement of GDB are welcome in any case.


File: gdb.info,  Node: Bug Reporting,  Prev: Bug Criteria,  Up: GDB Bugs

How to Report Bugs
==================

   A number of companies and individuals offer support for GNU products.
If you obtained GDB from a support organization, we recommend you
contact that organization first.

   Contact information for many support companies and individuals is
available in the file `etc/SERVICE' in the GNU Emacs distribution.

   In any event, we also recommend that you send bug reports for GDB to
one of these addresses:

     bug-gdb@prep.ai.mit.edu
     {ucbvax|mit-eddie|uunet}!prep.ai.mit.edu!bug-gdb

   *Do not send bug reports to `info-gdb', or to `help-gdb', or to any
newsgroups.* Most users of GDB do not want to receive bug reports.
Those that do, have arranged to receive `bug-gdb'.

   The mailing list `bug-gdb' has a newsgroup `gnu.gdb.bug' which
serves as a repeater.  The mailing list and the newsgroup carry exactly
the same messages.  Often people think of posting bug reports to the
newsgroup instead of mailing them.  This appears to work, but it has one
problem which can be crucial: a newsgroup posting often lacks a mail
path back to the sender.  Thus, if we need to ask for more information,
we may be unable to reach you.  For this reason, it is better to send
bug reports to the mailing list.

   As a last resort, send bug reports on paper to:

     GNU Debugger Bugs
     Free Software Foundation
     545 Tech Square
     Cambridge, MA 02139

   The fundamental principle of reporting bugs usefully is this:
*report all the facts*.  If you are not sure whether to state a fact or
leave it out, state it!

   Often people omit facts because they think they know what causes the
problem and assume that some details do not matter.  Thus, you might
assume that the name of the variable you use in an example does not
matter.  Well, probably it does not, but one cannot be sure.  Perhaps
the bug is a stray memory reference which happens to fetch from the
location where that name is stored in memory; perhaps, if the name were
different, the contents of that location would fool the debugger into
doing the right thing despite the bug.  Play it safe and give a
specific, complete example.  That is the easiest thing for you to do,
and the most helpful.

   Keep in mind that the purpose of a bug report is to enable us to fix
the bug if it is new to us.  It is not as important as what happens if
the bug is already known.  Therefore, always write your bug reports on
the assumption that the bug has not been reported previously.

   Sometimes people give a few sketchy facts and ask, "Does this ring a
bell?"  Those bug reports are useless, and we urge everyone to *refuse
to respond to them* except to chide the sender to report bugs properly.

   To enable us to fix the bug, you should include all these things:

   * The version of GDB.  GDB announces it if you start with no
     arguments; you can also print it at any time using `show version'.

     Without this, we will not know whether there is any point in
     looking for the bug in the current version of GDB.

   * The type of machine you are using, and the operating system name
     and version number.

   * What compiler (and its version) was used to compile GDB--e.g.
     "gcc-2.0".

   * What compiler (and its version) was used to compile the program you
     are debugging--e.g.  "gcc-2.0".

   * The command arguments you gave the compiler to compile your
     example and observe the bug.  For example, did you use `-O'?  To
     guarantee you will not omit something important, list them all.  A
     copy of the Makefile (or the output from make) is sufficient.

     If we were to try to guess the arguments, we would probably guess
     wrong and then we might not encounter the bug.

   * A complete input script, and all necessary source files, that will
     reproduce the bug.

   * A description of what behavior you observe that you believe is
     incorrect.  For example, "It gets a fatal signal."

     Of course, if the bug is that GDB gets a fatal signal, then we will
     certainly notice it.  But if the bug is incorrect output, we might
     not notice unless it is glaringly wrong.  We are human, after all.
     You might as well not give us a chance to make a mistake.

     Even if the problem you experience is a fatal signal, you should
     still say so explicitly.  Suppose something strange is going on,
     such as, your copy of GDB is out of synch, or you have encountered
     a bug in the C library on your system.  (This has happened!)  Your
     copy might crash and ours would not.  If you told us to expect a
     crash, then when ours fails to crash, we would know that the bug
     was not happening for us.  If you had not told us to expect a
     crash, then we would not be able to draw any conclusion from our
     observations.

   * If you wish to suggest changes to the GDB source, send us context
     diffs.  If you even discuss something in the GDB source, refer to
     it by context, not by line number.

     The line numbers in our development sources will not match those
     in your sources.  Your line numbers would convey no useful
     information to us.

   Here are some things that are not necessary:

   * A description of the envelope of the bug.

     Often people who encounter a bug spend a lot of time investigating
     which changes to the input file will make the bug go away and which
     changes will not affect it.

     This is often time consuming and not very useful, because the way
     we will find the bug is by running a single example under the
     debugger with breakpoints, not by pure deduction from a series of
     examples.  We recommend that you save your time for something else.

     Of course, if you can find a simpler example to report *instead*
     of the original one, that is a convenience for us.  Errors in the
     output will be easier to spot, running under the debugger will take
     less time, etc.

     However, simplification is not vital; if you do not want to do
     this, report the bug anyway and send us the entire test case you
     used.

   * A patch for the bug.

     A patch for the bug does help us if it is a good one.  But do not
     omit the necessary information, such as the test case, on the
     assumption that a patch is all we need.  We might see problems
     with your patch and decide to fix the problem another way, or we
     might not understand it at all.

     Sometimes with a program as complicated as GDB it is very hard to
     construct an example that will make the program follow a certain
     path through the code.  If you do not send us the example, we will
     not be able to construct one, so we will not be able to verify
     that the bug is fixed.

     And if we cannot understand what bug you are trying to fix, or why
     your patch should be an improvement, we will not install it.  A
     test case will help us to understand.

   * A guess about what the bug is or what it depends on.

     Such guesses are usually wrong.  Even we cannot guess right about
     such things without first using the debugger to find the facts.


File: gdb.info,  Node: Renamed Commands,  Next: Formatting Documentation,  Prev: GDB Bugs,  Up: Top

Renamed Commands
****************

   The following commands were renamed in GDB 4, in order to make the
command set as a whole more consistent and easier to use and remember:

     OLD COMMAND               NEW COMMAND
     ---------------           -------------------------------
     add-syms                  add-symbol-file
     delete environment        unset environment
     info convenience          show convenience
     info copying              show copying
     info directories          show directories
     info editing              show commands
     info history              show values
     info targets              help target
     info values               show values
     info version              show version
     info warranty             show warranty
     set/show addressprint     set/show print address
     set/show array-max        set/show print elements
     set/show arrayprint       set/show print array
     set/show asm-demangle     set/show print asm-demangle
     set/show caution          set/show confirm
     set/show demangle         set/show print demangle
     set/show history write    set/show history save
     set/show prettyprint      set/show print pretty
     set/show screen-height    set/show height
     set/show screen-width     set/show width
     set/show sevenbit-strings set/show print sevenbit-strings
     set/show unionprint       set/show print union
     set/show vtblprint        set/show print vtbl
     
     unset                     [No longer an alias for delete]

