;;; compiled by jwz@thalidomide on Mon Dec 28 16:02:10 1992
;;; from file /cadillac-th/jwz/emacs19/lisp/packages/shell-font.el
;;; emacs version 19.4.1 Lucid.
;;; bytecomp version 2.08; 13-dec-92.
;;; optimization is on.
;;; this file uses opcodes which do not exist in Emacs18.

(if (and (boundp 'emacs-version)
	 (or (and (boundp 'epoch::version) epoch::version)
	     (string-lessp emacs-version "19")))
    (error "This file was compiled for Emacs19."))

(byte-code "¿¡!¨Ñ¬¡!à√¡!¨Öƒ≈¡\"à¿á" [find-face shell-prompt make-face face-differs-from-default-p copy-face bold] 3)
(fset 'shell-hack-prompt-font #[(limit) "ädbà¿ ¬é√∆#≠ê«ïbà»…xà À«î`\"Ã\"+á" [match-data _match_data_ ((store-match-data _match_data_)) re-search-backward comint-prompt-regexp limit t 0 " 	" nil set-extent-face make-extent shell-prompt] 4 "\
Search backward from point-max for text matching the comint-prompt-regexp,
and put it in the `shell-prompt' face.  LIMIT is the left bound of the search."])
(fset 'shell-face-process-filter #[(proc string) "ä¿	!qà¬	!bà`≠É≈!«p!â≠Ñ…!\nÀ!à\n´àÕ\nŒ#à´Üœìà¬	!`œìà–!-á" [process-buffer proc process-mark p comint-last-input-end marker-position ie get-buffer-window w window-start ws insert-before-markers string set-window-start t nil shell-hack-prompt-font] 5 "\
A process-filter that simply inserts the string into the process's buffer,
to give the illusion of a process with no filter, but then searches backward
for text matching the comint-prompt-regexp of this buffer, and puts it in
the `shell-prompt' face."])
(fset 'install-shell-font-prompt #[nil "¿¡p!¬\"á" [set-process-filter get-buffer-process shell-face-process-filter] 3 "\
Add this to your shell-mode-hook to make the prompt be printed in boldface.
The prompt uses the face called `shell-prompt'; you can alter the graphical
attributes of that with the normal face-manipulation functions."])
