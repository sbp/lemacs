;;; compiled by jwz@thalidomide on Tue Apr 21 17:44:57 1992
;;; from file /u/jwz/emacs19/lisp/field.el
;;; emacs version 19.0.2 Lucid.
;;; bytecomp version 2.05; 9-mar-92.
;;; optimization is on.
;;; this file uses opcodes which do not exist in Emacs18.

(if (and (boundp 'emacs-version)
	 (or (and (boundp 'epoch::version) epoch::version)
	     (string-lessp emacs-version "19")))
    (error "This file was compiled for Emacs19."))

(byte-code "ÀÁ!¬‚ÂÂ‡" [boundp buffer-fields nil] 2)
(fset 'add-field #[(start end &optional buffer protected data) "¬‚pÁ\n!«„Ã\n!Á!«„Ã!\nV«ŒÅ\n)ÇÈÉ \nT“É “\n&ŠqˆB))‡" [buffer markerp start marker-position end nil temp vector field make-marker protected data buffer-fields] 7 "\
Add a new field to BUFFER that starts at START (inclusive)and ends at
END (exclusive).
START and END can be character numbers or markers.
If PROTECTED is non-nil, then the field
will be protected from insertion and deletion.
ALIST (optional) is the initial value for the field's alist.
Returns the field object (which is actually a vector)."])
(byte-code "ÀÁMˆÂÃM‡" [region-field #[nil "ÀÁ Â \"‡" [add-field region-beginning region-end] 3] protected-region-field #[nil "ÀÁ Â pÃÄ%‡" [add-field region-beginning region-end t nil] 6]] 2)
(fset 'field-buffer '(macro . #[(field) "À	ÂE‡" [aref field 1] 3 "\
Return the buffer that FIELD is associated with."]))
(fset 'field-start '(macro . #[(field) "ÀÁ\nÃED‡" [1- aref field 2] 4 "\
Return the character number of the current starting point of FIELD"]))
(fset 'field-end '(macro . #[(field) "À	ÂE‡" [aref field 3] 3 "\
Return the character number of the current end point of FIELD"]))
(fset 'field-protected '(macro . #[(field) "À	ÂE‡" [aref field 4] 3 "\
Return t is FIELD is protected, nil otherwise."]))
(fset 'field-alist '(macro . #[(field) "À	ÂE‡" [aref field 5] 3 "\
Return the data associated with FIELD."]))
(fset 'set-field-protected '(macro . #[(field protected) "À	ÂF‡" [aset field 4 protected] 4 "\
Set the protection status of FIELD to PROTECTED."]))
(fset 'set-field-alist '(macro . #[(field alist) "À	ÂF‡" [aset field 5 alist] 4 "\
Set the data associate with FIELD to be ALIST."]))
(fset 'delete-field #[(field) "ŠÁHqˆÂ\"‰)‡" [field 1 delq buffer-field-list] 3 "\
Delete field FIELD, in whichever buffer it belongs to."])
