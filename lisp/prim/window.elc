;;; compiled by jwz@thalidomide on Tue Jun 30 22:41:54 1992
;;; from file /wg1/emacs-base/lisp/prim/window.el
;;; emacs version 19.2.1 Lucid.
;;; bytecomp version 2.07; 17-jun-92.
;;; optimization is on.
;;; this file uses opcodes which do not exist in Emacs18.

(if (and (boundp 'emacs-version)
	 (or (and (boundp 'epoch::version) epoch::version)
	     (string-lessp emacs-version "19")))
    (error "This file was compiled for Emacs19."))

(fset 'count-windows #[(&optional minibuf) "ÀÂÃ\"ˆ	)‡" [0 count walk-windows #[nil "Á\\‰‡" [count 1] 2] minibuf] 3 "\
Returns the number of visible windows.
Optional arg NO-MINI non-nil means don't count the minibuffer
even if it is active."])
(fset 'balance-windows #[nil "ÀÂÃÄ\"ˆÅ 	¥ÂÇÄ\"*‡" [0 count walk-windows #[(w) "Á\\‰‡" [count 1] 2] nomini screen-height size #[(w) "À	!ˆÂÄ Z!‡" [select-window w enlarge-window size window-height] 3]] 3 "\
Makes all visible windows the same size (approximately)." nil])
(fset 'split-window-vertically #[(&optional arg hack-display) "À ÁÄÁ­ƒÆ!\"«ÇÁŠÉ qˆÊ bˆËÌ !ˆÍ\n`\"ˆ`Î\n!Y«…Ï\n`\"ˆËÐ!ˆÑ`\n\"«…Í\n`\"ˆ`)`X«‹ÏS\"ˆÒ\n!ˆ)\n*‡" [selected-window nil new-w old-w split-window arg prefix-numeric-value hack-display bottom window-buffer window-start vertical-motion window-height set-window-start window-point set-window-point -1 pos-visible-in-window-p select-window] 4 "\
Split current window into two windows, one above the other.
The top window gets ARG lines.  No arg means split equally.

The two windows will be displaying the same text as before: both windows will
be displaying the current buffer, but the second window will be scrolled such
that little redisplay will happen - the lines that were on the screen before
the split will still be on the screen, in the same places.  

An effort is made to keep the cursor in the same place relative to the text on
the screen as well.  If the cursor is below the split-point before the split,
then the bottom window will be selected; otherwise the top window will be
selected." (list current-prefix-arg t)])
(fset 'split-window-horizontally #[(&optional arg) "ÀÁ\n­ƒÃ\n!Ä#‡" [split-window nil arg prefix-numeric-value t] 4 "\
Split current window into two windows side by side.
This window becomes the leftmost of the two, and gets
ARG columns.  No arg means split equally." "P"])
(fset 'enlarge-window-horizontally #[(arg) "À	Â\"‡" [enlarge-window arg t] 3 "\
Make current window ARG columns wider." "p"])
(fset 'shrink-window-horizontally #[(arg) "À	Â\"‡" [shrink-window arg t] 3 "\
Make current window ARG columns narrower." "p"])
(fset 'window-config-to-register #[(name) "À	Â \"‡" [set-register name current-window-configuration] 3 "\
Save the current window configuration in register REG (a letter).
It can be later retrieved using \\[M-x register-to-window-config]." "cSave window configuration in register: "])
(fset 'register-to-window-config #[(name) "ÀÁ\n!!‡" [set-window-configuration get-register name] 3 "\
Restore (make current) the window configuration in register REG (a letter).
Use with a register previously set with \\[window-config-to-register]." "cRestore window configuration from register: "])
(byte-code "À	ÂÃ#ˆÀ	ÄÅ#ˆÀ	ÆÇ#ˆÀ	ÈÉ#ˆÀ	ÊË#ˆÀ	ÌÍ#‡" [define-key ctl-x-map "2" split-window-vertically "5" split-window-horizontally "6" window-config-to-register "7" register-to-window-config "}" enlarge-window-horizontally "{" shrink-window-horizontally] 4)
