@c -*-texinfo-*-
@c This is part of the GNU Emacs Lisp Reference Manual.
@c Copyright (C) 1990, 1991, 1992, 1993 Free Software Foundation, Inc. 
@c See the file lispref.texinfo for copying conditions.
@setfilename ../../info/help.info
@node Documentation, Files, Modes, Top
@chapter Documentation
@cindex documentation strings

  GNU Emacs Lisp has convenient on-line help facilities, most of which
derive their information from the documentation strings associated with
functions and variables.  This chapter describes how to write good
documentation strings for your Lisp programs, as well as how to write
programs to access documentation.

  Note that the documentation strings for Emacs are not the same thing
as the Emacs manual.  Manuals have their own source files, written in
the Texinfo language; documentation strings are specified in the
definitions of the functions and variables they apply to.  A collection
of documentation strings is not sufficient as a manual because a good
manual is not organized in that fashion; it is organized in terms of
topics of discussion.

@menu
* Documentation Basics::      Good style for doc strings.
                                Where to put them.  How Emacs stores them.
* Accessing Documentation::   How Lisp programs can access doc strings.
* Keys in Documentation::     Substituting current key bindings.
* Describing Characters::     Making printable descriptions of
                                non-printing characters and key sequences.
* Help Functions::            Subroutines used by Emacs help facilities.
@end menu

@node Documentation Basics, Accessing Documentation, Documentation, Documentation
@comment  node-name,  next,  previous,  up
@section Documentation Basics
@cindex documentation conventions
@cindex writing a documentation string
@cindex string, writing a doc string

  A documentation string is written using the Lisp syntax for strings,
with double-quote characters surrounding the text of the string.  This
is because it really is a Lisp string object.  The string serves as
documentation when it is written in the proper place in the definition
of a function or variable.  In a function definition, the documentation
string follows the argument list.  In a variable definition, the
documentation string follows the initial value of the variable.

  When you write a documentation string, make the first line a complete
sentence (or two complete sentences) since some commands, such as
@code{apropos}, print only the first line of a multi-line documentation
string.  Also, you should not indent the second line of a documentation
string, if you have one, because that looks odd when you use @kbd{C-h f}
(@code{describe-function}) or @kbd{C-h v} (@code{describe-variable}).

  Documentation strings may contain several special substrings, which
stand for key bindings to be looked up in the current keymaps when the
documentation is displayed.  This allows documentation strings to refer
to the keys for related commands and be accurate even when a user
rearranges the key bindings.  (@xref{Accessing Documentation}.)

  Within the Lisp world, a documentation string is kept with the
function or variable that it describes:

@itemize @bullet
@item
The documentation for a function is stored in the function definition
itself (@pxref{Lambda Expressions}).  The function
@code{documentation} knows how to extract it.

@item
@kindex variable-documentation
The documentation for a variable is stored on the variable's property
list under the property name @code{variable-documentation}.  The
function @code{documentation-property} knows how to extract it.
@end itemize

@cindex @file{DOC} (documentation) file
@cindex @file{emacs/etc/DOC-@var{version}}
@cindex @file{etc/DOC-@var{version}}
  However, to save space, the documentation for preloaded functions and
variables (including primitive functions and autoloaded functions) are
stored in the @file{emacs/etc/DOC-@var{version}} file.  The
@file{emacs/etc/DOC-@var{version}} file can be accessed by both the
@code{documentation} and the @code{documentation-property} functions,
and the process is transparent to the user.  In this case, the
documentation string is replaced with an integer offset into the
@file{emacs/etc/DOC-@var{version}} file.  Keeping the documentation
strings out of the Emacs core image saves a significant amount of space.
@xref{Building Emacs}.

  For information on the uses of documentation strings, see @ref{Help, ,
Help, emacs, The GNU Emacs Manual}.

@c Wordy to prevent overfull hbox.  --rjc 15mar92
  The @file{emacs/etc} directory contains two utilities that you can use
to print nice-looking hardcopy for the file
@file{emacs/etc/DOC-@var{version}}.  These are @file{sorted-doc.c} and
@file{digest-doc.c}.

@node Accessing Documentation, Keys in Documentation, Documentation Basics, Documentation
@section Access to Documentation Strings

@defun documentation-property symbol property &optional verbatim
  This function returns the documentation string that is recorded
@var{symbol}'s property list under property @var{property}.  This uses
the function @code{get}, but does more than that: it also retrieves the
string from the file @file{emacs/etc/DOC-@var{version}} if necessary,
and runs @code{substitute-command-keys} to substitute the actual
(current) key bindings.

If @var{verbatim} is non-@code{nil}, that inhibits running
@code{substitute-command-keys}.  (The @var{verbatim} argument exists
only as of Emacs 19.)

@smallexample
@group
(documentation-property 'command-line-processed
   'variable-documentation)
     @result{} "t once command line has been processed"
@end group
@group
(symbol-plist 'command-line-processed)
     @result{} (variable-documentation 188902)
@end group
@end smallexample
@end defun

@defun documentation function &optional verbatim
  This function returns the documentation string of @var{function}.
This function will access the documentation string if it is stored in
the @file{emacs/etc/DOC-@var{version}} file.

  In addition, @code{documentation} runs @code{substitute-command-keys}
on the resulting string, so the value contains the actual (current) key
bindings.  (This is not done if @var{verbatim} is non-@code{nil}; the
@var{verbatim} argument exists only as of Emacs 19.)

  The function @code{documentation} signals a @code{void-function} error
unless @var{function} has a function definition.  However,
@var{function} does not need to have a documentation string.  If there
is no documentation string, @code{documentation} returns @code{nil}.
@end defun

@c Wordy to prevent overfull hboxes.  --rjc 15mar92
  Here is an example of using the two functions, @code{documentation} and
@code{documentation-property}, to display the documentation strings for
several symbols in a @samp{*Help*} buffer.

@smallexample
@group
(defun describe-symbols (pattern)
  "Describe the Emacs Lisp symbols matching PATTERN.
All symbols that have PATTERN in their name are described
in the `*Help*' buffer."
  (interactive "sDescribe symbols matching: ")
  (let ((describe-func
         (function 
          (lambda (s)
@end group
@group
            ;; @r{Print description of symbol.}
            (if (fboundp s)             ; @r{It is a function.}
                (princ
                 (format "%s\t%s\n%s\n\n" s
                   (if (commandp s) 
                       (let ((keys (where-is-internal s)))
                         (if keys
                             (concat
                              "Keys: "
                              (mapconcat 'key-description 
                                         keys " "))
                           "Keys: none"))
                     "Function")
@end group
@group
                   (or (documentation s) 
                       "not documented"))))
            
            (if (boundp s)              ; @r{It is a variable.}
@end group
@group
                (princ
                 (format "%s\t%s\n%s\n\n" s
                   (if (user-variable-p s) 
                       "Option " "Variable")
@end group
@group
                   (or (documentation-property 
                         s 'variable-documentation)
                       "not documented")))))))
        sym-list)
@end group

@group
    ;; @r{Build a list of symbols that match pattern.}
    (mapatoms (function 
               (lambda (sym)
                 (if (string-match pattern (symbol-name sym))
                     (setq sym-list (cons sym sym-list))))))
@end group

@group
    ;; @r{Display the data.}
    (with-output-to-temp-buffer "*Help*"
      (mapcar describe-func (sort sym-list 'string<))
      (print-help-return-message))))
@end group
@end smallexample

  The @code{describe-symbols} function works like @code{apropos},
but provides more information.

@smallexample
@group
(describe-symbols "goal")

---------- Buffer: *Help* ----------
goal-column     Option 
*Semipermanent goal column for vertical motion, as set by C-x C-n, or nil.
@end group
@c Do not blithely break or fill these lines.
@c That makes them incorrect.

@group
set-goal-column Command: C-x C-n
Set the current horizontal position as a goal for C-n and C-p.
@end group
@c DO NOT put a blank line here!  That is factually inaccurate!
@group
Those commands will move to this position in the line moved to
rather than trying to keep the same horizontal position.
With a non-nil argument, clears out the goal column
so that C-n and C-p resume vertical motion.
The goal column is stored in the variable `goal-column'.
@end group

@group
temporary-goal-column   Variable
Current goal column for vertical motion.
It is the column where point was
at the start of current run of vertical motion commands.
When the `track-eol' feature is doing its job, the value is 9999.
---------- Buffer: *Help* ----------
@end group
@end smallexample

@defun Snarf-documentation filename
  This function is used only during Emacs initialization, just before
the runnable Emacs is dumped.  It finds the file offsets of the
documentation strings stored in the file @var{filename}, and records
them in the in-core function definitions and variable property lists in
place of the actual strings.  @xref{Building Emacs}.

  Emacs finds the file @var{filename} in the @file{emacs/etc}
directory.  When the dumped Emacs is later executed, the same file is
found in the directory @code{data-directory}.  Usually @var{filename} is
@code{"DOC-@var{version}"}.
@end defun

@c Emacs 19 feature
@defvar data-directory
This variable holds the name of the directory in which Emacs finds
certain data files that come with Emacs or are built as part of building
Emacs.  (In older Emacs versions, this directory was the same as
@code{exec-directory}.)
@end defvar

@node Keys in Documentation, Describing Characters, Accessing Documentation, Documentation
@section Substituting Key Bindings in Documentation
@cindex documentation, keys in
@cindex keys in documentation strings
@cindex substituting keys in documentation

This function makes it possible for you to write a documentation string
that enables a user to display information about the current, actual key
bindings.  if you call @code{documentation} with non-@code{nil}
@var{verbatim}, you might later call this function to do the
substitution that you prevented @code{documentation} from doing.

@defun substitute-command-keys string
  This function returns @var{string} with certain special substrings
replaced by the actual (current) key bindings.  This permits
the documentation to be displayed with accurate information about key
bindings.  (The key bindings may be changed by the user between the time
Emacs is built and the time that the documentation is asked for.)

  This table lists the forms of the special substrings and what they are
replaced with:

@table @code
@item \[@var{command}]
is replaced either by a keystroke sequence that will invoke
@var{command}, or by @samp{M-x @var{command}} if @var{command} is not
bound to any key sequence.

@item \@{@var{mapvar}@} 
is replaced by a summary of the value
of @var{mapvar}, taken as a keymap.
(The summary is made by @code{describe-bindings}.)

@item \<@var{mapvar}> 
makes this call to @code{substitute-command-keys} use the value of
@var{mapvar} as the keymap for future @samp{\[@var{command}]}
substrings.  This special string does not produce any replacement text
itself; it only affects the replacements done later.
@end table

@strong{Please note:} each @samp{\} must be doubled when written in a
string in Emacs Lisp.

  Here are examples of the special substrings:

@smallexample
@group
(substitute-command-keys 
   "To abort recursive edit, type: \\[abort-recursive-edit]")

@result{} "To abort recursive edit, type: C-]"
@end group

@group
(substitute-command-keys 
   "The keys that are defined for the minibuffer here are:
  \\@{minibuffer-local-must-match-map@}")

@result{} "The keys that are defined for the minibuffer here are:
@end group

?               minibuffer-completion-help
SPC             minibuffer-complete-word
TAB             minibuffer-complete
LFD             minibuffer-complete-and-exit
RET             minibuffer-complete-and-exit
C-g             abort-recursive-edit
"

@group
(substitute-command-keys
   "To abort a recursive edit from the minibuffer, type\
\\<minibuffer-local-must-match-map>\\[abort-recursive-edit].")
@result{} "To abort a recursive edit from the minibuffer, type C-g."
@end group
@end smallexample
@end defun

@node Describing Characters, Help Functions, Keys in Documentation, Documentation
@section Describing Characters for Help Messages

  These functions convert events, key sequences or characters to textual
descriptions.  These descriptions are useful for including arbitrary
text characters or key sequences in messages, because they convert
non-printing characters to sequences of printing characters.  The
description of a printing character is the character itself.

@defun key-description sequence
@cindex Emacs event standard notation
  This function returns a string containing the Emacs standard notation
for the input events in @var{sequence}.  The argument @var{sequence} may
be a string, vector or list.  @xref{Input Events}, for more information
about valid events.  See also the examples for
@code{single-key-description}, below.
@end defun

@defun single-key-description event
@cindex event printing
@cindex character printing
@cindex control character printing
@cindex meta character printing
  This function returns a string describing @var{event} in the standard
Emacs notation for keyboard input.  A normal printing character is
represented by itself, but a control character turns into a string
starting with @samp{C-}, a meta character turns into a string starting
with @samp{M-}, and space, linefeed, etc. are transformed to @samp{SPC},
@samp{LFD}, etc.  A function key is represented by its name.  An event
which is a list is represented by the name of the symbol in the @sc{car}
of the list.

@smallexample
@group
(single-key-description ?\C-x)
     @result{} "C-x"
@end group
@group
(key-description "\C-x \M-y \n \t \r \f123")
     @result{} "C-x SPC M-y SPC LFD SPC TAB SPC RET SPC C-l 1 2 3"
@end group
@group
(single-key-description 'C-mouse-1)
     @result{} "C-mouse-1"
@end group
@end smallexample
@end defun

@defun text-char-description character
  This function returns a string describing @var{character} in the
standard Emacs notation for characters that appear in text---like
@code{single-key-description}, except that control characters are
represented with a leading caret (which is how control characters in
Emacs buffers are usually displayed).

@smallexample
@group
(text-char-description ?\C-c)
     @result{} "^C"
@end group
@group
(text-char-description ?\M-m)
     @result{} "M-m"
@end group
@group
(text-char-description ?\C-\M-m)
     @result{} "M-^M"
@end group
@end smallexample
@end defun

@node Help Functions,  , Describing Characters, Documentation
@section Help Functions

  Emacs provides a variety of on-line help functions, all accessible to
the user as subcommands of the prefix @kbd{C-h}.  For more information
about them, see @ref{Help, , Help, emacs, The GNU Emacs Manual}.  Here
we describe some program-level interfaces to the same information.

@deffn Command apropos regexp &optional do-all predicate
  This function finds all symbols whose names contain a match for the
regular expression @var{regexp}, and returns a list of them.  
It also displays the symbols in a buffer named @samp{*Help*}, each with a
one-line description.

@c Emacs 19 feature
  If @var{do-all} is non-@code{nil}, then @code{apropos} also shows
key bindings for the functions that are found.

  If @var{predicate} is non-@code{nil}, it should be a function to be
called on each symbol that has matched @var{regexp}.  Only symbols for
which @var{predicate} returns a non-@code{nil} value are listed or
displayed.

  In the first of the following examples, @code{apropos} finds all the
symbols with names containing @samp{exec}.  In the second example, it
finds and returns only those symbols that are also commands.
(We don't show the output that results in the @samp{*Help*} buffer.)

@smallexample
@group
(apropos "exec")
     @result{} (Buffer-menu-execute command-execute exec-directory
    exec-path execute-extended-command execute-kbd-macro
    executing-kbd-macro executing-macro)
@end group

@group
(apropos "exec" nil 'commandp)
     @result{} (Buffer-menu-execute execute-extended-command)
@end group
@ignore
@group
---------- Buffer: *Help* ----------
Buffer-menu-execute
  Function: Save and/or delete buffers marked with
  M-x Buffer-menu-save or M-x Buffer-menu-delete commands.
execute-extended-command      ESC x
  Function: Read function name, then read its 
  arguments and call it.
---------- Buffer: *Help* ----------
@end group
@end ignore
@end smallexample

  The command @kbd{C-h a} (@code{command-apropos}) calls @code{apropos},
but specifies a @var{predicate} to restrict the output to symbols that
are commands.  The call to @code{apropos} looks like this:

@smallexample
(apropos string t 'commandp)
@end smallexample
@end deffn

@c Emacs 19 feature
@deffn Command super-apropos regexp &optional do-all
This function differs from @code{apropos} in that it searches
documentation strings as well as symbol names for matches for
@var{regexp}.  By default, it searches only the documentation strings,
and only those of functions and variables that are included in Emacs
when it is dumped.  If @var{do-all} is non-@code{nil}, it scans the
names and documentation strings of all functions and variables.
@end deffn

@deffn Command help-command
  This command is not a function, but rather a symbol which is
equivalent to the keymap called @code{help-map}.  It is defined in
@file{help.el} as follows:

@smallexample
@group
(define-key global-map "\C-h" 'help-command)
(fset 'help-command help-map)
@end group
@end smallexample
@end deffn

@defvar help-map
  The value of this variable is a local keymap for characters following the
Help key, @kbd{C-h}.
@end defvar

@defun print-help-return-message &optional function
  This function builds a string which is a message explaining how to
restore the previous state of the windows after a help command.  After
building the message, it applies @var{function} to it if @var{function}
is non-@code{nil}.  Otherwise it calls @code{message} to display it in
the echo area.

This function expects to be called inside a
@code{with-output-to-temp-buffer} special form, and expects
@code{standard-output} to have the value bound by that special form.
For an example of its use, see the example in the section describing the
@code{documentation} function (@pxref{Accessing Documentation}).

The constructed message will have one of the forms shown below.

@smallexample
@group
---------- Echo Area ----------
Type C-x 1 to remove help window.
---------- Echo Area ----------
@end group

@group
---------- Echo Area ----------
Type C-x 4 b RET to restore old contents of help window.
---------- Echo Area ----------
@end group
@end smallexample
@end defun

@defvar help-char
  The value of this variable is the character that Emacs recognizes as
meaning Help.  When Emacs reads this character (which is usually 8, the
value of @kbd{C-h}), Emacs evaluates @code{(eval help-form)}, and
displays the result if it is a string.  If @code{help-form}'s value is
@code{nil}, this character is read normally.
@end defvar

@defvar help-form
The value of this variable is a form to execute when the character
@code{help-char} is read.  If the form returns a string, that string is
displayed.  If @code{help-form} is @code{nil}, then the help character
is not recognized.

Entry to the minibuffer binds this variable to the value of
@code{minibuffer-help-form}.
@end defvar

@defvar prefix-help-command
This variable holds a command that prints help for a prefix character.
The command is run when the user types the help character after a prefix
character.  The default value of @code{prefix-help-command} is
@code{describe-prefix-bindings}; that command uses
@code{this-command-keys} to find what prefix character was used, then
uses @code{describe-bindings} to describe it.
@end defvar

  The following two functions are found in the library @file{helper}.
They are for modes that want to provide help without relinquishing
control, such as the ``electric'' modes.  You must load that library
with @code{(require 'helper)} in order to use them.  Their names begin
with @samp{Helper} to distinguish them from the ordinary help functions.

@deffn Command Helper-describe-bindings
This command pops up a window displaying a help buffer containing a
listing of all of the key bindings from both the local and global keymaps.
It works by calling @code{describe-bindings}.
@end deffn

@deffn Command Helper-help
This command provides help for the current mode.  It prompts the user
in the minibuffer with the message @samp{Help (Type ? for further
options)}, and then provides assistance in finding out what the key
bindings are, and what the mode is intended for.  It returns @code{nil}.

This can be customized by changing the map @code{Helper-help-map}.
@end deffn
