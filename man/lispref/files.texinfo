@c -*-texinfo-*-
@c This is part of the GNU Emacs Lisp Reference Manual.
@c Copyright (C) 1990, 1991, 1992, 1993 Free Software Foundation, Inc. 
@c See the file lispref.texinfo for copying conditions.
@setfilename ../../info/files.info
@node Files, Backups and Auto-Saving, Documentation, Top
@comment  node-name,  next,  previous,  up
@chapter Files

  In Emacs, you can find, create, view, save, and otherwise work with
files and file directories.  This chapter describes most of the
file-related functions of Emacs Lisp, but a few others are described in
@ref{Buffers}, and those related to backups and auto-saving are
described in @ref{Backups and Auto-Saving}.

@menu
* Visiting Files::           Reading files into Emacs buffers for editing.
* Saving Buffers::           Writing changed buffers back into files.
* Reading from Files::       Reading files into buffers without visiting.
* Writing to Files::         Writing new files from parts of buffers.
* File Locks::               Locking and unlocking files, to prevent
                               simultaneous editing by two people.
* Information about Files::  Testing existence, accessibility, size of files.
* Contents of Directories::  Getting a list of the files in a directory.
* Create/Delete Dirs::	     Creating and Deleting Directories.
* Changing File Attributes:: Renaming files, changing protection, etc.
* File Names::               Decomposing and expanding file names.
* Magic File Names::	     Defining "magic" special handling
			       for certain file names.
* Partial Files::            Treating a section of a buffer as a file.
@end menu

@node Visiting Files
@section Visiting Files
@cindex finding files
@cindex visiting files

  Visiting a file means reading a file into a buffer.  Once this is
done, we say that the buffer is @dfn{visiting} that file, and call the
file ``the visited file'' of the buffer.

  A file and a buffer are two different things.  A file is information
recorded permanently in the computer (unless you delete it).  A buffer,
on the other hand, is information inside of Emacs that will vanish at
the end of the editing session (or when you kill the buffer).  Usually,
a buffer contains information that you have copied from a file; then we
say the buffer is visiting that file.  The copy in the buffer is what
you modify with editing commands.  Such changes to the buffer do not
change the file; therefore, to make the changes permanent, you must
@dfn{save} the buffer, which means copying the altered buffer contents
back into the file.

  In spite of the distinction between files and buffers, people often
refer to a file when they mean a buffer and vice-versa.  Indeed, we say,
``I am editing a file,'' rather than, ``I am editing a buffer which I
will soon save as a file of the same name.''  Humans do not usually need
to make the distinction explicit.  When dealing with a computer program,
however, it is good to keep the distinction in mind.

@menu
* Visiting Functions::         The usual interface functions for visiting.
* Subroutines of Visiting::    Lower-level subroutines that they use.
@end menu

@node Visiting Functions
@subsection Functions for Visiting Files

  This section describes the functions normally used to visit files.
For historical reasons, these functions have names starting with
@samp{find-} rather than @samp{visit-}.  @xref{Buffer File Name}, for
functions and variables that access the visited file name of a buffer or
that find an existing buffer by its visited file name.

@deffn Command find-file filename
  This function reads the file @var{filename} into a buffer and displays
that buffer in the selected window so that the user can edit it.

The body of the @code{find-file} function is very simple and looks
like this:

@example
(switch-to-buffer (find-file-noselect filename))
@end example

@noindent
(See @code{switch-to-buffer} in @ref{Displaying Buffers}.)

  When @code{find-file} is called interactively, it prompts for
@var{filename} in the minibuffer.
@end deffn

@defun find-file-noselect filename &optional nowarn
  This function is the guts of all the file-visiting functions.  It
reads a file into a buffer and returns the buffer.  You may then make
the buffer current or display it in a window if you wish, but this
function does not do so.

  If no buffer is currently visiting @var{filename}, then one is created
and the file is visited.  If @var{filename} does not exist, the buffer
is left empty, and @code{find-file-noselect} displays the message
@samp{New file} in the echo area.

  If a buffer is already visiting @var{filename}, then the
@code{find-file-noselect} function uses that buffer rather than creating
a new one.  However, it does verify that the file has not changed since
it was last visited or saved in that buffer.  If the file has changed,
then this function asks the user whether to reread the changed file.  If
the user says @samp{yes}, any changes previously made in the buffer are
lost.

@c Lucid Emacs feature?
  If @var{no-warn} is non-@code{nil}, various warnings that Emacs normally
gives (e.g. if another buffer is already visiting @var{filename} but
@var{filename} has been removed from disk since that buffer was created)
are suppressed.

  The @code{find-file-noselect} function calls @code{after-find-file}
after the file is read in (@pxref{Subroutines of Visiting}).  The
@code{after-find-file} function sets the buffer major mode, parses local
variables, warns the user if there exists an auto-save file more recent
than the file just visited (unless @var{no-warn} is given), and finishes
by running the functions in @code{find-file-hooks}.

  The @code{find-file-noselect} function returns the buffer that is
visiting the file @var{filename}.

@example
@group
(find-file-noselect "/etc/fstab")
     @result{} #<buffer fstab>
@end group
@end example
@end defun

@deffn Command find-alternate-file filename
  This function reads the file @var{filename} into a buffer and selects
it, killing the buffer current at the time the command is run.  It is
useful if you have visited the wrong file by mistake, so that you can
get rid of the buffer that you did not want to create, at the same time
as you visit the file you intended.

  When this function is called interactively, it prompts for @var{filename}.
@end deffn

@deffn Command find-file-other-window filename
  This function visits the file @var{filename} and displays its buffer
in a window other than the selected window.  It may use another existing
window or split a window; see @ref{Displaying Buffers}.

  When this function is called interactively, it prompts for
@var{filename}.
@end deffn

@deffn Command find-file-read-only filename
  This function visits the file named @var{filename} and selects its
buffer, just like @code{find-file}, but it marks the buffer as
read-only.  @xref{Read Only Buffers}, for related functions and
variables.

  When this function is called interactively, it prompts for
@var{filename}.
@end deffn

@deffn Command view-file filename
  This function views @var{filename} in View mode, returning to
the previous buffer when done.  View mode is a mode that allows you to
skim rapidly through the file but does not let you modify it.

  After loading the file, @code{view-file} runs the normal hook
@code{view-hook} using @code{run-hooks}.  @xref{Hooks}.

  When this function is called interactively, it prompts for
@var{filename}.
@end deffn

@defvar find-file-hooks
  The value of this variable is a list of functions to be called after a
file is visited.  The file's local-variables specification (if any) will
have been processed before the hooks are run.  The buffer visiting the
file is current when the hook functions are run.

This variable could be a normal hook, but we think that renaming it
would not be advisable.
@end defvar

@defvar find-file-not-found-hooks
  The value of this variable is a list of functions to be called when
@code{find-file} or @code{find-file-noselect} is passed a nonexistent
@var{filename}.  These functions are called as soon as the error is
detected.  @code{buffer-file-name} is already set up.  The functions are
called in the order given, until one of them returns non-@code{nil}.

This is not a normal hook because the values of the functions are
used and they may not all be run.
@end defvar

@node Subroutines of Visiting
@comment  node-name,  next,  previous,  up
@subsection Subroutines of Visiting

  The @code{find-file-noselect} function uses the
@code{create-file-buffer} and @code{after-find-file} functions as
subroutines.  Sometimes it is useful to call them directly.

@defun create-file-buffer filename
This function creates a suitably named buffer for visiting @var{filename},
and returns it.  The string @var{filename} (sans directory) is used
unchanged if that name is free; otherwise, a string such as @samp{<2>} is
appended to get an unused name.  See also @ref{Creating Buffers}.

@strong{Please note:} @code{create-file-buffer} does @emph{not}
associate the new buffer with a file and does not make it the current
buffer.

@example
@group
(create-file-buffer "foo")
     @result{} #<buffer foo>
@end group
@group
(create-file-buffer "foo")
     @result{} #<buffer foo<2>>
@end group
@group
(create-file-buffer "foo")
     @result{} #<buffer foo<3>>
@end group
@end example

  This function is used by @code{find-file-noselect}.
It uses @code{generate-new-buffer} (@pxref{Creating Buffers}).
@end defun

@defun after-find-file &optional error warn noauto
  This function is called by @code{find-file-noselect} and by the
default revert function (@pxref{Reverting}).  It sets the buffer major
mode, and parses local variables (@pxref{Auto Major Mode}).

@cindex new file message
@cindex file open error
   If there was an error in opening the file, the calling function
should pass @var{error} a non-@code{nil} value.  In that case,
@code{after-find-file} issues a warning: @samp{(New File)}.  Note that,
for serious errors, you would not even call @code{after-find-file}.
Only ``file not found'' errors get here with a non-@code{nil}
@var{error}.

  If @var{warn} is non-@code{nil}, then this function issues a warning
if an auto-save file exists and is more recent than the visited file.

@c Lucid Emacs feature?
  If @var{noauto} is non-@code{nil}, then this function does not turn
on auto-save mode; otherwise, it does.

  The last thing @code{after-find-file} does is call all the functions
in @code{find-file-hooks}.
@end defun

@node Saving Buffers
@section Saving Buffers

  When you edit a file in Emacs, you are actually working on a buffer
that is visiting that file---that is, the contents of the file are
copied into the buffer and the copy is what you edit.  Changes to the
buffer do not change the file until you @dfn{save} the buffer, which
means copying the contents of the buffer into the file.

@deffn Command save-buffer &optional backup-option
  This function saves the contents of the current buffer in its visited
file if the buffer has been modified since it was last visited or saved.
Otherwise it does nothing.

  @code{save-buffer} is responsible for making backup files.  Normally,
@var{backup-option} is @code{nil}, and @code{save-buffer} makes a backup
file only if this is the first save or if the buffer was previously
modified.  Other values for @var{backup-option} request the making of
backup files in other circumstances:

@itemize @bullet
@item
With an argument of 4 or 64, reflecting 1 or 3 @kbd{C-u}'s, the
@code{save-buffer} function marks this version of the file to be
backed up when the buffer is next saved.

@item
With an argument of 16 or 64, reflecting 2 or 3 @kbd{C-u}'s, the
@code{save-buffer} function unconditionally backs up the previous
version of the file before saving it.
@end itemize
@end deffn

@deffn Command save-some-buffers &optional save-silently-p exiting
  This command saves some modified file-visiting buffers.  Normally it
asks the user about each buffer.  But if @var{save-silently-p} is
non-@code{nil}, it saves all the file-visiting buffers without querying
the user.

  The optional @var{exiting} argument, if non-@code{nil}, requests this
function to offer also to save certain other buffers that are not
visiting files.  These are buffers that have a non-@code{nil} local
value of @code{buffer-offer-save}.  (A user who says yes to saving one
of these is asked to specify a file name to use.)  The
@code{save-buffers-kill-emacs} function passes a non-@code{nil} value
for this argument.
@end deffn

@defvar buffer-offer-save
  When this variable is non-@code{nil} in a buffer, Emacs offers to save
the buffer on exit even if the buffer is not visiting a file.  The
variable is automatically local in all buffers.  Normally, Mail mode
(used for editing outgoing mail) sets this to @code{t}.
@end defvar

@deffn Command write-file filename
  This function writes the current buffer into file @var{filename},
makes the buffer visit that file, and marks it not modified.  The buffer
is renamed to correspond to @var{filename} unless that name is already
in use.
@end deffn

@defvar write-file-hooks
The value of this variable is a list of functions to be called before
writing out a buffer to its visited file.  If one of them returns
non-@code{nil}, the file is considered already written and the rest of
the functions are not called, nor is the usual code for writing the file
executed.

If a function in @code{write-file-hooks} returns non-@code{nil}, it
is responsible for making a backup file (if that is appropriate).
To do so, execute the following code:

@example
(or buffer-backed-up (backup-buffer))
@end example

You might wish to save the file modes value returned by
@code{backup-buffer} and use that to set the mode bits of the file that
you write.  This is what @code{basic-save-buffer} does when it writes a
file in the usual way.

Here is an example showing how to add an element to
@code{write-file-hooks} but avoid adding it twice:

@example
@group
(or (memq 'my-write-file-hook write-file-hooks)
    (setq write-file-hooks 
          (cons
          'my-write-file-hook write-file-hooks)))
@end group
@end example
@end defvar

@c Emacs 19 feature
@defvar local-write-file-hooks
This works just like @code{write-file-hooks}, but it is intended
to be made local to particular buffers.  It's not a good idea to make
@code{write-file-hooks} local to a buffer---use this variable instead.

The variable is marked as a permanent local, so that changing the major
mode does not alter a buffer-local value.  This is convenient for
packages that read ``file'' contents in special ways, and set up hooks
to save the data in a corresponding way.
@end defvar

@c Emacs 19 feature
@defvar write-contents-hooks
This works just like @code{write-file-hooks}, but it is intended to be
used for hooks that pertain to the contents of the file, as opposed to
hooks that pertain to where the file came from.
@end defvar

@c Emacs 19 feature
@defvar after-save-hook
This normal hook runs after a buffer has been saved in its visited file.
@end defvar

@defvar file-precious-flag
  If this variable is non-@code{nil}, then @code{save-buffer} protects
against I/O errors while saving by writing the new file to a temporary
name instead of the name it is supposed to have, and then renaming it to
the intended name after it is clear there are no errors.  This procedure
prevents problems such as a lack of disk space from resulting in an
invalid file.

(This feature worked differently in older Emacs versions.)

Some modes set this non-@code{nil} locally in particular buffers.
@end defvar

@defopt require-final-newline
  This variable determines whether files may be written out that do
@emph{not} end with a newline.  If the value of the variable is
@code{t}, then Emacs silently puts a newline at the end of the file
whenever the buffer being saved does not already end in one.  If the
value of the variable is non-@code{nil}, but not @code{t}, then Emacs
asks the user whether to add a newline each time the case arises.

  If the value of the variable is @code{nil}, then Emacs doesn't add
newlines at all.  @code{nil} is the default value, but a few major modes
set it to @code{t} in particular buffers.
@end defopt

@node Reading from Files
@comment  node-name,  next,  previous,  up
@section Reading from Files

  You can copy a file from the disk and insert it into a buffer
using the @code{insert-file-contents} function.  Don't use the user-level
command @code{insert-file} in a Lisp program, as that sets the mark.

@defun insert-file-contents filename &optional visit beg end
  This function inserts the contents of file @var{filename} into the
current buffer after point. It returns a list of the absolute file name
and the length of the data inserted.  An error is signaled if
@var{filename} is not the name of a file that can be read.

  If @var{visit} is non-@code{nil}, it also marks the buffer as
unmodified and sets up various fields in the buffer so that it is
visiting the file @var{filename}: these include the buffer's visited
file name and its last save file modtime.  This feature is used by
@code{find-file-noselect} and you should probably not use it yourself.

  If @var{beg} and @var{end} are non-@code{nil}, they should be integers
specifying the portion of the file to insert.  In this case, @var{visit}
must be @code{nil}.  For example,

@example
(insert-file-contents filename nil 0 500)
@end example

@noindent
inserts the first 500 characters of a file.
@end defun

  If you want to pass a file name to another process so that another
program can read the file, see the function @code{file-local-copy} in
@ref{Magic File Names}.

@node Writing to Files
@comment  node-name,  next,  previous,  up
@section Writing to Files

  You can write the contents of a buffer, or part of a buffer, directly
to a file on disk using the @code{append-to-file} and
@code{write-region} functions.  Don't use these functions to write to
files that are being visited; that could cause confusion in the
mechanisms for visiting.

@deffn Command append-to-file start end filename
  This function appends the contents of the region delimited by
@var{start} and @var{end} in the current buffer to the end of file
@var{filename}.  If that file does not exist, it is created.  This
function returns @code{nil}.

  An error is signaled if @var{filename} specifies a nonwritable file,
or a nonexistent file in a directory where files cannot be created.
@end deffn

@deffn Command write-region start end filename &optional append visit
This function writes the region (of the current buffer) delimited by
@var{start} and @var{end} into the file specified by @var{filename}.

@c Emacs 19 feature
If @var{start} is a string, then @code{write-region} writes or appends
that string, rather than text from the buffer.

If @var{append} is non-@code{nil}, then the region is appended to the
existing file contents (if any).

If @var{visit} is @code{t}, then Emacs establishes an association
between the buffer and the file: the buffer is then visiting that file.
It also sets the last file modification time for the current buffer to
@var{filename}'s modtime, and marks the buffer as not modified.  This
feature is used by @code{write-file} and you should probably not use it
yourself.

@c Emacs 19 feature
If @var{visit} is a string, it specifies the file name to visit.  This
way, you can write the data to one file (@var{filename}) while recording
the buffer as visiting another file (@var{visit}).  The argument
@var{visit} is used in the echo area message and also for file locking;
@var{visit} is stored in @code{buffer-file-name}.  This feature is used
to implement @code{file-precious-flag}; don't use it yourself unless you
really know what you're doing.

Normally, @code{write-region} displays a message @samp{Wrote file
@var{filename}} in the echo area.  If @var{visit} is neither @code{t}
nor @code{nil} nor a string, then this message is inhibited.  This
feature is useful for programs that use files for internal purposes,
files which the user does not need to know about.
@end deffn

@node File Locks
@section File Locks
@cindex file locks

  When two users edit the same file at the same time, they are likely to
interfere with each other.  Emacs tries to prevent this situation from
arising by recording a @dfn{file lock} when a file is being modified.
Emacs can then detect the first attempt to modify a buffer visiting a
file that is locked by another Emacs job, and ask the user what to do.

  File locks do not work properly when multiple machines can share
file systems, such as with NFS.  Perhaps a better file locking system
will be implemented in the future.  When file locks do not work, it is
possible for two users to make changes simultaneously, but Emacs can
still warn the user who saves second.  Also, the detection of
modification of a buffer visiting a file changed on disk catches some
cases of simultaneous editing; see @ref{Modification Time}.

@c Not optional in FSF Emacs 19
@defun file-locked-p &optional filename
  This function returns @code{nil} if the file @var{filename} is not
locked by this Emacs process.  It returns @code{t} if it is locked by
this Emacs, and it returns the name of the user who has locked it if it
is locked by someone else.

@example
@group
(file-locked-p "foo")
     @result{} nil
@end group
@end example
@end defun

@defun lock-buffer &optional filename
  This function locks the file @var{filename}, if the current buffer is
modified.  The argument @var{filename} defaults to the current buffer's
visited file.  Nothing is done if the current buffer is not visiting a
file, or is not modified.
@end defun

@defun unlock-buffer
This function unlocks the file being visited in the current buffer,
if the buffer is modified.  If the buffer is not modified, then
the file should not be locked, so this function does nothing.  It also
does nothing if the current buffer is not visiting a file.
@end defun

@defun ask-user-about-lock file other-user
This function is called when the user tries to modify @var{file}, but it
is locked by another user name @var{other-user}.  The value it returns
tells Emacs what to do next:

@itemize @bullet
@item
A value of @code{t} tells Emacs to grab the lock on the file.  Then
this user may edit the file and @var{other-user} loses the lock.

@item
A value of @code{nil} tells Emacs to ignore the lock and let this
user edit the file anyway.

@item
@kindex file-locked
This function may instead signal a @code{file-locked} error, in which
case the change to the buffer which the user was about to make does not
take place.

The error message for this error looks like this:

@example
@error{} File is locked: @var{file} @var{other-user}
@end example

@noindent
where @code{file} is the name of the file and @var{other-user} is the
name of the user who has locked the file.
@end itemize

  The default definition of this function asks the user to choose what
to do.  If you wish, you can replace the @code{ask-user-about-lock}
function with your own version that decides in another way.  The code
for its usual definition is in @file{userlock.el}.
@end defun

@node Information about Files
@section Information about Files

  The functions described in this section are similar in as much as
they all operate on strings which are interpreted as file names.  All
have names that begin with the word @samp{file}.  These functions all
return information about actual files or directories, so their
arguments must all exist as actual files or directories unless
otherwise noted.

  Most of the file-oriented functions take a single argument,
@var{filename}, which must be a string.  The file name is expanded using
@code{expand-file-name}, so @file{~} is handled correctly, as are
relative file names (including @samp{../}).  Environment variable
substitutions, such as @samp{$HOME}, are not recognized by these
functions.  @xref{File Name Expansion}.

@menu
* Testing Accessibility::   Is a given file readable?  Writable?
* Kinds of Files::          Is it a directory?  A symbolic link?
* Truenames::		    Eliminating symbolic links from a file name.
* File Attributes::         How large is it?  Any other names?  Etc.
@end menu

@node Testing Accessibility
@comment  node-name,  next,  previous,  up
@subsection Testing Accessibility
@cindex accessibility of a file
@cindex file accessibility

  These functions test for permission to access a file in specific ways.

@defun file-exists-p filename
  This function returns @code{t} if a file named @var{filename} appears
to exist.  This does not mean you can necessarily read the file, only
that you can find out its attributes.  (On Unix, this is true if the
file exists and you have execute permission on the containing
directories, regardless of the protection of the file itself.)

  If the file does not exist, or if fascist access control policies
prevent you from finding the attributes of the file, this function
returns @code{nil}.
@end defun

@defun file-readable-p filename
  This function returns @code{t} if a file named @var{filename} exists
and you can read it.  It returns @code{nil} otherwise.

@example
@group
(file-readable-p "files.texi")
     @result{} t
@end group
@group
(file-exists-p "/usr/spool/mqueue")
     @result{} t
@end group
@group
(file-readable-p "/usr/spool/mqueue")
     @result{} nil
@end group
@end example
@end defun

@c Emacs 19 feature
@defun file-executable-p filename
  This function returns @code{t} if a file named @var{filename} exists
and you can execute it.  It returns @code{nil} otherwise.  If the file
is a directory, execute permission means you can access files inside
the directory.
@end defun

@defun file-writable-p filename
  This function returns @code{t} if @var{filename} can be written or
created by you.  It is writable if the file exists and you can write it.
It is creatable if the file does not exist, but the specified directory
does exist and you can write in that directory.  @code{file-writable-p}
returns @code{nil} otherwise.

  In the third example below, @file{foo} is not writable because the parent
directory does not exist, even though the user could create it.

@example
@group
(file-writable-p "~rms/foo")
     @result{} t
@end group
@group
(file-writable-p "/foo")
     @result{} nil
@end group
@group
(file-writable-p "~rms/no-such-dir/foo")
     @result{} nil
@end group
@end example
@end defun

@c Emacs 19 feature
@defun file-accessible-directory-p dirname
This function returns @code{t} if you have permission to open existing
files in directory @var{dirname}; otherwise (and if there is no such
directory), it returns @code{nil}.  The value of @var{dirname} may be
either a directory name or the file name of a directory.

Example: after the following,

@example
(file-accessible-directory-p "/foo")
     @result{} nil
@end example

@noindent
we can deduce that any attempt to read a file in @file{/foo/} will
give an error.
@end defun

@defun file-newer-than-file-p filename1 filename2
@cindex file age
@cindex file modification time
  This functions returns @code{t} if the file @var{filename1} is
newer than file @var{filename2}.  If @var{filename1} does not
exist, it returns @code{nil}.  If @var{filename2} does not exist,
it returns @code{t}.

  You can use @code{file-attributes} to get a file's last modification
time as a list of two numbers.  @xref{File Attributes}.

  In the following example, assume that the file @file{aug-19} was
written on the 19th, and @file{aug-20} was written on the 20th.  The
file @file{no-file} doesn't exist at all.

@example
@group
(file-newer-than-file-p "aug-19" "aug-20")
     @result{} nil
@end group
@group
(file-newer-than-file-p "aug-20" "aug-19")
     @result{} t
@end group
@group
(file-newer-than-file-p "aug-19" "no-file")
     @result{} t
@end group
@group
(file-newer-than-file-p "no-file" "aug-19")
     @result{} nil
@end group
@end example
@end defun

@node Kinds of Files
@comment  node-name,  next,  previous,  up
@subsection Distinguishing Kinds of Files

  This section describes how to distinguish directories and symbolic
links from ordinary files.

@defun file-symlink-p filename
@cindex file symbolic links
  If @var{filename} is a symbolic link, the @code{file-symlink-p}
function returns the file name to which it is linked.  This may be the
name of a text file, a directory, or even another symbolic link, or of
no file at all.

  If @var{filename} is not a symbolic link (or there is no such file),
@code{file-symlink-p} returns @code{nil}.  

@example
@group
(file-symlink-p "foo")
     @result{} nil
@end group
@group
(file-symlink-p "sym-link")
     @result{} "foo"
@end group
@group
(file-symlink-p "sym-link2")
     @result{} "sym-link"
@end group
@group
(file-symlink-p "/bin")
     @result{} "/pub/bin"
@end group
@end example

@c !!! file-symlink-p: should show output of ls -l for comparison
@end defun

@defun file-directory-p filename
  This function returns @code{t} if @var{filename} is the name of an
existing directory, @code{nil} otherwise.

@example
@group
(file-directory-p "~rms")
     @result{} t
@end group
@group
(file-directory-p "~rms/lewis/files.texi")
     @result{} nil
@end group
@group
(file-directory-p "~rms/lewis/no-such-file")
     @result{} nil
@end group
@group
(file-directory-p "$HOME")
     @result{} nil
@end group
@group
(file-directory-p
 (substitute-in-file-name "$HOME"))
     @result{} t
@end group
@end example
@end defun

@node Truenames
@subsection Truenames
@cindex truename (of file)

@c Emacs 19 features
  The @dfn{truename} of a file is the name that you get by following
symbolic links until none remain, then expanding to get rid of @samp{.}
and @samp{..} as components.  Strictly speaking, a file need not have a
unique truename; the number of distinct truenames a file has is equal to
the number of hard links to the file.  However, truenames are useful
because they eliminate symbolic links as a cause of name variation.

@defun file-truename filename &optional default
The function @code{file-truename} returns the true name of the file
@var{filename}.  This is the name that you get by following symbolic
links until none remain.

@c Lucid Emacs allows relative filenames
If the filename is relative, @var{default} is the directory to start
with.  If @var{default} is @code{nil} or missing, the current buffer's
value of @code{default-directory} is used.
@end defun

  @xref{Buffer File Name}, for related information.

@node File Attributes
@comment  node-name,  next,  previous,  up
@subsection Other Information about Files

  This section describes the functions for getting detailed information
about a file, other than its contents.  This information includes the
mode bits that control access permission, the owner and group numbers,
the number of names, the inode number, the size, and the times of access
and modification.

@defun file-modes filename
@cindex permission
@cindex file attributes
  This function returns the mode bits of @var{filename}, as an integer.
The mode bits are also called the file permissions, and they specify
access control in the usual Unix fashion.  If the low-order bit is 1,
then the file is executable by all users, if the second lowest-order bit
is 1, then the file is writable by all users, etc.

  The highest value returnable is 4095 (7777 octal), meaning that
everyone has read, write, and execute permission, that the @sc{suid} bit
is set for both others and group, and that the sticky bit is set.

@example
@group
(file-modes "~/junk/diffs")
     @result{} 492               ; @r{Decimal integer.}
@end group
@group
(format "%o" 492)
     @result{} 754               ; @r{Convert to octal.}
@end group

@group
(set-file-modes "~/junk/diffs" 438)
     @result{} nil
@end group

@group
(format "%o" 438)
     @result{} 666               ; @r{Convert to octal.}
@end group

@group
% ls -l diffs
  -rw-rw-rw-  1 lewis 0 3063 Oct 30 16:00 diffs
@end group
@end example
@end defun

@defun file-nlinks filename
  This functions returns the number of names (i.e., hard links) that
file @var{filename} has.  If the file does not exist, then this function
returns @code{nil}.  Note that symbolic links have no effect on this
function, because they are not considered to be names of the files they
link to.

@example
@group
% ls -l foo*
-rw-rw-rw-  2 rms       4 Aug 19 01:27 foo
-rw-rw-rw-  2 rms       4 Aug 19 01:27 foo1
@end group

@group
(file-nlinks "foo")
     @result{} 2
@end group
@group
(file-nlinks "doesnt-exist")
     @result{} nil
@end group
@end example
@end defun

@defun file-attributes filename
  This function returns a list of attributes of file @var{filename}.  If
the specified file cannot be opened, it returns @code{nil}.

  The elements of the list, in order, are:

@enumerate 0
@item
@code{t} for a directory, a string for a symbolic link (the name
linked to), or @code{nil} for a text file.

@c Wordy so as to prevent an overfull hbox.  --rjc 15mar92
@item
The number of names the file has.  Alternate names, also known as hard
links, can be created by using the @code{add-name-to-file} function
(@pxref{Changing File Attributes}).

@item
The file's @sc{uid}.

@item
The file's @sc{gid}.

@item
The time of last access, as a list of two integers.
The first integer has the high-order 16 bits of time,
the second has the low 16 bits.  (This is similar to the
value of @code{current-time}; see @ref{Time of Day}.)

@item
The time of last modification as a list of two integers (as above).

@item
The time of last status change as a list of two integers (as above).

@item
The size of the file in bytes.

@item
The file's modes, as a string of ten letters or dashes
as in @samp{ls -l}.

@item
@code{t} if the file's @sc{gid} would change if file were
deleted and recreated; @code{nil} otherwise.

@item
The file's inode number.

@item
The file system number of the file system that the file is in.  This
element together with the file's inode number, give enough information
to distinguish any two files on the system---no two files can have the
same values for both of these numbers.
@end enumerate

For example, here are the file attributes for @file{files.texi}:

@example
@group
(file-attributes "files.texi")
     @result{}  (nil 
          1 
          2235 
          75 
          (8489 20284) 
          (8489 20284) 
          (8489 20285)
          14906 
          "-rw-rw-rw-" 
          nil 
          129500
          -32252)
@end group
@end example

@noindent
and here is how the result is interpreted:

@table @code
@item nil
is neither a directory nor a symbolic link.

@item 1
has only one name (the name @file{files.texi} in the current default
directory).

@item 2235
is owned by the user with @sc{uid} 2235.

@item 75
is in the group with @sc{gid} 75.

@item (8489 20284)
was last accessed on Aug 19 00:09.  Unfortunately, you cannot convert
this number into a time string in Emacs.

@item (8489 20284)
was last modified on Aug 19 00:09.

@item (8489 20285)
last had its inode changed on Aug 19 00:09.

@item 14906
is 14906 characters long.

@item "-rw-rw-rw-"
has a mode of read and write access for the owner, group, and world.

@item nil
would retain the same @sc{gid} if it were recreated.

@item 129500
has an inode number of 129500.
@item -32252
is on file system number -32252.
@end table
@end defun

@node Contents of Directories
@section Contents of Directories
@cindex directory-oriented functions
@cindex file names in directory

  A directory is a kind of file that contains other files entered under
various names.  Directories are a feature of the file system.

  Emacs can list the names of the files in a directory as a Lisp list,
or display the names in a buffer using the @code{ls} shell command.  In
the latter case, it can optionally display information about each file,
depending on the value of switches passed to the @code{ls} command.

@defun directory-files directory &optional full-name match-regexp nosort files-only
This function returns a list of the names of the files in the directory
@var{directory}.  By default, the list is in alphabetical order.

If @var{full-name} is non-@code{nil}, the function returns the files'
absolute file names.  Otherwise, it returns just the names relative to
the specified directory.

If @var{match-regexp} is non-@code{nil}, this function returns only
those file names that contain that regular expression---the other file
names are discarded from the list.

@c Emacs 19 feature
If @var{nosort} is non-@code{nil}, that inhibits sorting the list, so
you get the file names in no particular order.  Use this if you want the
utmost possible speed and don't care what order the files are processed
in.  If the order of processing is visible to the user, then the user
will probably be happier if you do sort the names.

@c Lucid Emacs feature
If @var{files-only} is the symbol @code{t}, then only the ``files'' in
the directory will be returned; subdirectories will be excluded.  If
@var{files-only} is not @code{nil} and not @code{t}, then only the
subdirectories will be returned.  Otherwise, if @var{files-only} is
@code{nil} (the default) then both files and subdirectories will be
returned.

@example
@group
(directory-files "~lewis")
     @result{} ("#foo#" "#foo.el#" "." ".."
         "dired-mods.el" "files.texi" 
         "files.texi.~1~")
@end group
@end example

  An error is signaled if @var{directory} is not the name of a directory
that can be read.
@end defun

@ignore  @c Not in Lucid Emacs
@defun file-name-all-versions file dirname
  This function returns a list of all versions of the file named
@var{file} in directory @var{dirname}.
@end defun
@end ignore

@defun insert-directory file switches &optional wildcard full-directory-p
This function inserts a directory listing for directory @var{dir},
formatted according to @var{switches}.  It leaves point after the
inserted text.

The argument @var{dir} may be either a directory name or a file
specification including wildcard characters.  If @var{wildcard} is
non-@code{nil}, that means treat @var{file} as a file specification with
wildcards.

If @var{full-directory-p} is non-@code{nil}, that means @var{file} is a
directory and switches do not contain @samp{d}, so that a full listing
is expected.

This function works by running a directory listing program whose name is
in the variable @code{insert-directory-program}.  If @var{wildcard} is
non-@code{nil}, it also runs the shell specified by
@code{shell-file-name}, to expand the wildcards.
@end defun

@defvar insert-directory-program
This variable's value is the program to run to generate a directory listing
for the function @code{insert-directory}.
@end defvar

@node Create/Delete Dirs
@section Creating and Deleting Directories

@c Emacs 19 features

@deffn Command make-directory dirname &optional parents
This function creates a directory named @var{dirname}.  Interactively,
the default choice of directory to create is the current default
directory for file names.  That is useful when you have visited a file
in a nonexistent directory.

@c Lucid Emacs feature
Non-interactively, optional argument @var{parents} says whether to
create parent directories if they don't exist. (Interactively, this
always happens.)
@end deffn

@deffn Command delete-directory dirname
This function deletes the directory named @var{dirname}.  The function
@code{delete-file} does not work for files that are directories; you
must use @code{delete-directory} in that case.
@end deffn

@node Changing File Attributes
@section Changing File Names and Attributes
@cindex renaming files
@cindex copying files
@cindex deleting files
@cindex linking files
@cindex setting modes of files

  The functions in this section rename, copy, delete, link, and set the
modes of files.

  In the functions that have an argument @var{newname}, if a file by the
name of @var{newname} already exists, the actions taken depend on the
value of the argument @var{ok-if-already-exists}:

@itemize @bullet
@item
A @code{file-already-exists} error is signaled if
@var{ok-if-already-exists} is @code{nil}.

@item
Confirmation is requested if @var{ok-if-already-exists} is a number.

@item
No confirmation is requested if @var{ok-if-already-exists} is any other
value, in which case the old file is removed.
@end itemize

@deffn Command add-name-to-file oldname newname &optional ok-if-already-exists
@cindex file with multiple names
@cindex file hard link
  This function gives the file named @var{oldname} the additional name
@var{newname}.  This means that @var{newname} becomes a new ``hard
link'' to @var{oldname}.

  In the first part of the following example, we list two files,
@file{foo} and @file{foo3}.

@example
@group
% ls -l fo*
-rw-rw-rw-  1 rms       29 Aug 18 20:32 foo
-rw-rw-rw-  1 rms       24 Aug 18 20:31 foo3
@end group
@end example

Then we evaluate the form @code{(add-name-to-file "~/lewis/foo"
"~/lewis/foo2")}.  Again we list the files.  This shows two names,
@file{foo} and @file{foo2}.

@example
@group
(add-name-to-file "~/lewis/foo1" "~/lewis/foo2")
     @result{} nil
@end group

@group
% ls -l fo*
-rw-rw-rw-  2 rms       29 Aug 18 20:32 foo
-rw-rw-rw-  2 rms       29 Aug 18 20:32 foo2
-rw-rw-rw-  1 rms       24 Aug 18 20:31 foo3
@end group
@end example

@c !!! Check whether this set of examples is consistent.  --rjc 15mar92
  Finally, we evaluate the following:

@example
(add-name-to-file "~/lewis/foo" "~/lewis/foo3" t)
@end example

@noindent
and list the files again.  Now there are three names
for one file: @file{foo}, @file{foo2}, and @file{foo3}.  The old
contents of @file{foo3} are lost.

@example
@group
(add-name-to-file "~/lewis/foo1" "~/lewis/foo3")
     @result{} nil
@end group

@group
% ls -l fo*
-rw-rw-rw-  3 rms       29 Aug 18 20:32 foo
-rw-rw-rw-  3 rms       29 Aug 18 20:32 foo2
-rw-rw-rw-  3 rms       29 Aug 18 20:32 foo3
@end group
@end example

  This function is meaningless on VMS, where multiple names for one file
are not allowed.

  See also @code{file-nlinks} in @ref{File Attributes}.
@end deffn

@deffn Command rename-file filename newname &optional ok-if-already-exists
This command renames the file @var{filename} as @var{newname}.

If @var{filename} has additional names aside from @var{filename}, it
continues to have those names.  In fact, adding the name @var{newname}
with @code{add-name-to-file} and then deleting @var{filename} has the
same effect as renaming, aside from momentary intermediate states.

  In an interactive call, this function prompts for @var{filename} and
@var{newname} in the minibuffer; also, it requests confirmation if
@var{newname} already exists.
@end deffn

@deffn Command copy-file oldname newname &optional ok-if-exists time
  This command copies the file @var{oldname} to @var{newname}.  An
error is signaled if @var{oldname} does not exist.

  If @var{time} is non-@code{nil}, then this functions gives the new
file the same last-modified time that the old one has.  (This works on
only some operating systems.)

  In an interactive call, this function prompts for @var{filename} and
@var{newname} in the minibuffer; also, it requests confirmation if
@var{newname} already exists.
@end deffn

@deffn Command delete-file filename
@pindex rm
  This command deletes the file @var{filename}, like the shell command
@samp{rm @var{filename}}.  If the file has multiple names, it continues
to exist under the other names.

  A suitable kind of @code{file-error} error is signaled if the file
does not exist, or is not deletable.  (In Unix, a file is deletable if
its directory is writable.)

See also @code{delete-directory} in @ref{Create/Delete Dirs}.
@end deffn

@deffn Command make-symbolic-link filename newname  &optional ok-if-exists
@pindex ln
@kindex file-already-exists
  This command makes a symbolic link to @var{filename}, named
@var{newname}.  This is like the shell command @samp{ln -s
@var{filename} @var{newname}}.

  In an interactive call, @var{filename} and @var{newname} are read in
the minibuffer, and @var{ok-if-exists} is set to the numeric prefix
argument.
@end deffn

@defun define-logical-name varname string
  This function defines the logical name @var{name} to have the value
@var{string}.  It is available only on VMS.
@end defun

@defun set-file-modes filename mode
  This function sets mode bits of @var{filename} to @var{mode} (which must
be an integer).  Only the 12 low bits of @var{mode} are used.
@end defun

@c Emacs 19 feature
@defun set-default-file-modes mode
This function sets the default file protection for new files created by
Emacs and its subprocesses.  Every file created with Emacs initially has
this protection.  On Unix, the default protection is the bitwise
complement of the ``umask'' value.

The argument @var{mode} must be an integer.  Only the 9 low bits of
@var{mode} are used.

Saving a modified version of an existing file does not count as creating
the file; it does not change the file's mode, and does not use the
default file protection.
@end defun

@defun default-file-modes
This function returns the current default protection value.
@end defun

@node File Names
@section File Names
@cindex file names

  Files are generally referred to by their names, in Emacs as elsewhere.
File names in Emacs are represented as strings.  The functions that
operate on a file all expect a file name argument.

  In addition to operating on files themselves, Emacs Lisp programs
often need to operate on the names; i.e., to take them apart and to use
part of a name to construct related file names.  This section describes
how to manipulate file names.

  The functions in this section do not actually access files, so they
can operate on file names that do not refer to an existing file or
directory.

  On VMS, all these functions understand both VMS file name syntax and
Unix syntax.  This is so that all the standard Lisp libraries can
specify file names in Unix syntax and work properly on VMS without
change.

@menu
* File Name Components::  The directory part of a file name, and the rest.
* Directory Names::       A directory's name as a directory
                            is different from its name as a file.
* Relative File Names::   Some file names are relative to a current directory.
* File Name Expansion::   Converting relative file names to absolute ones.
* Unique File Names::     Generating names for temporary files.
* File Name Completion::  Finding the completions for a given file name.
@end menu

@node File Name Components
@subsection File Name Components
@cindex directory part (of file name)
@cindex nondirectory part (of file name)
@cindex version number (in file name)

  The operating system groups files into directories.  To specify a
file, you must specify the directory, and the file's name in that
directory.  Therefore, a file name in Emacs is considered to have two
main parts: the @dfn{directory name} part, and the @dfn{nondirectory}
part (or @dfn{file name within the directory}).  Either part may be
empty.  Concatenating these two parts reproduces the original file name.

  On Unix, the directory part is everything up to and including the last
slash; the nondirectory part is the rest.  The rules in VMS syntax are
complicated.

  For some purposes, the nondirectory part is further subdivided into
the name proper and the @dfn{version number}.  On Unix, only backup
files have version numbers in their names; on VMS, every file has a
version number, but most of the time the file name actually used in
Emacs omits the version number.  Version numbers are found mostly in
directory lists.

@defun file-name-directory filename
  This function returns the directory part of @var{filename} (or
@code{nil} if @var{filename} does not include a directory part).  On
Unix, the function returns a string ending in a slash.  On VMS, it
returns a string ending in one of the three characters @samp{:},
@samp{]}, or @samp{>}.

@example
@group
(file-name-directory "lewis/foo")  ; @r{Unix example}
     @result{} "lewis/"
@end group
@group
(file-name-directory "foo")        ; @r{Unix example}
     @result{} nil
@end group
@group
(file-name-directory "[X]FOO.TMP") ; @r{VMS example}
     @result{} "[X]"
@end group
@end example
@end defun

@defun file-name-nondirectory filename
  This function returns the nondirectory part of @var{filename}.

@example
@group
(file-name-nondirectory "lewis/foo")
     @result{} "foo"
@end group
@group
(file-name-nondirectory "foo")
     @result{} "foo"
@end group
@group
;; @r{The following example is accurate only on VMS.}
(file-name-nondirectory "[X]FOO.TMP")
     @result{} "FOO.TMP"
@end group
@end example
@end defun

@defun file-name-sans-versions filename &optional keep-backup-version
  This function returns @var{filename} without any file version numbers,
backup version numbers, or trailing tildes.

@c Lucid Emacs feature?
If @var{keep-backup-version} is non-@code{nil}, we do not remove backup
version numbers, only true file version numbers.

@example
@group
(file-name-sans-versions "~rms/foo.~1~")
     @result{} "~rms/foo"
@end group
@group
(file-name-sans-versions "~rms/foo~")
     @result{} "~rms/foo"
@end group
@group
(file-name-sans-versions "~rms/foo")
     @result{} "~rms/foo"
@end group
@group
;; @r{The following example applies to VMS only.}
(file-name-sans-versions "foo;23")
     @result{} "foo"
@end group
@end example
@end defun

@node Directory Names
@comment  node-name,  next,  previous,  up
@subsection Directory Names
@cindex directory name
@cindex file name of directory

  A @dfn{directory name} is the name of a directory.  A directory is a
kind of file, and it has a file name, which is related to the directory
name but not identical to it.  (This is not quite the same as the usual
Unix terminology.)  These two different names for the same entity are
related by a syntactic transformation.  On Unix, this is simple: a
directory name ends in a slash, whereas the directory's name as a file
lacks that slash.  On VMS, the relationship is more complicated.

  The difference between a directory name and its name as a file is
subtle but crucial.  When an Emacs variable or function argument is
described as being a directory name, a file name of a directory is not
acceptable.

  These two functions take a single argument, @var{filename}, which must
be a string.  Environment variable substitutions such as @samp{$HOME},
and the symbols @samp{~}, and @samp{..}, are @emph{not} expanded.  Use
@code{expand-file-name} or @code{substitute-in-file-name} for that
(@pxref{File Name Expansion}).

@defun file-name-as-directory filename
  This function returns a string representing @var{filename} in a form
that the operating system will interpret as the name of a directory.  In
Unix, this means that a slash is appended to the string.  On VMS, the
function converts a string of the form @file{[X]Y.DIR.1} to the form
@file{[X.Y]}.

@example
@group
(file-name-as-directory "~rms/lewis")
     @result{} "~rms/lewis/"
@end group
@end example
@end defun

@defun directory-file-name dirname
  This function returns a string representing @var{dirname} in a form
that the operating system will interpret as the name of a file.  On
Unix, this means removing a final slash from the string.  On VMS, the
function converts a string of the form @file{[X.Y]} to
@file{[X]Y.DIR.1}.

@example
@group
(directory-file-name "~lewis/")
     @result{} "~lewis"
@end group
@end example
@end defun

@cindex directory name abbreviation
  Directory name abbreviations are useful for directories that are
normally accessed through symbolic links.  Sometimes the users recognize
primarily the link's name as ``the name'' of the directory, and find it
annoying to see the directory's ``real'' name.  If you define the link
name as an abbreviation for the ``real'' name, Emacs shows users the
abbreviation instead.

  If you wish to convert a directory name to its abbreviation, use this
function:

@defun abbreviate-file-name dirname &optional hack-homedir
This function applies abbreviations from @code{directory-abbrev-alist}
to its argument, and substitutes @samp{~} for the user's home
directory.

@c Lucid Emacs feature?
If @var{hack-homedir} is non-@code{nil}, then this also substitutes
@samp{~} for the user's home directory.

@end defun

@defvar directory-abbrev-alist
The variable @code{directory-abbrev-alist} contains an alist of
abbreviations to use for file directories.  Each element has the form
@code{(@var{from} . @var{to})}, and says to replace @var{from} with
@var{to} when it appears in a directory name.  The @var{from} string is
actually a regular expression; it should always start with @samp{^}.
The function @code{abbreviate-file-name} performs these substitutions.

You can set this variable in @file{site-init.el} to describe the
abbreviations appropriate for your site.

Here's an example, from a system on which file system @file{/home/fsf}
and so on are normally accessed through symbolic links named @file{/fsf}
and so on.

@example
(("^/home/fsf" . "/fsf")
 ("^/home/gp" . "/gp")
 ("^/home/gd" . "/gd"))
@end example
@end defvar

@node Relative File Names
@subsection Absolute and Relative File Names
@cindex absolute file name
@cindex relative file name

  All the directories in the file system form a tree starting at the
root directory.  A file name can specify all the directory names
starting from the root of the tree; then it is called an @dfn{absolute}
file name.  Or it can specify the position of the file in the tree
relative to a default directory; then it is called an @dfn{relative}
file name.  On Unix, an absolute file name starts with a slash or a
tilde (@samp{~}), and a relative one does not.  The rules on VMS are
complicated.

@defun file-name-absolute-p filename
  This function returns @code{t} if file @var{filename} is an absolute
file name, @code{nil} otherwise.  On VMS, this function understands both
Unix syntax and VMS syntax.

@example
@group
(file-name-absolute-p "~rms/foo")
     @result{} t
@end group
@group
(file-name-absolute-p "rms/foo")
     @result{} nil
@end group
@group
(file-name-absolute-p "/user/rms/foo")
     @result{} t
@end group
@end example
@end defun

@node File Name Expansion
@subsection Functions that Expand Filenames
@cindex expansion of file names

  @dfn{Expansion} of a file name means converting a relative file name
to an absolute one.  Since this is done relative to a default directory,
you must specify the default directory name as well as the file name to
be expanded.  Expansion also simplifies file names by eliminating
redundancies such as @file{./} and @file{@var{name}/../}.

@defun expand-file-name filename &optional directory
  This function converts @var{filename} to an absolute file name.  If
@var{directory} is supplied, it is the directory to start with if
@var{filename} is relative.  (The value of @var{directory} should itself
be an absolute, expanded file name; it should not start with @samp{~}.)
Otherwise, the current buffer's value of @code{default-directory} is
used.  For example:

@example
@group
(expand-file-name "foo")
     @result{} "/xcssun/users/rms/lewis/foo"
@end group
@group
(expand-file-name "../foo")
     @result{} "/xcssun/users/rms/foo"
@end group
@group
(expand-file-name "foo" "/usr/spool/")
     @result{} "/usr/spool/foo"
@end group
@group
(expand-file-name "$HOME/foo")
     @result{} "/xcssun/users/rms/lewis/$HOME/foo"
@end group
@end example

  Filenames containing @samp{.} or @samp{..} are simplified to their
canonical form:

@example
@group
(expand-file-name "bar/../foo")
     @result{} "/xcssun/users/rms/lewis/foo"
@end group
@end example

  @samp{~/} is expanded into the user's home directory.  A @samp{/} or
@samp{~} following a @samp{/} is taken to be the start of an absolute
file name that overrides what precedes it, so everything before that
@samp{/} or @samp{~} is deleted.  For example:

@example
@group
(expand-file-name 
 "/a1/gnu//usr/local/lib/emacs/etc/MACHINES")
     @result{} "/usr/local/lib/emacs/etc/MACHINES"
@end group
@group
(expand-file-name "/a1/gnu/~/foo")
     @result{} "/xcssun/users/rms/foo"
@end group
@end example

@noindent
In both cases, @file{/a1/gnu/} is discarded because an absolute file
name follows it.

  Note that @code{expand-file-name} does @emph{not} expand environment
variables; that is done only by @code{substitute-in-file-name}.
@end defun

@c Emacs 19 feature
@defun file-relative-name filename &optional directory
This function does the inverse of expansion---it tries to return a
relative name which is equivalent to @var{filename} when interpreted
relative to @var{directory}.  (If such a relative name would be longer
than the absolute name, it returns the absolute name instead.)

@c Lucid Emacs feature?
If @var{directory} is @code{nil} or omitted, the value of
@code{default-directory} is used.

@example
(file-relative-name "/foo/bar" "/foo/")
     @result{} "bar")
(file-relative-name "/foo/bar" "/hack/")
     @result{} "/foo/bar")
@end example
@end defun

@defvar default-directory
  The value of this buffer-local variable is the default directory for
the current buffer.  It is local in every buffer.
@code{expand-file-name} uses the default directory when its second
argument is @code{nil}.

  On Unix systems, the value is always a string ending with a slash.

@example
@group
default-directory
     @result{} "/user/lewis/manual/"
@end group
@end example
@end defvar

@defun substitute-in-file-name filename
  This function replaces environment variables names in @var{filename}
with the values to which they are set by the operating system.
Following standard Unix shell syntax, @samp{$} is the prefix to
substitute an environment variable value.

  The environment variable name is the series of alphanumeric characters
(including underscores) that follow the @samp{$}.  If the character following
the @samp{$} is a @samp{@{}, then the variable name is everything up to the
matching @samp{@}}.

@c Wordy to avoid overfull hbox.  --rjc 15mar92
Here we assume that the environment variable @code{HOME}, which holds
the user's home directory name, has value @samp{/xcssun/users/rms}.

@example
@group
(substitute-in-file-name "$HOME/foo")
     @result{} "/xcssun/users/rms/foo"
@end group
@end example

If a @samp{~} or a @samp{/} appears following a @samp{/}, after
substitution, everything before the following @samp{/} is discarded:

@example
@group
(substitute-in-file-name "bar/~/foo")
     @result{} "~/foo"
@end group
@group
(substitute-in-file-name "/usr/local/$HOME/foo")
     @result{} "/xcssun/users/rms/foo"
@end group
@end example

On VMS, @samp{$} substitution is not done, so this function does nothing
on VMS except discard superfluous initial components as shown above.
@end defun

@node Unique File Names
@subsection Generating Unique File Names

  Some programs need to write temporary files.  Here is the usual way to
construct a name for such a file:

@example
(make-temp-name (concat "/tmp/" @var{name-of-application}))
@end example

@noindent
Here we use the directory @file{/tmp/} because that is the standard
place on Unix for temporary files.  The job of @code{make-temp-name} is
to prevent two different users or two different jobs from trying to use
the same name.

@defun make-temp-name string
This function generates string that can be used as a unique name.  The
name starts with the prefix @var{string}, and ends with a number that
is different in each Emacs job.

@example
@group
(make-temp-name "/tmp/foo")
     @result{} "/tmp/foo021304"
@end group
@end example

To prevent conflicts among different application libraries run in the
same Emacs, each application should have its own @var{string}.  The
number added to the end of the name distinguishes between the same
application running in different Emacs jobs.
@end defun

@node File Name Completion
@subsection File Name Completion
@cindex file name completion subroutines
@cindex completion, file name

  This section describes low-level subroutines for completing a file
name.  For other completion functions, see @ref{Completion}.

@defun file-name-all-completions partial-filename directory
  This function returns a list of all possible completions for a file
whose name starts with @var{partial-filename} in directory
@var{directory}.  The order of the completions is the order of the files
in the directory, which is unpredictable and conveys no useful
information.

  The argument @var{partial-filename} must be a file name containing no
directory part and no slash.  The current buffer's default directory is
prepended to @var{directory}, if @var{directory} is not an absolute file
name.

  In the following example, suppose that the current default directory,
@file{~rms/lewis}, has five files whose names begin with @samp{f}:
@file{foo}, @file{file~}, @file{file.c}, @file{file.c.~1~}, and
@file{file.c.~2~}.@refill

@example
@group
(file-name-all-completions "f" "")
     @result{} ("foo" "file~" "file.c.~2~" 
                "file.c.~1~" "file.c")
@end group

@group
(file-name-all-completions "fo" "")  
     @result{} ("foo")
@end group
@end example
@end defun

@defun file-name-completion filename directory
  This function completes the file name @var{filename} in directory
@var{directory}.  It returns the longest prefix common to all file names
in directory @var{directory} that start with @var{filename}.

  If only one match exists and @var{filename} matches it exactly, the
function returns @code{t}.  The function returns @code{nil} if directory
@var{directory} contains no name starting with @var{filename}.

  In the following example, suppose that the current default directory
has five files whose names begin with @samp{f}: @file{foo},
@file{file~}, @file{file.c}, @file{file.c.~1~}, and
@file{file.c.~2~}.@refill

@example
@group
(file-name-completion "fi" "")
     @result{} "file"
@end group

@group
(file-name-completion "file.c.~1" "")
     @result{} "file.c.~1~"
@end group

@group
(file-name-completion "file.c.~1~" "")
     @result{} t
@end group

@group
(file-name-completion "file.c.~3" "")
     @result{} nil
@end group
@end example
@end defun

@defopt completion-ignored-extensions
  @code{file-name-completion} usually ignores file names that end in any
string in this list.  It does not ignore them when all the possible
completions end in one of these suffixes or when a buffer showing all
possible completions is displayed.@refill

  A typical value might look like this:

@example
@group
completion-ignored-extensions
     @result{} (".o" ".elc" "~" ".dvi")
@end group
@end example
@end defopt

@node Magic File Names
@section Making Certain File Names ``Magic''
@cindex magic file names

@c Emacs 19 feature
You can implement special handling for certain file names.  This is
called making those names @dfn{magic}.  You must supply a regular
expression to define the class of names (all those which match the
regular expression), plus a handler that implements all the primitive
Emacs file operations for file names that do match.

The value of @code{file-name-handler-alist} is a list of handlers,
together with regular expressions that decide when to apply each
handler.  Each element has this form:

@example
(@var{regexp} . @var{handler})
@end example

@noindent
All the Emacs primitives for file access and file name transformation
check the given file name against @code{file-name-handler-alist}.  If
the file name matches @var{regexp}, the primitives handle that file by
calling @var{handler}.

The first argument given to @var{handler} is the name of the primitive;
the remaining arguments are the arguments that were passed to that
operation.  (The first of these arguments is typically the file name
itself.)  For example, if you do this:

@example
(file-exists-p @var{filename})
@end example

@noindent
and @var{filename} has handler @var{handler}, then @var{handler} is
called like this:

@example
(funcall @var{handler} 'file-exists-p @var{filename})
@end example

Here are the operations that you can handle for a magic file name:

@flushleft
@code{add-name-to-file}, @code{copy-file}, @code{delete-directory},
@code{delete-file}, @code{directory-file-name}, @code{directory-files},
@code{dired-compress-file}, @code{dired-uncache},
@code{expand-file-name}, @code{file-accessible-directory-p},
@code{file-attributes}, @code{file-directory-p},
@code{file-executable-p}, @code{file-exists-p}, @code{file-local-copy},
@code{file-modes}, @code{file-name-all-completions},
@code{file-name-as-directory}, @code{file-name-completion},
@code{file-name-directory}, @code{file-name-nondirectory},
@code{file-name-sans-versions}, @code{file-newer-than-file-p},
@code{file-readable-p}, @code{file-symlink-p}, @code{file-writable-p},
@code{insert-directory}, @code{insert-file-contents}, @code{load},
@code{make-directory}, @code{make-symbolic-link}, @code{rename-file},
@code{set-file-modes}, @code{set-visited-file-modtime},
@code{unhandled-file-name-directory},
@code{verify-visited-file-modtime}, @code{write-region}.
@end flushleft

The handler function must handle all of the above operations, and
possibly others to be added in the future.  Therefore, it should always
reinvoke the ordinary Lisp primitive when it receives an operation it
does not recognize.  Here's one way to do this:

@smallexample
(defun my-file-handler (operation &rest args)
  ;; @r{First check for the specific operations}
  ;; @r{that we have special handling for.}
  (cond ((eq operation 'insert-file-contents) @dots{})
        ((eq operation 'write-region) @dots{})
        @dots{}
        ;; @r{Handle any operation we don't know about.}
        (t (let (file-name-handler-alist)
             (apply operation args)))))
@end smallexample

@defun find-file-name-handler file
This function returns the handler function for file name @var{file}, or
@code{nil} if there is none.
@end defun

@defun file-local-copy filename
This function copies file @var{filename} to the local site, if it isn't
there already.  If @var{filename} specifies a ``magic'' file name which
programs outside Emacs cannot directly read or write, this copies the
contents to an ordinary file and returns that file's name.

If @var{filename} is an ordinary file name, not magic, then this function
does nothing and returns @code{nil}.
@end defun

@defun unhandled-file-name-directory filename
This function returns the name of a directory that is not magic.
It uses the directory part of @var{filename} if that is not magic.
Otherwise, it asks the handler what to do.

This is used for running a subprocess; any subprocess must have a
non-magic directory to serve as its current directory.
@end defun

@node Partial Files
@section Partial Files
@cindex partial files

@menu
* Intro to Partial Files::
* Creating a Partial File::
* Detached Partial Files::
@end menu

@node Intro to Partial Files, Creating a Partial File, Partial Files, Partial Files
@subsection Intro to Partial Files

A @dfn{partial file} is a section of a buffer (called the @dfn{master
buffer}) that is placed in its own buffer and treated as its own file.
Changes made to the partial file are not reflected in the master buffer
until the partial file is ``saved'' using the standard buffer save
commands.  Partial files can be ``reverted'' (from the master buffer)
just like normal files.  When a file part is active on a master buffer,
that section of the master buffer is marked as read-only.  Two file
parts on the same master buffer are not allowed to overlap.  Partial
file buffers are indicated by the words @samp{File Part} in the
modeline.

The master buffer knows about all the partial files that are active on
it, and thus killing or reverting the master buffer will be handled
properly.  When the master buffer is saved, if there are any unsaved
partial files active on it then the user will be given the opportunity
to first save these files.

When a partial file buffer is first modified, the master buffer is
automatically marked as modified so that saving the master buffer will
work correctly.

@node Creating a Partial File, Detached Partial Files, Intro to Partial Files, Partial Files
@subsection Creating a Partial File

@defun make-file-part &optional start end name buffer
Make a file part on buffer @var{buffer} out of the region.  Call it
@var{name}.  This command creates a new buffer containing the contents
of the region and marks the buffer as referring to the specified buffer,
called the @dfn{master buffer}.  When the file-part buffer is saved, its
changes are integrated back into the master buffer.  When the master
buffer is deleted, all file parts are deleted with it.

When called from a function, expects four arguments, @var{start},
@var{end}, @var{name}, and @var{buffer}, all of which are optional and
default to the beginning of @var{buffer}, the end of @var{buffer}, a
name generated from @var{buffer} name, and the current buffer,
respectively.
@end defun

@node Detached Partial Files, , Creating a Partial File, Partial Files
@subsection Detached Partial Files

Every partial file has an extent in the master buffer associated with it
(called the @dfn{master extent}), marking where in the master buffer the
partial file begins and ends.  If the text in master buffer that is
contained by the extent is deleted, then the extent becomes
``detached'', meaning that it no longer refers to a specific region of
the master buffer.  This can happen either when the text is deleted
directly or when the master buffer is reverted.  Neither of these should
happen in normal usage because the master buffer should generally not be
edited directly.

Before doing any operation that references a partial file's master
extent, Emacs checks to make sure that the extent is not detached.  If
this is the case, Emacs warns the user of this and the master extent is
deleted out of the master buffer, disconnecting the file part.  The file
part's filename is cleared and thus must be explicitly specified if the
detached file part is to be saved.
