@c -*-texinfo-*-
@c This is part of the GNU Emacs Lisp Reference Manual.
@c Copyright (C) 1990, 1991, 1992, 1993 Free Software Foundation, Inc. 
@c See the file lispref.texinfo for copying conditions.
@setfilename ../../info/os.info
@node System Interface, X-Windows, Processes, Top
@chapter Operating System Interface

  This chapter is about starting and getting out of Emacs, access to
values in the operating system environment, and terminal input, output
and flow control.

  @xref{Building Emacs}, for related information.  See also
@ref{Display}, for additional operating system status information
pertaining to the terminal and the screen.

@menu
* Starting Up::         Customizing Emacs start-up processing.
* Getting Out::         How exiting works (permanent or temporary).
* System Environment::  Distinguish the name and kind of system.
* User Identification:: Finding the name and user id of the user.
* Time of Day::		Getting the current time.
* Timers::		Setting a timer to call a function at a certain time.
* Terminal Input::      Recording terminal input for debugging.
* Terminal Output::     Recording terminal output for debugging.
* Flow Control::        How to turn output flow control on or off.
* Batch Mode::          Running Emacs without terminal interaction.
@end menu

@node Starting Up
@section Starting Up Emacs

  This section describes what Emacs does when it is started, and how you
can customize these actions.

@menu
* Start-up Summary::        Sequence of actions Emacs performs at start-up.
* Init File::               Details on reading the init file (@file{.emacs}).
* Terminal-Specific::       How the terminal-specific Lisp file is read.
* Command Line Arguments::  How command line arguments are processed,
                              and how you can customize them.
@end menu

@node Start-up Summary
@subsection Summary: Sequence of Actions at Start Up
@cindex initialization
@cindex start up of Emacs
@cindex @file{startup.el}

   The order of operations performed (in @file{startup.el}) by Emacs when
it is started up is as follows:

@enumerate
@item
It runs the normal hook @code{before-init-hook}.

@item
It loads @file{site-start.el}, unless the option @samp{-no-site-file} was
specified.

@item 
It loads @file{.emacs} unless @samp{-q} was specified on command line.
(This is not done in @samp{-batch} mode.)  @file{.emacs} is found in the
user's home directory; the @samp{-u} option can specify the user name
whose home directory should be used.

@item 
It loads @file{default.el} unless @code{inhibit-default-init} is
non-@code{nil}.  (This is not done in @samp{-batch} mode or if @samp{-q}
was specified on command line.)
@cindex @file{default.el}

@item
It runs the normal hook @code{after-init-hook}.

@item 
It loads the terminal-specific Lisp file, if any, except when in batch
mode.

@item 
It runs @code{term-setup-hook}.

@item 
It runs @code{window-setup-hook}.  @xref{Window Systems}.

@item 
It displays copyleft and nonwarranty, plus basic use information, unless
the value of the variable @code{inhibit-startup-message} is non-@code{nil}.

This display is also inhibited in batch mode, and if the current buffer
is not @samp{*scratch*}.

@item 
It processes any remaining command line arguments.
@end enumerate

@defopt inhibit-startup-message
  This variable inhibits the initial startup messages (the nonwarranty,
etc.).  If it is non-@code{nil}, then the messages are not printed.

  This variable exists so you can set it in your personal init file,
once you are familiar with the contents of the startup message.  Do not
set this variable in the init file of a new user, or in a way that
affects more than one user, because that would prevent new users from
receiving the information they are supposed to see.
@end defopt

@node Init File
@subsection The Init File: @file{.emacs}
@cindex init file
@cindex @file{.emacs}

  When you start Emacs, it normally attempts to load the file
@file{.emacs} from your home directory.  This file, if it exists, must
contain Lisp code.  It is called your @dfn{init file}.  The command line
switches @samp{-q} and @samp{-u} can be used to control the use of the
init file; @samp{-q} says not to load an init file, and @samp{-u} says
to load a specified user's init file instead of yours.  @xref{Entering
Emacs, , , emacs, The GNU Emacs Manual}.

@cindex default init file
  Emacs may also have a @dfn{default init file}, which is the library
named @file{default.el}.  Emacs finds the @file{default.el} file through
the standard search path for libraries (@pxref{How Programs Do
Loading}).  The Emacs distribution does not have any such file; you may
create one at your site for local customizations.  If the default init
file exists, it is loaded whenever you start Emacs, except in batch mode
or if @samp{-q} is specified.  But your own personal init file, if any,
is loaded first; if it sets @code{inhibit-default-init} to a
non-@code{nil} value, then Emacs will not subsequently load the
@file{default.el} file.

  If there is a great deal of code in your @file{.emacs} file, you
should move it into another file named @file{@var{something}.el},
byte-compile it (@pxref{Byte Compilation}), and make your @file{.emacs}
file load the other file using @code{load} (@pxref{Loading}).

  @xref{Init File Examples, , , emacs, The GNU Emacs Manual}, for
examples of how to make various commonly desired customizations in your
@file{.emacs} file.

@defopt inhibit-default-init
  This variable prevents Emacs from loading the default initialization
library file for your session of Emacs.  If its value is non-@code{nil},
then the default library is not loaded.  The default value is
@code{nil}.
@end defopt

@defvar before-init-hook
@defvarx after-init-hook
These two normal hooks are run just before, and just after, loading of
the user's init file or @file{default.el}.
@end defvar

@node Terminal-Specific
@subsection Terminal-Specific Initialization
@cindex terminal-specific initialization

  Each terminal type can have its own Lisp library that Emacs loads when
run on that type of terminal.  For a terminal type named @var{termtype},
the library is called @file{term/@var{termtype}}.  Emacs finds the file
by searching the @code{load-path} directories as it does for other
files, and trying the @samp{.elc} and @samp{.el} suffixes.  Normally,
terminal-specific Lisp library is located in @file{emacs/lisp/term}, a
subdirectory of the @file{emacs/lisp} directory in which most Emacs Lisp
libraries are kept.@refill

  The library's name is constructed by concatenating the value of the
variable @code{term-file-prefix} and the terminal type.  Normally,
@code{term-file-prefix} has the value @code{"term/"}; changing this
is not recommended.

@cindex function keys
  The usual function of a terminal-specific library is to enable special
keys to send sequences that Emacs can recognize.  It may also need to
set or add to @code{function-key-map} if the Termcap entry does not
fully explain what should go in it.  @xref{Terminal Input}.

@cindex Termcap
  When the name of the terminal type contains a hyphen, only the part of
the name before the first hyphen is significant in choosing the library
name.  Thus, terminal types @samp{aaa-48} and @samp{aaa-30-rv} both use
the @file{term/aaa} library.  If necessary, the library can evaluate
@code{(getenv "TERM")} to find the full name of the terminal
type.@refill

  Your @file{.emacs} file can prevent the loading of the
terminal-specific library by setting the variable
@code{term-file-prefix} to @code{nil}.  This feature is very useful when
experimenting with your own peculiar customizations.

  You can also arrange to override some of the actions of the
terminal-specific library by setting the variable
@code{term-setup-hook}.  This is a normal hook which Emacs runs using
@code{run-hooks} at the end of Emacs initialization, after loading both
your @file{.emacs} file and any terminal-specific libraries.  You can
use this variable to define initializations for terminals that do not
have their own libraries.  @xref{Hooks}.

@defvar term-file-prefix
@cindex @code{TERM} environment variable
  If the @code{term-file-prefix} variable is non-@code{nil}, Emacs loads
a terminal-specific initialization file as follows:

@example
(load (concat term-file-prefix (getenv "TERM")))
@end example

@noindent
You may set the @code{term-file-prefix} variable to @code{nil} in your
@file{.emacs} file if you do not wish to load the
terminal-initialization file.  To do this, put the following in
your @file{.emacs} file: @code{(setq term-file-prefix nil)}.
@end defvar

@defvar term-setup-hook 
This variable is a normal hook which Emacs runs after loading your
@file{.emacs} file, the default initialization file (if any) and after
loading terminal-specific Lisp files.
arguments.

  You can use @code{term-setup-hook} to override the definitions made by
a terminal-specific file.
@end defvar

  See @code{window-setup-hook} in @ref{Window Systems}, for a related
feature.

@node Command Line Arguments
@subsection Command Line Arguments
@cindex command line arguments

  You can use command line arguments to request various actions when you
start Emacs.  Since you do not need to start Emacs more than once per
day, and will often leave your Emacs session running longer than that,
command line arguments are hardly ever used.  As a practical matter, it
is best to avoid making the habit of using them, since this habit would
encourage you to kill and restart Emacs unnecessarily often.  These
options exist for two reasons: to be compatible with other editors (for
invocation by other programs) and to enable shell scripts to run
specific Lisp programs.

@ignore
  (Note that some other editors require you to start afresh each time
you want to edit a file.  With this kind of editor, you will probably
specify the file as a command line argument.  The recommended way to
use GNU Emacs is to start it only once, just after you log in, and do
all your editing in the same Emacs process.  Each time you want to edit
a different file, you visit it with the existing Emacs, which eventually
comes to have many files in it ready for editing.  Usually you do not
kill the Emacs until you are about to log out.)
@end ignore

@defun command-line
  This function parses the command line which Emacs was called with,
processes it, loads the user's @file{.emacs} file and displays the
initial nonwarranty information, etc.
@end defun

@defvar command-line-processed
  The value of this variable is @code{t} once the command line has been
processed.

If you redump Emacs by calling @code{dump-emacs}, you may wish to set
this variable to @code{nil} first in order to cause the new dumped Emacs
to process its new command line arguments.
@end defvar

@defvar command-switch-alist
@cindex switches on command line
@cindex options on command line
@cindex command line options
The value of this variable is an alist of user-defined command-line
options and associated handler functions.  This variable exists so you
can add elements to it.

A @dfn{command line option} is an argument on the command line of the
form:

@example
-@var{option}
@end example

The elements of the @code{command-switch-alist} look like this: 

@example
(@var{option} . @var{handler-function})
@end example

The @var{handler-function} is called to handle @var{option} and receives
the option name as its sole argument.

In some cases, the option is followed in the command line by an
argument.  In these cases, the @var{handler-function} can find all the
remaining command-line arguments in the variable
@code{command-line-args-left}.  (The entire list of command-line
arguments is in @code{command-line-args}.)

The command line arguments are parsed by the @code{command-line-1}
function in the @file{startup.el} file.  See also @ref{Command
Switches, , Command Line Switches and Arguments, emacs, The GNU Emacs
Manual}.
@end defvar

@defvar command-line-args
The value of this variable is the arguments passed by the shell to Emacs, as
a list of strings.
@end defvar

@node Getting Out
@section Getting out of Emacs
@cindex exiting Emacs

  There are two ways to get out of Emacs: you can kill the Emacs job,
which exits permanently, or you can suspend it, which permits you to
reenter the Emacs process later.  As a practical matter, you seldom kill
Emacs---only when you are about to log out.  Suspending is much more
common.

@menu
* Killing Emacs::        Exiting Emacs irreversibly.
* Suspending Emacs::     Exiting Emacs reversibly.
@end menu

@node Killing Emacs
@comment  node-name,  next,  previous,  up
@subsection Killing Emacs
@cindex killing Emacs

  Killing Emacs means ending the execution of the Emacs process.  The parent
process normally resumes control.

  All the information in the Emacs process, aside from files that have
been saved, is lost when the Emacs is killed.  Because killing Emacs
inadvertently can lose a lot of work, Emacs queries for confirmation
before actually terminating if you have buffers that need saving or
subprocesses that are running.

@defun kill-emacs &optional no-query
  This function exits the Emacs process and kills it.

  Normally, if there are modified files or if there are running
processes, @code{kill-emacs} asks the user for confirmation before
exiting.  However, if @var{no-query} is supplied and non-@code{nil},
then Emacs exits without confirmation.

  If @var{no-query} is an integer, then it is used as the exit status of
the Emacs process.  (This is useful primarily in batch operation; see
@ref{Batch Mode}.)

  If @var{no-query} is a string, its contents are stuffed into the
terminal input buffer so that the shell (or whatever program next reads
input) can read them.
@end defun

@defvar kill-emacs-hook
This variable is a normal hook (a list of functions); the first thing
@code{kill-emacs} does is to run this hook with @code{run-hooks}.  That
calls each of the functions in the list, with no arguments.
@end defvar

@node Suspending Emacs
@subsection Suspending Emacs
@cindex suspending Emacs

  @dfn{Suspending Emacs} means stopping Emacs temporarily and returning
control to its superior process, which is usually the shell.  This
allows you to resume editing later in the same Emacs process, with the
same buffers, the same kill ring, the same undo history, and so on.  To
resume Emacs, use the appropriate command in the parent shell---most
likely @code{fg}.

  Some operating systems do not support suspension of jobs; on these
systems, ``suspension'' actually creates a new shell temporarily as a
subprocess of Emacs.  Then you would exit the shell to return to Emacs.

  Suspension is not useful with window systems such as X, because the
Emacs job may not have a parent that can resume it again, and in any
case you can give input to some other job such as a shell merely by
moving to a different window.  Therefore, suspending is not allowed
when Emacs is an X client.

@defun suspend-emacs string
  This function stops Emacs and returns to the superior process.  It
returns @code{nil}.

  If @var{string} is non-@code{nil}, its characters are sent to be read
as terminal input by Emacs's superior shell.  The characters in
@var{string} are not echoed by the superior shell; only the results
appear.

  Before suspending, @code{suspend-emacs} runs the normal hook
@code{suspend-hook}.  In Emacs version 18, @code{suspend-hook} was not a
normal hook; its value was a single function, and if its value was
non-@code{nil}, then @code{suspend-emacs} returned immediately without
actually suspending anything.

  After the user resumes Emacs, it runs the normal hook
@code{suspend-resume-hook} using @code{run-hooks}.  @xref{Hooks}.

  The next redisplay after resumption will redraw the entire screen,
unless the variable @code{no-redraw-on-reenter} is non-@code{nil}
(@pxref{Refresh Screen}).

  In the following example, note that @samp{pwd} is not echoed after
Emacs is suspended.  But it is read and executed by the shell.

@smallexample
@group
(suspend-emacs)
     @result{} nil
@end group

@group
(add-hook 'suspend-hook
          (function (lambda ()
                      (or (y-or-n-p
                            "Really suspend? ")
                          (error "Suspend cancelled")))))
     @result{} (lambda nil
          (or (y-or-n-p "Really suspend? ")
              (error "Suspend cancelled")))
@end group
@group
(add-hook 'suspend-resume-hook
          (function (lambda () (message "Resumed!"))))
     @result{} (lambda nil (message "Resumed!"))
@end group
@group
(suspend-emacs "pwd")
     @result{} nil
@end group
@group
---------- Buffer: Minibuffer ----------
Really suspend? @kbd{y}
---------- Buffer: Minibuffer ----------
@end group

@group
---------- Parent Shell ----------
lewis@@slug[23] % /user/lewis/manual
lewis@@slug[24] % fg
@end group

@group
---------- Echo Area ----------
Resumed!
@end group
@end smallexample
@end defun

@defvar suspend-hook
This variable is a normal hook run before suspending.
@end defvar

@defvar suspend-resume-hook
This variable is a normal hook run after suspending.
@end defvar

@node System Environment
@section Operating System Environment
@cindex operating system environment

  Emacs provides access to variables in the operating system environment
through various functions.  These variables include the name of the
system, the user's @sc{uid}, and so on.

@defvar system-type
  The value of this variable is a symbol indicating the type of
operating system Emacs is operating on.  Here is a table of the symbols
for the operating systems that Emacs can run on up to version 19.1.

@table @code
@item aix-v3
AIX version 3.

@item berkeley-unix
Berkeley BSD 4.1, 4.2, or 4.3.

@item hpux
Hewlett-Packard operating system, version 5, 6, or 7.

@item irix
Silicon Graphics Irix system.

@item rtu
RTU 3.0, UCB universe.

@item unisoft-unix
UniSoft's UniPlus 5.0 or 5.2.

@item usg-unix-v
AT&T's System V.0, System V Release 2.0, 2.2, or 3.

@item vax-vms
VAX VMS version 4 or 5.

@item xenix
SCO Xenix 386 Release 2.2.
@end table

We do not wish to add new symbols to make finer distinctions unless it
is absolutely necessary!  In fact, it would be nice to eliminate some
of these alternatives in the future.
@end defvar

@defun system-name
   This function returns the name of the machine you are running on.
@example
(system-name)
     @result{} "prep.ai.mit.edu"
@end example
@end defun

@defun getenv var
@cindex environment variable access
  This function returns the value of the environment variable @var{var},
as a string.  If the variable @code{process-environment} specifies a
value for @var{var}, that overrides the actual environment.

@example
@group
(getenv "USER")
     @result{} "lewis"
@end group

@group
lewis@@slug[10] % printenv
PATH=.:/user/lewis/bin:/usr/bin:/usr/local/bin
USER=lewis
@end group
@group
TERM=ibmapa16
SHELL=/bin/csh
HOME=/user/lewis
@end group
@end example
@end defun

@c Emacs 19 feature
@deffn Command setenv variable value
This command sets the value of the environment variable named
@var{variable} to @var{value}.  Both arguments should be strings.  This
works by modifying @code{process-environment}; binding that variable
with @code{let} is also reasonable practice.
@end deffn

@defvar process-environment
This variable is a list of strings to append to the environment of
processes as they are created.  Each string assigns a value to a shell
environment variable.  (This applies both to asynchronous and
synchronous processes.)  The function @code{getenv} also looks at this
variable.

@smallexample
@group
process-environment
@result{} ("l=/usr/stanford/lib/gnuemacs/lisp"
    "PATH=.:/user/lewis/bin:/usr/class:/nfsusr/local/bin"
    "USER=lewis" 
@end group
@group
    "TERM=ibmapa16" 
    "SHELL=/bin/csh"
    "HOME=/user/lewis")
@end group
@end smallexample
@end defvar

@defun load-average
   This function returns the current 1 minute, 5 minute and 15 minute
load averages in a list.  The values are integers that are 100 times
the system load averages.  (The load averages indicate the number of
processes trying to run.)

@example
@group
(load-average)
     @result{} (169 48 36)
@end group

@group
lewis@@rocky[5] % uptime
 11:55am  up 1 day, 19:37,  3 users,
 load average: 1.69, 0.48, 0.36
@end group
@end example
@end defun

@defun setprv privilege-name &optional setp getprv
  This function sets or resets a VMS privilege.  (It does not exist on
Unix.)  The first arg is the privilege name, as a string.  The second
argument, @var{setp}, is @code{t} or @code{nil}, indicating whether the
privilege is to be turned on or off.  Its default is @code{nil}.  The
function returns @code{t} if success, @code{nil} if not.

  If the third argument, @var{getprv}, is non-@code{nil}, @code{setprv}
does not change the privilege, but returns @code{t} or @code{nil}
indicating whether the privilege is currently enabled.
@end defun

@node User Identification
@section User Identification

@defun user-login-name
  This function returns the name under which the user is logged in.
This is based on the effective @sc{uid}, not the real @sc{uid}.

@example
@group
(user-login-name)
     @result{} "lewis"
@end group
@end example
@end defun

@defun user-real-login-name
  This function returns the name under which the user logged in.
This is based on the real @sc{uid}, not the effective @sc{uid}.  This
differs from @code{user-login-name} only when running with the setuid
bit. 
@end defun

@defun user-full-name
This function returns the full name of the user.

@example
@group
(user-full-name)
     @result{} "Bil Lewis"
@end group
@end example
@end defun

@defun user-real-uid
  This function returns the real @sc{uid} of the user.

@example
@group
(user-real-uid)
     @result{} 19
@end group
@end example
@end defun

@defun user-uid
   This function returns the effective @sc{uid} of the user.  
@end defun

@node Time of Day
@section Time of Day

  This section explains how to determine the current time and the time
zone.

@defun current-time-string &optional time-value
   This function returns the current time and date as a humanly-readable
string.  The format of the string is unvarying; the number of characters
used for each part is always the same, so you can reliably use
@code{substring} to extract pieces of it.  However, it would be wise to
count the characters from the beginning of the string rather than from
the end, as additional information may be added at the end.

@c Emacs 19 feature
The argument @var{time-value}, if given, specifies a time to format
instead of the current time.  The argument should be a cons cell
containing two integers, or a list whose first two elements are
integers.  Thus, you can use times obtained from @code{current-time}
(see below) and from @code{file-attributes} (@pxref{File Attributes}).

@example
@group
(current-time-string)
     @result{} "Wed Oct 14 22:21:05 1987"
@end group
@end example
@end defun

@c Emacs 19 feature
@defun current-time
This function returns the system's time value as a list of three
integers: @code{(@var{high} @var{low} @var{microsec})}.  The integers
@var{high} and @var{low} combine to give the number of seconds since
0:00 January 1, 1970, which is @var{high} * 2**16 + @var{low}.

The third element, @var{microsec}, gives the microseconds since the
start of the current second (or 0 for systems that return time only on
the resolution of a second).

The first two elements can be compared with file time values such as you
get with the function @code{file-attributes}.  @xref{File Attributes}.
@end defun

@c Emacs 19 feature
@defun current-time-zone &optional time-value
This function returns a list describing the time zone that the user is
in.

The value has the form @code{(@var{offset} @var{name})}.  Here
@var{offset} is an integer giving the number of seconds ahead of UTC
(east of Greenwich).  A negative value means west of Greenwich.  The
second element, @var{name} is a string giving the name of the time
zone.  Both elements change when daylight savings time begins or ends;
if the user has specified a time zone that does not use a seasonal time
adjustment, then the value is constant through time.

If the operating system doesn't supply all the information necessary to
compute the value, both elements of the list are @code{nil}.

The argument @var{time-value}, if given, specifies a time to analyze
instead of the current time.  The argument should be a cons cell
containing two integers, or a list whose first two elements are
integers.  Thus, you can use times obtained from @code{current-time}
(see below) and from @code{file-attributes} (@pxref{File Attributes}).
@end defun

@node Timers
@section Timers

You can set up a timer to call a function at a specified future time.

@defun run-at-time time repeat function &rest args
This function arranges to call @var{function} with arguments @var{args}
at time @var{time}.  The argument @var{function} is a function to call
later, and @var{args} are the arguments to give it when it is called.
The time @var{time} is specified as a string.

Absolute times may be specified in a wide variety of formats; The form
@samp{@var{hour}:@var{min}:@var{sec} @var{timezone}
@var{month}/@var{day}/@var{year}}, where all fields are numbers, works;
the format that @code{current-time-string} returns is also allowed.

To specify a relative time, use numbers followed by units.
For example:

@table @samp
@item 1 min
denotes 1 minute from now.
@item 1 min 5 sec
denotes 65 seconds from now.
@item 1 min 2 sec 3 hour 4 day 5 week 6 fortnight 7 month 8 year
denotes exactly 103 months, 123 days, and 10862 seconds from now.
@end table

If @var{time} is an integer, that specifies a relative time measured in
seconds.

The argument @var{repeat} specifies how often to repeat the call.  If
@var{repeat} is @code{nil}, there are no repetitions; @var{function} is
called just once, at @var{time}.  If @var{repeat} is an integer, it
specifies a repetition period measured in seconds.
@end defun

@defun cancel-timer timer
Cancel the requested action for @var{timer}, which should be a value
previously returned by @code{run-at-time}.  This cancels the effect of
that call to @code{run-at-time}; the arrival of the specified time will
not cause anything special to happen.
@end defun

@node Terminal Input
@section Terminal Input
@cindex terminal input

  This section describes functions and variables for recording or
manipulating terminal input.  See @ref{Display}, for related
functions.

@menu
* Input Modes::		Options for how input is processed.
* Translating Input::   Low level conversion of some characters or events
			  into others.
* Recording Input::	Saving histories of recent or all input events.
@end menu

@node Input Modes
@subsection Input Modes
@cindex input modes
@cindex terminal input modes

@defun set-input-mode interrupt flow meta quit-char
  This function sets the mode for reading keyboard input.  If
@var{interrupt} is non-null, then Emacs uses input interrupts.  If it is
@code{nil}, then it uses @sc{cbreak} mode.

  If @var{flow} is non-@code{nil}, then Emacs uses @sc{xon/xoff} (@kbd{C-q},
@kbd{C-s}) flow control for output to terminal.  This has no effect except
in @sc{cbreak} mode.  @xref{Flow Control}.

  The normal setting is system dependent.  Some systems always use
@sc{cbreak} mode regardless of what is specified.

@c Emacs 19 feature
  The argument @var{meta} controls support for input character codes
above 127.  If @var{meta} is @code{t}, Emacs converts characters with
the 8th bit set into Meta characters.  If @var{meta} is @code{nil},
Emacs disregards the 8th bit; this is necessary when the terminal uses
it as a parity bit.  If @var{meta} is neither @code{t} nor @code{nil},
Emacs uses all 8 bits of input unchanged.  This is good for terminals
using European 8-bit character sets.

@c Emacs 19 feature
  If @var{quit-char} is non-@code{nil}, it specifies the character to
use for quitting.  Normally this character is @kbd{C-g}.
@xref{Quitting}.
@end defun

The @code{current-input-mode} function returns the input mode settings
Emacs is currently using.

@c Emacs 19 feature
@defun current-input-mode
  This function returns current mode for reading keyboard input.  It
returns a list, corresponding to the arguments of @code{set-input-mode},
of the form @code{(@var{INTERRUPT} @var{FLOW} @var{META} @var{QUIT})} in
which:
@table @var
@item INTERRUPT
is non-@code{nil} when Emacs is using interrupt-driven input.  If
@code{nil}, Emacs is using @sc{cbreak} mode.
@item FLOW
is non-@code{nil} if Emacs uses @sc{xon/xoff} (@kbd{C-q}, @kbd{C-s})
flow control for output to the terminal.  This value has no effect
unless @var{INTERRUPT} is non-@code{nil}.
@item META
is non-@code{nil} if Emacs is paying attention to the eighth bit of
input characters; if nil, Emacs clears the eighth bit of every input
character.
@item QUIT
is the character Emacs currently uses for quitting, usually @kbd{C-g}.
@end table
@end defun

@defvar meta-flag
  This variable used to control whether to treat the 0200 bit in
keyboard input as the @key{Meta} bit.  @code{nil} meant no, and anything
else meant yes.  This variable existed in Emacs versions 18 and earlier
but no longer exists in Emacs 19; use @code{set-input-mode} instead.
@end defvar

@node Translating Input
@subsection Translating Input Events

@c Emacs 19 feature
@defvar extra-keyboard-modifiers
This variable lets Lisp programs ``press'' the modifier keys on the
keyboard.  The value is a bit mask:

@table @asis
@item 1
The @key{SHIFT} key.
@item 2
The @key{LOCK} key.
@item 4
The @key{CTL} key.
@item 8
The @key{META} key.
@end table

Each time the user types a keyboard key, it is altered as if the
modifier keys specified in the bit mask were held down.

When you use X windows, the program can ``press'' any of the modifier
keys in this way.  Otherwise, only the @key{CTL} and @key{META} keys can
be virtually pressed.
@end defvar

@defvar keyboard-translate-table
  This variable is the translate table for keyboard characters.  It lets
you reshuffle the keys on the keyboard without changing any command
bindings.  Its value must be a string or @code{nil}.

  If @code{keyboard-translate-table} is a string, then each character read
from the keyboard is looked up in this string and the character in the
string is used instead.  If the string is of length @var{n}, character codes
@var{n} and up are untranslated.

  In the example below, we set @code{keyboard-translate-table} to a
string of 128 characters.  Then we fill it in to swap the characters
@kbd{C-s} and @kbd{C-\} and the characters @kbd{C-q} and @kbd{C-^}.
Subsequently, typing @kbd{C-\} has all the usual effects of typing
@kbd{C-s}, and vice versa.  (@xref{Flow Control} for more information on
this subject.)

@cindex flow control example
@example
@group
(defun evade-flow-control ()
  "Replace C-s with C-\ and C-q with C-^."
  (interactive)
  (let ((the-table (make-string 128 0)))
    (let ((i 0))
      (while (< i 128)
        (aset the-table i i)
        (setq i (1+ i))))
@end group

@group
    ;; @r{Swap @kbd{C-s} and @kbd{C-\}.}
    (aset the-table ?\034 ?\^s)
    (aset the-table ?\^s ?\034)
    ;; @r{Swap @kbd{C-q} and @kbd{C-^}.}
    (aset the-table ?\036 ?\^q)
    (aset the-table ?\^q ?\036)

    (setq keyboard-translate-table the-table)))
@end group
@end example

Note that this translation is the first thing that happens to a
character after it is read from the terminal.  Record-keeping features
such as @code{recent-keys} and dribble files record the characters after
translation.
@end defvar

@defun keyboard-translate from to
This function modifies @code{keyboard-translate-table} to translate
character code @var{from} into character code @var{to}.  It creates
or enlarges the translate table if necessary.
@end defun

@defvar function-key-map
This variable holds a keymap which describes the character sequences
sent by function keys on an ordinary character terminal.  This keymap
uses the data structure as other keymaps, but is used differently: it
specifies translations to make while reading events.

If @code{function-key-map} ``binds'' a key sequence @var{k} to a vector
@var{v}, then when @var{k} appears as a subsequence @emph{anywhere} in a
key sequence, it is replaced with the events in @var{v}.

For example, VT100 terminals send @kbd{@key{ESC} O P} when the
keypad PF1 key is pressed.  Therefore, we want Emacs to translate
that sequence of events into the single event @code{pf1}.  We accomplish
this by ``binding'' @kbd{@key{ESC} O P} to @code{[pf1]} in
@code{function-key-map}, when using a VT100.

Thus, typing @kbd{C-c @key{PF1}} sends the character sequence @kbd{C-c
@key{ESC} O P}; later the function @code{read-key-sequence} translates
this back into @kbd{C-c @key{PF1}}, which it returns as the vector
@code{[?\C-c pf1]}.

Entries in @code{function-key-map} are ignored if they conflict with
bindings made in the minor mode, local, or global keymaps.  The intent
is that the character sequences that function keys send should not have
command bindings in their own right.

The value of @code{function-key-map} is usually set up automatically
according to the terminal's Terminfo or Termcap entry, but sometimes
those need help from terminal-specific Lisp files.  Emacs comes with a
number of terminal-specific files for many common terminals; their main
purpose is to make entries in @code{function-key-map} beyond those that
can be deduced from Termcap and Terminfo.  @xref{Terminal-Specific}.

Emacs versions 18 and earlier used totally different means of detecting
the character sequences that represent function keys.
@end defvar

@defvar key-translation-map
This variable is another keymap used just like @code{function-key-map}
to translate input events into other events.  It differs from
@code{function-key-map} in two ways:

@itemize @bullet
@item
@code{key-translation-map} goes to work after @code{function-key-map} is
finished; it receives the results of translation by
@code{function-key-map}.

@item
@code{key-translation-map} overrides actual key bindings.
@end itemize

The intent of @code{key-translation-map} is for users to map one
character set to another, including ordinary characters normally bound
to @code{self-insert-command}.
@end defvar

@node Recording Input
@subsection Recording Input

@defun recent-keys
This function returns a vector containing the last 100 input events
from the keyboard or mouse.  All input events are included, whether or
not they were used as parts of key sequences.  Thus, you always get the
last 100 inputs, not counting keyboard macros.  (Events from keyboard
macros are excluded because they are less interesting for debugging; it
should be enough to see the events which invoked the macros.)
@end defun

@deffn Command open-dribble-file  filename
@cindex dribble file
  This function opens a @dfn{dribble file} named @var{filename}.  When a
dribble file is open, each input event from the keyboard or mouse (but
not those from keyboard macros) are written in that file.  A
non-character event is expressed using its printed representation
surrounded by @samp{<@dots{}>}.

  You close the dribble file by calling this function with an argument
of @code{nil}.  The function always returns @code{nil}.

  This function is normally used to record the input necessary to
trigger an Emacs bug, for the sake of a bug report.

@example
@group
(open-dribble-file "~/dribble")
     @result{} nil
@end group
@end example
@end deffn

  See also the @code{open-termscript} function (@pxref{Terminal Output}).

@node Terminal Output
@section Terminal Output
@cindex terminal output

  The terminal output functions send output to the terminal or keep
track of output sent to the terminal.  The variable @code{baud-rate}
tells you what Emacs thinks is the output speed of the terminal.

@defvar baud-rate
This variable's value is the output speed of the terminal, as far as
Emacs knows.  Setting this variable does not change the speed of actual
data transmission, but the value is used for calculations such as
padding.  It also affects decisions about whether to scroll part of the
screen or repaint---even when using a window system, (We designed it
this way despite the fact that a window system has no true ``output
speed'', to give you a way to tune these decisions.)

The value is measured in baud.
@end defvar

  If you are running across a network, and different parts of the
network work at different baud rates, the value returned by Emacs may be
different from the value used by your local terminal.  Some network
protocols communicate the local terminal speed to the remote machine, so
that Emacs and other programs can get the proper value, but others do
not.  If Emacs has the wrong value, it makes decisions that are less
than optimal.  To fix the problem, set @code{baud-rate}.

@defun baud-rate
This function returns the value of the variable @code{baud-rate}.  In
Emacs versions 18 and earlier, this was the only way to find out the
terminal speed.
@end defun

@defun send-string-to-terminal string
  This function sends @var{string} to the terminal without alteration.
Control characters in @var{string} have terminal-dependent effects.

  One use of this function is to define function keys on terminals that
have downloadable function key definitions.  For example, this is how on
certain terminals to define function key 4 to move forward four
characters (by transmitting the characters @kbd{C-u C-f} to the
computer):

@example
@group
(send-string-to-terminal "\eF4\^U\^F")
     @result{} nil
@end group
@end example
@end defun

@deffn Command open-termscript filename
@cindex termscript file
  This function is used to open a @dfn{termscript file} that will record
all the characters sent by Emacs to the terminal.  It returns
@code{nil}.  Termscript files are useful for investigating problems
where Emacs garbles the screen, problems which are due to incorrect
Termcap entries or to undesirable settings of terminal options more
often than actual Emacs bugs.  Once you are certain which characters
were actually output, you can determine reliably whether they correspond
to the Termcap specifications in use.

  See also @code{open-dribble-file} in @ref{Terminal Input}.

@example
@group
(open-termscript "../junk/termscript")
     @result{} nil
@end group
@end example
@end deffn

@node Flow Control
@section Flow Control
@cindex flow control characters

  This section attempts to answer the question ``Why does Emacs choose
to use flow-control characters in its command character set?''  For a
second view on this issue, read the comments on flow control in the
@file{emacs/INSTALL} file from the distribution; for help with Termcap
entries and DEC terminal concentrators, see @file{emacs/etc/TERMS}.

@cindex @kbd{C-s}
@cindex @kbd{C-q}
  At one time, most terminals did not need flow control, and none used
@code{C-s} and @kbd{C-q} for flow control.  Therefore, the choice of
@kbd{C-s} and @kbd{C-q} as command characters was unobjectionable.
Emacs, for economy of keystrokes and portability, used nearly all the
@sc{ASCII} control characters, with mnemonic meanings when possible;
thus, @kbd{C-s} for search and @kbd{C-q} for quote.

  Later, some terminals were introduced which required these characters
for flow control.  They were not very good terminals for full-screen
editing, so Emacs maintainers did not pay attention.  In later years,
flow control with @kbd{C-s} and @kbd{C-q} became widespread among
terminals, but by this time it was usually an option.  And the majority
of users, who can turn flow control off, were unwilling to switch to
less mnemonic key bindings for the sake of flow control.

  So which usage is ``right'', Emacs's or that of some terminal and
concentrator manufacturers?  This is a rhetorical (or religious)
question; it has no simple answer.

  One reason why we are reluctant to cater to the problems caused by
@kbd{C-s} and @kbd{C-q} is that they are gratuitous.  There are other
techniques (albeit less common in practice) for flow control that
preserve transparency of the character stream.  Note also that their use
for flow control is not an official standard.  Interestingly, on the
model 33 teletype with a paper tape punch (which is very old), @kbd{C-s}
and @kbd{C-q} were sent by the computer to turn the punch on and off!

  GNU Emacs version 19 provides a convenient way of enabling flow
control if you want it: call the function @code{enable-flow-control}.

@defun enable-flow-control
This function enables use of @kbd{C-s} and @kbd{C-q} for output flow
control, and provides the characters @kbd{C-\} and @kbd{C-^} as aliases
for them using @code{keyboard-translate-table} (@pxref{Translating Input}).
@end defun

You can use the function @code{enable-flow-control-on} in your
@file{.emacs} file to enable flow control automatically on certain
terminal types.

@defun enable-flow-control-on &rest termtypes
This function enables flow control, and the aliases @kbd{C-\} and @kbd{C-^},
if the terminal type is one of @var{termtypes}.  For example:

@smallexample
(enable-flow-control-on "vt200" "vt300" "vt101" "vt131")
@end smallexample
@end defun

  Here is how @code{enable-flow-control} does its job:

@enumerate
@item
@cindex @sc{cbreak}
It sets @sc{cbreak} mode for terminal input, and tells the kernel to
handle flow control, with @code{(set-input-mode nil t)}.

@item
It sets up @code{keyboard-translate-table} to translate @kbd{C-\} and
@kbd{C-^} into @kbd{C-s} and @kbd{C-q} were typed.  Except at its very
lowest level, Emacs never knows that the characters typed were anything
but @kbd{C-s} and @kbd{C-q}, so you can in effect type them as @kbd{C-\}
and @kbd{C-^} even when they are input for other commands.  For example:

@smallexample
@group
(setq keyboard-translate-table (make-string 128 0))
(let ((i 0))
  ;; @r{Map most characters into themselves.}
  (while (< i 128)
    (aset keyboard-translate-table i i)
    (setq i (1+ i))))
@end group
@group
  ;; @r{Map @kbd{C-\} to @kbd{C-s}.}
  (aset the-table ?\034 ?\^s)
@end group
@group
  ;; @r{Map @kbd{C-^} to @kbd{C-q}.}
  (aset the-table ?\036 ?\^q)))
@end group
@end smallexample
@end enumerate

If the terminal is the source of the flow control characters, then once
you enable kernel flow control handling, you probably can make do with
less padding than normal for that terminal.  You can reduce the amount
of padding by customizing the Termcap entry.  You can also reduce it by
setting @code{baud-rate} to a smaller value so that Emacs uses a smaller
speed when calculating the padding needed.  @xref{Terminal Output}.

@node Batch Mode
@section Batch Mode
@cindex batch mode
@cindex noninteractive use

  The command line option @samp{-batch} causes Emacs to run
noninteractively.  In this mode, Emacs does not read commands from the
terminal, it does not alter the terminal modes, and it does not expect
to be outputting to an erasable screen.  The idea is that you specify
Lisp programs to run; when they are finished, Emacs should exit.  The
way to specify the programs to run is with @samp{-l @var{file}}, which
loads the library named @var{file}, and @samp{-f @var{function}}, which
calls @var{function} with no arguments.

  Any Lisp program output that would normally go to the echo area,
either using @code{message} or using @code{prin1}, etc., with @code{t}
as the stream, goes instead to Emacs's standard output descriptor when
in batch mode.  Thus, Emacs behaves much like a noninteractive
application program.  (The echo area output that Emacs itself normally
generates, such as command echoing, is suppressed entirely.)

@defvar noninteractive
This variable is non-@code{nil} when Emacs is running in batch mode.
@end defvar
